        -:    0:Source:/Users/vadimleonov/Desktop/плюсы/SQL_lib/lib/memdb.hpp
        -:    0:Graph:/Users/vadimleonov/Desktop/плюсы/SQL_lib/cmake-build-debug-coverage/lib/CMakeFiles/tests.dir/tests.cpp.gcno
        -:    0:Data:/Users/vadimleonov/Desktop/плюсы/SQL_lib/cmake-build-debug-coverage/lib/CMakeFiles/tests.dir/tests.cpp.gcda
        -:    0:Runs:1
        -:    1:#pragma once
        -:    2:#include <string>
        -:    3:#include <memory>
        -:    4:#include <vector>
        -:    5:#include <variant>
        -:    6:
        -:    7:namespace memdb {
        -:    8:
        -:    9:    struct ColumnAttributes {
        -:   10:        bool unique = false;
        -:   11:        bool autoincrement = false;
        -:   12:        bool key = false;
        -:   13:    };
        -:   14:
        -:   15:    struct ColumnInterface {
        -:   16:        std::string name;
        -:   17:        ColumnAttributes attributes;
        -:   18:        ColumnInterface(std::string &);
        -:   19:        ColumnInterface(std::string &, ColumnAttributes &);
        -:   20:        int number;
        -:   21:    private:
        -:   22:        virtual void foo() = 0;
        -:   23:    };
        -:   24:
        -:   25:    template <typename T>
        -:   26:    struct Column : public ColumnInterface {
        -:   27:        Column(std::string &&, int len);
        -:   28:        Column(std::string &&, T &&, int len);
        -:   29:        Column(std::string &&, ColumnAttributes &&attr, T &&, int len);
        -:   30:        Column(std::string &&, ColumnAttributes &&, int len);
        -:   31:        std::vector<T> vector;
        -:   32:        T value;
        -:   33:        bool hasDefoltValue = false;
        -:   34:    private:
    #####:   35:        void foo() override {};
------------------
_ZN5memdb6ColumnIiE3fooEv:
function _ZN5memdb6ColumnIiE3fooEv called 0 returned 0% blocks executed 0%
    #####:   35:        void foo() override {};
------------------
_ZN5memdb6ColumnINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE3fooEv:
function _ZN5memdb6ColumnINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE3fooEv called 0 returned 0% blocks executed 0%
    #####:   35:        void foo() override {};
------------------
_ZN5memdb6ColumnIbE3fooEv:
function _ZN5memdb6ColumnIbE3fooEv called 0 returned 0% blocks executed 0%
    #####:   35:        void foo() override {};
------------------
_ZN5memdb6ColumnISt6vectorIhSaIhEEE3fooEv:
function _ZN5memdb6ColumnISt6vectorIhSaIhEEE3fooEv called 0 returned 0% blocks executed 0%
    #####:   35:        void foo() override {};
------------------
        -:   36:        int len; // for strings and bytes
        -:   37:    };
        -:   38:
        -:   39:    template <typename T>
        -:   40:    struct LineValue {
        -:   41:        T value;
        -:   42:        bool defaultValue;
        -:   43:    };
        -:   44:
        -:   45:    template<int ArgumentsCount, typename... Types>
        -:   46:    struct Line {
        -:   47:        Line(bool, std::tuple<std::pair<std::string, Types>...> &);
        -:   48:        std::tuple<std::pair<std::string, LineValue<Types>>...> values;
        -:   49:        bool hasNames = false;
        -:   50:        int count = ArgumentsCount;
        -:   51:    };
        -:   52:
        -:   53:    struct Table {
        -:   54:        int columnsCount = 0;
        -:   55:        std::vector<Column<int32_t>> intColumns;
        -:   56:        std::vector<Column<bool>> boolColumns;
        -:   57:        std::vector<Column<std::string>> stringColumns;
        -:   58:        std::vector<Column<std::vector<uint8_t>>> byteColumns;
        -:   59:        std::string name;
function _ZN5memdb5Table15getColumnsCountEv called 0 returned 0% blocks executed 0%
    #####:   60:        int getColumnsCount() {return columnsCount;}
    %%%%%:   60-block  0
        -:   61:        Table(std::string &&, std::vector<Column<int32_t>> &&, std::vector<Column<std::string>> &&, std::vector<Column<bool>> &&, std::vector<Column<std::vector<uint8_t>>> &&);
        -:   62:
        -:   63:
        -:   64:        template<int ArgumentsCount, typename... Types>
        -:   65:        void insert(Line<ArgumentsCount, Types...> &&);
        -:   66:
        -:   67:    };
        -:   68:
        -:   69:
        -:   70://    class Database {
        -:   71://        std::vector<Table> tables;
        -:   72://        std::vector<const std::type_info*> types;
        -:   73://
        -:   74://    public:
        -:   75://        void addNewTable(const std::shared_ptr<TableBase>&, const std::type_info *);
        -:   76://        void insertToTable(std::string &values, std::string &name);
        -:   77://    };
        -:   78:
        -:   79:}
        -:   80:
        -:   81:class ExecutionException : std::exception
        -:   82:{
        -:   83:public:
        -:   84:    ExecutionException(std::string &&whatStr) noexcept : whatStr(std::move(whatStr)) {}
        -:   85:    ExecutionException(const std::string &whatStr) noexcept : whatStr(whatStr) {}
        -:   86:    ~ExecutionException() noexcept;
        -:   87:    const char* what() const noexcept override;
        -:   88:private:
        -:   89:    std::string whatStr;
        -:   90:};
        -:   91:
function _ZNK18ExecutionException4whatEv called 0 returned 0% blocks executed 0%
    #####:   92:const char* ExecutionException::what() const noexcept
        -:   93:{
    #####:   94:    return whatStr.c_str();
    %%%%%:   94-block  0
call    0 never executed
        -:   95:}
        -:   96:
        -:   97:
        -:   98:
        -:   99:
    #####:  100:memdb::ColumnInterface::ColumnInterface(std::string &s) {name = s;}
------------------
_ZN5memdb15ColumnInterfaceC1ERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE:
function _ZN5memdb15ColumnInterfaceC1ERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:  100:memdb::ColumnInterface::ColumnInterface(std::string &s) {name = s;}
    %%%%%:  100-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:  100-block  1
    $$$$$:  100-block  2
call    5 never executed
------------------
_ZN5memdb15ColumnInterfaceC2ERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE:
function _ZN5memdb15ColumnInterfaceC2ERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:  100:memdb::ColumnInterface::ColumnInterface(std::string &s) {name = s;}
    %%%%%:  100-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:  100-block  1
    $$$$$:  100-block  2
call    5 never executed
------------------
    #####:  101:memdb::ColumnInterface::ColumnInterface(std::string &s, ColumnAttributes &a) {name = s; attributes = a;}
------------------
_ZN5memdb15ColumnInterfaceC1ERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERNS_16ColumnAttributesE:
function _ZN5memdb15ColumnInterfaceC1ERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERNS_16ColumnAttributesE called 0 returned 0% blocks executed 0%
    #####:  101:memdb::ColumnInterface::ColumnInterface(std::string &s, ColumnAttributes &a) {name = s; attributes = a;}
    %%%%%:  101-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:  101-block  1
    $$$$$:  101-block  2
call    5 never executed
------------------
_ZN5memdb15ColumnInterfaceC2ERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERNS_16ColumnAttributesE:
function _ZN5memdb15ColumnInterfaceC2ERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERNS_16ColumnAttributesE called 0 returned 0% blocks executed 0%
    #####:  101:memdb::ColumnInterface::ColumnInterface(std::string &s, ColumnAttributes &a) {name = s; attributes = a;}
    %%%%%:  101-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:  101-block  1
    $$$$$:  101-block  2
call    5 never executed
------------------
        -:  102:
        -:  103:template <typename T>
function _ZN5memdb6ColumnINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1EOS6_i called 0 returned 0% blocks executed 0%
    #####:  104:memdb::Column<T>::Column(std::string &&s, int lenght) : ColumnInterface(s) {len = lenght;}
    %%%%%:  104-block  0
call    0 never executed
call    1 never executed
call    2 never executed
        -:  105:
        -:  106:template<typename T>
        -:  107:memdb::Column<T>::Column(std::string &&s, ColumnAttributes && a, int lenght) : ColumnInterface(s, a) {len = lenght;}
        -:  108:
        -:  109:template <typename T>
function _ZN5memdb6ColumnIiEC1EONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEOii called 0 returned 0% blocks executed 0%
    #####:  110:memdb::Column<T>::Column(std::string &&s, T &&v, int lenght) :  ColumnInterface(s) {value = v; hasDefoltValue = true; len=lenght;}
    %%%%%:  110-block  0
call    0 never executed
call    1 never executed
        -:  111:
        -:  112:template<typename T>
        -:  113:memdb::Column<T>::Column(std::string &&s, ColumnAttributes &&a, T &&v, int lenght)  : ColumnInterface(s, a) {value = v; hasDefoltValue = true; len = lenght;}
        -:  114:
        -:  115:
    #####:  116:memdb::Table::Table(std::string &&s, std::vector<Column<int32_t>> &&intC, std::vector<Column<std::string>> &&stringC, std::vector<Column<bool>> &&boolC, std::vector<Column<std::vector<uint8_t>>> &&byteC) {
    #####:  117:    name = s;
    #####:  118:    for (auto &c : intC) {
    #####:  119:        intColumns.push_back(c);
    #####:  120:        columnsCount++;
        -:  121:    }
    #####:  122:    for (auto &c : stringC) {
    #####:  123:        stringColumns.push_back(c);
    #####:  124:        columnsCount++;
        -:  125:    }
    #####:  126:    for (auto &c : boolC) {
    #####:  127:        boolColumns.push_back(c);
    #####:  128:        columnsCount++;
        -:  129:    }
    #####:  130:    for (auto &c : byteC) {
    #####:  131:        byteColumns.push_back(c);
    #####:  132:        columnsCount++;
        -:  133:    }
    #####:  134:}
------------------
_ZN5memdb5TableC1EONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEOSt6vectorINS_6ColumnIiEESaISA_EEOS8_INS9_IS6_EESaISE_EEOS8_INS9_IbEESaISI_EEOS8_INS9_IS8_IhSaIhEEEESaISO_EE:
function _ZN5memdb5TableC1EONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEOSt6vectorINS_6ColumnIiEESaISA_EEOS8_INS9_IS6_EESaISE_EEOS8_INS9_IbEESaISI_EEOS8_INS9_IS8_IhSaIhEEEESaISO_EE called 0 returned 0% blocks executed 0%
    #####:  116:memdb::Table::Table(std::string &&s, std::vector<Column<int32_t>> &&intC, std::vector<Column<std::string>> &&stringC, std::vector<Column<bool>> &&boolC, std::vector<Column<std::vector<uint8_t>>> &&byteC) {
    %%%%%:  116-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####:  117:    name = s;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  118:    for (auto &c : intC) {
    %%%%%:  118-block  0
call    0 never executed
call    1 never executed
    %%%%%:  118-block  1
call    2 never executed
    %%%%%:  118-block  2
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  119:        intColumns.push_back(c);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  120:        columnsCount++;
    %%%%%:  120-block  0
call    0 never executed
        -:  121:    }
    #####:  122:    for (auto &c : stringC) {
    %%%%%:  122-block  0
call    0 never executed
call    1 never executed
    %%%%%:  122-block  1
call    2 never executed
    %%%%%:  122-block  2
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  123:        stringColumns.push_back(c);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  124:        columnsCount++;
    %%%%%:  124-block  0
call    0 never executed
        -:  125:    }
    #####:  126:    for (auto &c : boolC) {
    %%%%%:  126-block  0
call    0 never executed
call    1 never executed
    %%%%%:  126-block  1
call    2 never executed
    %%%%%:  126-block  2
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  127:        boolColumns.push_back(c);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  128:        columnsCount++;
    %%%%%:  128-block  0
call    0 never executed
        -:  129:    }
    #####:  130:    for (auto &c : byteC) {
    %%%%%:  130-block  0
call    0 never executed
call    1 never executed
    %%%%%:  130-block  1
call    2 never executed
    %%%%%:  130-block  2
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  131:        byteColumns.push_back(c);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  132:        columnsCount++;
    %%%%%:  132-block  0
call    0 never executed
        -:  133:    }
    #####:  134:}
    %%%%%:  134-block  0
    $$$$$:  134-block  1
call    0 never executed
    $$$$$:  134-block  2
call    1 never executed
    $$$$$:  134-block  3
call    2 never executed
    $$$$$:  134-block  4
call    3 never executed
    $$$$$:  134-block  5
call    4 never executed
------------------
_ZN5memdb5TableC2EONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEOSt6vectorINS_6ColumnIiEESaISA_EEOS8_INS9_IS6_EESaISE_EEOS8_INS9_IbEESaISI_EEOS8_INS9_IS8_IhSaIhEEEESaISO_EE:
function _ZN5memdb5TableC2EONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEOSt6vectorINS_6ColumnIiEESaISA_EEOS8_INS9_IS6_EESaISE_EEOS8_INS9_IbEESaISI_EEOS8_INS9_IS8_IhSaIhEEEESaISO_EE called 0 returned 0% blocks executed 0%
    #####:  116:memdb::Table::Table(std::string &&s, std::vector<Column<int32_t>> &&intC, std::vector<Column<std::string>> &&stringC, std::vector<Column<bool>> &&boolC, std::vector<Column<std::vector<uint8_t>>> &&byteC) {
    %%%%%:  116-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####:  117:    name = s;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  118:    for (auto &c : intC) {
    %%%%%:  118-block  0
call    0 never executed
call    1 never executed
    %%%%%:  118-block  1
call    2 never executed
    %%%%%:  118-block  2
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  119:        intColumns.push_back(c);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  120:        columnsCount++;
    %%%%%:  120-block  0
call    0 never executed
        -:  121:    }
    #####:  122:    for (auto &c : stringC) {
    %%%%%:  122-block  0
call    0 never executed
call    1 never executed
    %%%%%:  122-block  1
call    2 never executed
    %%%%%:  122-block  2
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  123:        stringColumns.push_back(c);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  124:        columnsCount++;
    %%%%%:  124-block  0
call    0 never executed
        -:  125:    }
    #####:  126:    for (auto &c : boolC) {
    %%%%%:  126-block  0
call    0 never executed
call    1 never executed
    %%%%%:  126-block  1
call    2 never executed
    %%%%%:  126-block  2
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  127:        boolColumns.push_back(c);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  128:        columnsCount++;
    %%%%%:  128-block  0
call    0 never executed
        -:  129:    }
    #####:  130:    for (auto &c : byteC) {
    %%%%%:  130-block  0
call    0 never executed
call    1 never executed
    %%%%%:  130-block  1
call    2 never executed
    %%%%%:  130-block  2
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  131:        byteColumns.push_back(c);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  132:        columnsCount++;
    %%%%%:  132-block  0
call    0 never executed
        -:  133:    }
    #####:  134:}
    %%%%%:  134-block  0
    $$$$$:  134-block  1
call    0 never executed
    $$$$$:  134-block  2
call    1 never executed
    $$$$$:  134-block  3
call    2 never executed
    $$$$$:  134-block  4
call    3 never executed
    $$$$$:  134-block  5
call    4 never executed
------------------
        -:  135:
        -:  136:template<int ArgumentsCount, typename... Types>
        -:  137:memdb::Line<ArgumentsCount, Types...>::Line(bool b, std::tuple<std::pair<std::string, Types>...> &t) {
        -:  138:    hasNames = b;
        -:  139:    values = t;
        -:  140:}
        -:  141:
        -:  142:template<int ArgumentsCount, typename... Types>
        -:  143:void memdb::Table::insert(Line<ArgumentsCount, Types...> &&line) {
        -:  144:    if (line.count != columnsCount) {
        -:  145:        throw ExecutionException("an attempt to insert an inappropriate number of values\n");
        -:  146:    }
        -:  147:
        -:  148:    if (line.hasNames) {
        -:  149:        size_t size;
        -:  150:        for (auto &p : line.values) {
        -:  151:            for (auto &c : this->intColumns) {
        -:  152:                if (c.name == p.first) {
        -:  153:                    if (c.attributes.autoincrement) {
        -:  154:                        if (c.vector.empty()) {
        -:  155:                            c.vector.push_back(0);
        -:  156:                        } else {
        -:  157:                            c.vector.push_back(c.vector.back() + 1);
        -:  158:                        }
        -:  159:                    } else {
        -:  160:                        c.vector.push_back(p.second.value);
        -:  161:                    }
        -:  162:                    size = c.vector.size();
        -:  163:                    break;
        -:  164:                }
        -:  165:            }
        -:  166:
        -:  167:            for (auto &c : this->stringColumns) {
        -:  168:                if (c.name == p.first) {
        -:  169:                    c.vector.push_back(p.second.value);
        -:  170:                    size = c.vector.size();
        -:  171:                    break;
        -:  172:                }
        -:  173:            }
        -:  174:            for (auto &c : this->boolColumns) {
        -:  175:                if (c.name == p.first) {
        -:  176:                    c.vector.push_back(p.second.value);
        -:  177:                    size = c.vector.size();
        -:  178:                    break;
        -:  179:                }
        -:  180:            }
        -:  181:            for (auto &c : this->byteColumns) {
        -:  182:                if (c.name == p.first) {
        -:  183:                    c.vector.push_back(p.second.value);
        -:  184:                    size = c.vector.size();
        -:  185:                    break;
        -:  186:                }
        -:  187:            }
        -:  188:        }
        -:  189:
        -:  190:        for (auto &c : this->intColumns) {
        -:  191:            if (c.vector.size() < size) {
        -:  192:                if (c.attributes.autoincrement) {
        -:  193:                    if (c.vector.empty()) {
        -:  194:                        c.vector.push_back(0);
        -:  195:                    } else {
        -:  196:                        c.vector.push_back(c.vector.back() + 1);
        -:  197:                    }
        -:  198:                } else if (c.hasDefoltValue) {
        -:  199:                    c.vector.push_back(c.value);
        -:  200:                } else {
        -:  201:                    throw ExecutionException("Column " + c.name + " has not default value\n");
        -:  202:                }
        -:  203:            }
        -:  204:        }
        -:  205:        for (auto &c : this->stringColumns) {
        -:  206:            if (c.vector.size() < size) {
        -:  207:                if (c.hasDefoltValue) {
        -:  208:                    c.vector.push_back(c.value);
        -:  209:                } else {
        -:  210:                    throw ExecutionException("Column " + c.name + " has not default value\n");
        -:  211:                }
        -:  212:            }
        -:  213:        }
        -:  214:        for (auto &c : this->boolColumns) {
        -:  215:            if (c.vector.size() < size) {
        -:  216:                if (c.hasDefoltValue) {
        -:  217:                    c.vector.push_back(c.value);
        -:  218:                } else {
        -:  219:                    throw ExecutionException("Column " + c.name + " has not default value\n");
        -:  220:                }
        -:  221:            }
        -:  222:        }
        -:  223:        for (auto &c : this->byteColumns) {
        -:  224:            if (c.vector.size() < size) {
        -:  225:                if (c.hasDefoltValue) {
        -:  226:                    c.vector.push_back(c.value);
        -:  227:                } else {
        -:  228:                    throw ExecutionException("Column " + c.name + " has not default value\n");
        -:  229:                }
        -:  230:            }
        -:  231:        }
        -:  232:    } else {
        -:  233:        for (int i = 0; i < line.values.size(); ++i) {
        -:  234:            for (auto &c : this->intColumns) {
        -:  235:                if (c.number == i) {
        -:  236:                    if (line.values[i].second.defaultValue) {
        -:  237:                        if (c.attributes.autoincrement) {
        -:  238:                            if (c.vector.empty()) {
        -:  239:                                c.vector.push_back(0);
        -:  240:                            } else {
        -:  241:                                c.vector.push_back(c.vector.back() + 1);
        -:  242:                            }
        -:  243:                        } else if (c.hasDefoltValue) {
        -:  244:                            c.vector.push_back(c.value);
        -:  245:                        } else {
        -:  246:                            throw ExecutionException("Column " + c.name + " has not default value\n");
        -:  247:                        }
        -:  248:                    } else {
        -:  249:                        c.vector.push_back(line.values[i].second.value);
        -:  250:                    }
        -:  251:                }
        -:  252:            }
        -:  253:            for (auto &c : this->stringColumns) {
        -:  254:                if (c.number == i) {
        -:  255:                    if (line.values[i].second.defaultValue) {
        -:  256:                        if (c.hasDefoltValue) {
        -:  257:                            c.vector.push_back(c.value);
        -:  258:                        } else {
        -:  259:                            throw ExecutionException("Column " + c.name + " has not default value\n");
        -:  260:                        }
        -:  261:                    } else {
        -:  262:                        c.vector.push_back(line.values[i].second.value);
        -:  263:                    }
        -:  264:                }
        -:  265:            }
        -:  266:            for (auto &c : this->boolColumns) {
        -:  267:                if (c.number == i) {
        -:  268:                    if (line.values[i].second.defaultValue) {
        -:  269:                        if (c.hasDefoltValue) {
        -:  270:                            c.vector.push_back(c.value);
        -:  271:                        } else {
        -:  272:                            throw ExecutionException("Column " + c.name + " has not default value\n");
        -:  273:                        }
        -:  274:                    } else {
        -:  275:                        c.vector.push_back(line.values[i].second.value);
        -:  276:                    }
        -:  277:                }
        -:  278:            }
        -:  279:            for (auto &c : this->byteColumns) {
        -:  280:                if (c.number == i) {
        -:  281:                    if (line.values[i].second.defaultValue) {
        -:  282:                        if (c.hasDefoltValue) {
        -:  283:                            c.vector.push_back(c.value);
        -:  284:                        } else {
        -:  285:                            throw ExecutionException("Column " + c.name + " has not default value\n");
        -:  286:                        }
        -:  287:                    } else {
        -:  288:                        c.vector.push_back(line.values[i].second.value);
        -:  289:                    }
        -:  290:                }
        -:  291:            }
        -:  292:        }
        -:  293:    }
        -:  294:}
