        -:    0:Source:/opt/homebrew/Cellar/gcc@12/12.4.0/include/c++/12/bits/allocator.h
        -:    0:Graph:/Users/vadimleonov/Desktop/плюсы/SQL_lib/cmake-build-debug-coverage/lib/CMakeFiles/tests.dir/tests.cpp.gcno
        -:    0:Data:/Users/vadimleonov/Desktop/плюсы/SQL_lib/cmake-build-debug-coverage/lib/CMakeFiles/tests.dir/tests.cpp.gcda
        -:    0:Runs:1
        -:    1:// Allocators -*- C++ -*-
        -:    2:
        -:    3:// Copyright (C) 2001-2022 Free Software Foundation, Inc.
        -:    4://
        -:    5:// This file is part of the GNU ISO C++ Library.  This library is free
        -:    6:// software; you can redistribute it and/or modify it under the
        -:    7:// terms of the GNU General Public License as published by the
        -:    8:// Free Software Foundation; either version 3, or (at your option)
        -:    9:// any later version.
        -:   10:
        -:   11:// This library is distributed in the hope that it will be useful,
        -:   12:// but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   13:// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   14:// GNU General Public License for more details.
        -:   15:
        -:   16:// Under Section 7 of GPL version 3, you are granted additional
        -:   17:// permissions described in the GCC Runtime Library Exception, version
        -:   18:// 3.1, as published by the Free Software Foundation.
        -:   19:
        -:   20:// You should have received a copy of the GNU General Public License and
        -:   21:// a copy of the GCC Runtime Library Exception along with this program;
        -:   22:// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
        -:   23:// <http://www.gnu.org/licenses/>.
        -:   24:
        -:   25:/*
        -:   26: * Copyright (c) 1996-1997
        -:   27: * Silicon Graphics Computer Systems, Inc.
        -:   28: *
        -:   29: * Permission to use, copy, modify, distribute and sell this software
        -:   30: * and its documentation for any purpose is hereby granted without fee,
        -:   31: * provided that the above copyright notice appear in all copies and
        -:   32: * that both that copyright notice and this permission notice appear
        -:   33: * in supporting documentation.  Silicon Graphics makes no
        -:   34: * representations about the suitability of this software for any
        -:   35: * purpose.  It is provided "as is" without express or implied warranty.
        -:   36: */
        -:   37:
        -:   38:/** @file bits/allocator.h
        -:   39: *  This is an internal header file, included by other library headers.
        -:   40: *  Do not attempt to use it directly. @headername{memory}
        -:   41: */
        -:   42:
        -:   43:#ifndef _ALLOCATOR_H
        -:   44:#define _ALLOCATOR_H 1
        -:   45:
        -:   46:#include <bits/c++allocator.h> // Define the base class to std::allocator.
        -:   47:#include <bits/memoryfwd.h>
        -:   48:#if __cplusplus >= 201103L
        -:   49:#include <type_traits>
        -:   50:#endif
        -:   51:
        -:   52:#define __cpp_lib_incomplete_container_elements 201505L
        -:   53:
        -:   54:namespace std _GLIBCXX_VISIBILITY(default)
        -:   55:{
        -:   56:_GLIBCXX_BEGIN_NAMESPACE_VERSION
        -:   57:
        -:   58:  /**
        -:   59:   *  @addtogroup allocators
        -:   60:   *  @{
        -:   61:   */
        -:   62:
        -:   63:  // Since C++20 the primary template should be used for allocator<void>,
        -:   64:  // but then it would have a non-trivial default ctor and dtor for C++20,
        -:   65:  // but trivial for C++98-17, which would be an ABI incompatibiliy between
        -:   66:  // different standard dialects. So C++20 still uses the allocator<void>
        -:   67:  // explicit specialization, with the historical ABI properties, but with
        -:   68:  // the same members that are present in the primary template.
        -:   69:
        -:   70:  /** std::allocator<void> specialization.
        -:   71:   *
        -:   72:   * @headerfile memory
        -:   73:   */
        -:   74:  template<>
        -:   75:    class allocator<void>
        -:   76:    {
        -:   77:    public:
        -:   78:      typedef void        value_type;
        -:   79:      typedef size_t      size_type;
        -:   80:      typedef ptrdiff_t   difference_type;
        -:   81:
        -:   82:#if __cplusplus <= 201703L
        -:   83:      // These were removed for C++20, allocator_traits does the right thing.
        -:   84:      typedef void*       pointer;
        -:   85:      typedef const void* const_pointer;
        -:   86:
        -:   87:      template<typename _Tp1>
        -:   88:	struct rebind
        -:   89:	{ typedef allocator<_Tp1> other; };
        -:   90:#endif
        -:   91:
        -:   92:#if __cplusplus >= 201103L
        -:   93:      // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:   94:      // 2103. std::allocator propagate_on_container_move_assignment
        -:   95:      using propagate_on_container_move_assignment = true_type;
        -:   96:
        -:   97:      using is_always_equal
        -:   98:	_GLIBCXX20_DEPRECATED_SUGGEST("std::allocator_traits::is_always_equal")
        -:   99:	= true_type;
        -:  100:
        -:  101:#if __cplusplus >= 202002L
        -:  102:      // As noted above, these members are present for C++20 to provide the
        -:  103:      // same API as the primary template, but still trivial as in pre-C++20.
        -:  104:      allocator() = default;
        -:  105:      ~allocator() = default;
        -:  106:
        -:  107:      template<typename _Up>
        -:  108:	constexpr
        -:  109:	allocator(const allocator<_Up>&) noexcept { }
        -:  110:
        -:  111:      // No allocate member because it's ill-formed by LWG 3307.
        -:  112:      // No deallocate member because it would be undefined to call it
        -:  113:      // with any pointer which wasn't obtained from allocate.
        -:  114:#endif // C++20
        -:  115:#endif // C++11
        -:  116:    };
        -:  117:
        -:  118:  /**
        -:  119:   * @brief  The @a standard allocator, as per C++03 [20.4.1].
        -:  120:   *
        -:  121:   *  See https://gcc.gnu.org/onlinedocs/libstdc++/manual/memory.html#std.util.memory.allocator
        -:  122:   *  for further details.
        -:  123:   *
        -:  124:   *  @tparam  _Tp  Type of allocated object.
        -:  125:   *
        -:  126:   *  @headerfile memory
        -:  127:   */
        -:  128:  template<typename _Tp>
        -:  129:    class allocator : public __allocator_base<_Tp>
        -:  130:    {
        -:  131:    public:
        -:  132:      typedef _Tp        value_type;
        -:  133:      typedef size_t     size_type;
        -:  134:      typedef ptrdiff_t  difference_type;
        -:  135:
        -:  136:#if __cplusplus <= 201703L
        -:  137:      // These were removed for C++20.
        -:  138:      typedef _Tp*       pointer;
        -:  139:      typedef const _Tp* const_pointer;
        -:  140:      typedef _Tp&       reference;
        -:  141:      typedef const _Tp& const_reference;
        -:  142:
        -:  143:      template<typename _Tp1>
        -:  144:	struct rebind
        -:  145:	{ typedef allocator<_Tp1> other; };
        -:  146:#endif
        -:  147:
        -:  148:#if __cplusplus >= 201103L
        -:  149:      // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  150:      // 2103. std::allocator propagate_on_container_move_assignment
        -:  151:      using propagate_on_container_move_assignment = true_type;
        -:  152:
        -:  153:      using is_always_equal
        -:  154:	_GLIBCXX20_DEPRECATED_SUGGEST("std::allocator_traits::is_always_equal")
        -:  155:	= true_type;
        -:  156:#endif
        -:  157:
        -:  158:      // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  159:      // 3035. std::allocator's constructors should be constexpr
        -:  160:      _GLIBCXX20_CONSTEXPR
       7*:  161:      allocator() _GLIBCXX_NOTHROW { }
------------------
_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC2Ev:
function _ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC2Ev called 5 returned 100% blocks executed 100%
        5:  161:      allocator() _GLIBCXX_NOTHROW { }
        5:  161-block  0
call    0 returned 5
------------------
_ZNSaIiEC2Ev:
function _ZNSaIiEC2Ev called 2 returned 100% blocks executed 100%
        2:  161:      allocator() _GLIBCXX_NOTHROW { }
        2:  161-block  0
call    0 returned 2
------------------
_ZNSaIN5memdb6ColumnISt6vectorIhSaIhEEEEEC2Ev:
function _ZNSaIN5memdb6ColumnISt6vectorIhSaIhEEEEEC2Ev called 0 returned 0% blocks executed 0%
    #####:  161:      allocator() _GLIBCXX_NOTHROW { }
    %%%%%:  161-block  0
call    0 never executed
------------------
_ZNSaIN5memdb6ColumnIbEEEC2Ev:
function _ZNSaIN5memdb6ColumnIbEEEC2Ev called 0 returned 0% blocks executed 0%
    #####:  161:      allocator() _GLIBCXX_NOTHROW { }
    %%%%%:  161-block  0
call    0 never executed
------------------
_ZNSaIN5memdb6ColumnINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEC1Ev:
function _ZNSaIN5memdb6ColumnINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEC1Ev called 0 returned 0% blocks executed 0%
    #####:  161:      allocator() _GLIBCXX_NOTHROW { }
    %%%%%:  161-block  0
call    0 never executed
------------------
_ZNSaIN5memdb6ColumnINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEC2Ev:
function _ZNSaIN5memdb6ColumnINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEC2Ev called 0 returned 0% blocks executed 0%
    #####:  161:      allocator() _GLIBCXX_NOTHROW { }
    %%%%%:  161-block  0
call    0 never executed
------------------
_ZNSaIN5memdb6ColumnIiEEEC1Ev:
function _ZNSaIN5memdb6ColumnIiEEEC1Ev called 0 returned 0% blocks executed 0%
    #####:  161:      allocator() _GLIBCXX_NOTHROW { }
    %%%%%:  161-block  0
call    0 never executed
------------------
_ZNSaIN5memdb6ColumnIiEEEC2Ev:
function _ZNSaIN5memdb6ColumnIiEEEC2Ev called 0 returned 0% blocks executed 0%
    #####:  161:      allocator() _GLIBCXX_NOTHROW { }
    %%%%%:  161-block  0
call    0 never executed
------------------
        -:  162:
        -:  163:      _GLIBCXX20_CONSTEXPR
       6*:  164:      allocator(const allocator& __a) _GLIBCXX_NOTHROW
       6*:  165:      : __allocator_base<_Tp>(__a) { }
------------------
_ZNSaIhEC1ERKS_:
function _ZNSaIhEC1ERKS_ called 0 returned 0% blocks executed 0%
    #####:  164:      allocator(const allocator& __a) _GLIBCXX_NOTHROW
    #####:  165:      : __allocator_base<_Tp>(__a) { }
    %%%%%:  165-block  0
call    0 never executed
------------------
_ZNSaIhEC2ERKS_:
function _ZNSaIhEC2ERKS_ called 0 returned 0% blocks executed 0%
    #####:  164:      allocator(const allocator& __a) _GLIBCXX_NOTHROW
    #####:  165:      : __allocator_base<_Tp>(__a) { }
    %%%%%:  165-block  0
call    0 never executed
------------------
_ZNSaISt6vectorIhSaIhEEEC1ERKS2_:
function _ZNSaISt6vectorIhSaIhEEEC1ERKS2_ called 0 returned 0% blocks executed 0%
    #####:  164:      allocator(const allocator& __a) _GLIBCXX_NOTHROW
    #####:  165:      : __allocator_base<_Tp>(__a) { }
    %%%%%:  165-block  0
call    0 never executed
------------------
_ZNSaISt6vectorIhSaIhEEEC2ERKS2_:
function _ZNSaISt6vectorIhSaIhEEEC2ERKS2_ called 0 returned 0% blocks executed 0%
    #####:  164:      allocator(const allocator& __a) _GLIBCXX_NOTHROW
    #####:  165:      : __allocator_base<_Tp>(__a) { }
    %%%%%:  165-block  0
call    0 never executed
------------------
_ZNSaImEC1ERKS_:
function _ZNSaImEC1ERKS_ called 0 returned 0% blocks executed 0%
    #####:  164:      allocator(const allocator& __a) _GLIBCXX_NOTHROW
    #####:  165:      : __allocator_base<_Tp>(__a) { }
    %%%%%:  165-block  0
call    0 never executed
------------------
_ZNSaImEC2ERKS_:
function _ZNSaImEC2ERKS_ called 0 returned 0% blocks executed 0%
    #####:  164:      allocator(const allocator& __a) _GLIBCXX_NOTHROW
    #####:  165:      : __allocator_base<_Tp>(__a) { }
    %%%%%:  165-block  0
call    0 never executed
------------------
_ZNSaIN5memdb6ColumnINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEC1ERKS8_:
function _ZNSaIN5memdb6ColumnINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEC1ERKS8_ called 0 returned 0% blocks executed 0%
    #####:  164:      allocator(const allocator& __a) _GLIBCXX_NOTHROW
    #####:  165:      : __allocator_base<_Tp>(__a) { }
    %%%%%:  165-block  0
call    0 never executed
------------------
_ZNSaIN5memdb6ColumnINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEC2ERKS8_:
function _ZNSaIN5memdb6ColumnINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEC2ERKS8_ called 0 returned 0% blocks executed 0%
    #####:  164:      allocator(const allocator& __a) _GLIBCXX_NOTHROW
    #####:  165:      : __allocator_base<_Tp>(__a) { }
    %%%%%:  165-block  0
call    0 never executed
------------------
_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1ERKS5_:
function _ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1ERKS5_ called 3 returned 100% blocks executed 100%
        3:  164:      allocator(const allocator& __a) _GLIBCXX_NOTHROW
        3:  165:      : __allocator_base<_Tp>(__a) { }
        3:  165-block  0
call    0 returned 3
------------------
_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC2ERKS5_:
function _ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC2ERKS5_ called 3 returned 100% blocks executed 100%
        3:  164:      allocator(const allocator& __a) _GLIBCXX_NOTHROW
        3:  165:      : __allocator_base<_Tp>(__a) { }
        3:  165-block  0
call    0 returned 3
------------------
_ZNSaIN5memdb6ColumnIiEEEC1ERKS2_:
function _ZNSaIN5memdb6ColumnIiEEEC1ERKS2_ called 0 returned 0% blocks executed 0%
    #####:  164:      allocator(const allocator& __a) _GLIBCXX_NOTHROW
    #####:  165:      : __allocator_base<_Tp>(__a) { }
    %%%%%:  165-block  0
call    0 never executed
------------------
_ZNSaIN5memdb6ColumnIiEEEC2ERKS2_:
function _ZNSaIN5memdb6ColumnIiEEEC2ERKS2_ called 0 returned 0% blocks executed 0%
    #####:  164:      allocator(const allocator& __a) _GLIBCXX_NOTHROW
    #####:  165:      : __allocator_base<_Tp>(__a) { }
    %%%%%:  165-block  0
call    0 never executed
------------------
_ZNSaIiEC1ERKS_:
function _ZNSaIiEC1ERKS_ called 0 returned 0% blocks executed 0%
    #####:  164:      allocator(const allocator& __a) _GLIBCXX_NOTHROW
    #####:  165:      : __allocator_base<_Tp>(__a) { }
    %%%%%:  165-block  0
call    0 never executed
------------------
_ZNSaIiEC2ERKS_:
function _ZNSaIiEC2ERKS_ called 0 returned 0% blocks executed 0%
    #####:  164:      allocator(const allocator& __a) _GLIBCXX_NOTHROW
    #####:  165:      : __allocator_base<_Tp>(__a) { }
    %%%%%:  165-block  0
call    0 never executed
------------------
        -:  166:
        -:  167:#if __cplusplus >= 201103L
        -:  168:      // Avoid implicit deprecation.
        -:  169:      allocator& operator=(const allocator&) = default;
        -:  170:#endif
        -:  171:
        -:  172:      template<typename _Tp1>
        -:  173:	_GLIBCXX20_CONSTEXPR
    #####:  174:	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
------------------
_ZNSaImEC1IbEERKSaIT_E:
function _ZNSaImEC1IbEERKSaIT_E called 0 returned 0% blocks executed 0%
    #####:  174:	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
    %%%%%:  174-block  0
call    0 never executed
------------------
_ZNSaIbEC1ImEERKSaIT_E:
function _ZNSaIbEC1ImEERKSaIT_E called 0 returned 0% blocks executed 0%
    #####:  174:	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
    %%%%%:  174-block  0
call    0 never executed
------------------
        -:  175:
        -:  176:#if __cpp_constexpr_dynamic_alloc
        -:  177:      constexpr
        -:  178:#endif
      19*:  179:      ~allocator() _GLIBCXX_NOTHROW { }
------------------
_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED2Ev:
function _ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED2Ev called 16 returned 100% blocks executed 100%
       16:  179:      ~allocator() _GLIBCXX_NOTHROW { }
------------------
_ZNSaIN5memdb6ColumnIiEEED2Ev:
function _ZNSaIN5memdb6ColumnIiEEED2Ev called 0 returned 0% blocks executed 0%
    #####:  179:      ~allocator() _GLIBCXX_NOTHROW { }
------------------
_ZNSaIN5memdb6ColumnIiEEED1Ev:
function _ZNSaIN5memdb6ColumnIiEEED1Ev called 0 returned 0% blocks executed 0%
    #####:  179:      ~allocator() _GLIBCXX_NOTHROW { }
------------------
_ZNSaIN5memdb6ColumnIbEEED2Ev:
function _ZNSaIN5memdb6ColumnIbEEED2Ev called 0 returned 0% blocks executed 0%
    #####:  179:      ~allocator() _GLIBCXX_NOTHROW { }
------------------
_ZNSaIN5memdb6ColumnINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEED2Ev:
function _ZNSaIN5memdb6ColumnINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEED2Ev called 0 returned 0% blocks executed 0%
    #####:  179:      ~allocator() _GLIBCXX_NOTHROW { }
------------------
_ZNSaIN5memdb6ColumnINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEED1Ev:
function _ZNSaIN5memdb6ColumnINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEED1Ev called 0 returned 0% blocks executed 0%
    #####:  179:      ~allocator() _GLIBCXX_NOTHROW { }
------------------
_ZNSaIN5memdb6ColumnISt6vectorIhSaIhEEEEED2Ev:
function _ZNSaIN5memdb6ColumnISt6vectorIhSaIhEEEEED2Ev called 0 returned 0% blocks executed 0%
    #####:  179:      ~allocator() _GLIBCXX_NOTHROW { }
------------------
_ZNSaIiED2Ev:
function _ZNSaIiED2Ev called 0 returned 0% blocks executed 0%
    #####:  179:      ~allocator() _GLIBCXX_NOTHROW { }
------------------
_ZNSaIiED1Ev:
function _ZNSaIiED1Ev called 0 returned 0% blocks executed 0%
    #####:  179:      ~allocator() _GLIBCXX_NOTHROW { }
------------------
_ZNSaIhED1Ev:
function _ZNSaIhED1Ev called 0 returned 0% blocks executed 0%
    #####:  179:      ~allocator() _GLIBCXX_NOTHROW { }
------------------
_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev:
function _ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev called 3 returned 100% blocks executed 100%
        3:  179:      ~allocator() _GLIBCXX_NOTHROW { }
------------------
_ZNSaIbED1Ev:
function _ZNSaIbED1Ev called 0 returned 0% blocks executed 0%
    #####:  179:      ~allocator() _GLIBCXX_NOTHROW { }
------------------
_ZNSaImED2Ev:
function _ZNSaImED2Ev called 0 returned 0% blocks executed 0%
    #####:  179:      ~allocator() _GLIBCXX_NOTHROW { }
------------------
_ZNSaImED1Ev:
function _ZNSaImED1Ev called 0 returned 0% blocks executed 0%
    #####:  179:      ~allocator() _GLIBCXX_NOTHROW { }
------------------
_ZNSaISt6vectorIhSaIhEEED2Ev:
function _ZNSaISt6vectorIhSaIhEEED2Ev called 0 returned 0% blocks executed 0%
    #####:  179:      ~allocator() _GLIBCXX_NOTHROW { }
------------------
_ZNSaISt6vectorIhSaIhEEED1Ev:
function _ZNSaISt6vectorIhSaIhEEED1Ev called 0 returned 0% blocks executed 0%
    #####:  179:      ~allocator() _GLIBCXX_NOTHROW { }
------------------
_ZNSaIhED2Ev:
function _ZNSaIhED2Ev called 0 returned 0% blocks executed 0%
    #####:  179:      ~allocator() _GLIBCXX_NOTHROW { }
------------------
        -:  180:
        -:  181:#if __cplusplus > 201703L
        -:  182:      [[nodiscard,__gnu__::__always_inline__]]
        -:  183:      constexpr _Tp*
        -:  184:      allocate(size_t __n)
        -:  185:      {
     122*:  186:	if (std::__is_constant_evaluated())
    %%%%%:  186-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  186-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  186-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
       16:  186-block  3
call    9 returned 16
branch 10 taken 0 (fallthrough)
branch 11 taken 16
        2:  186-block  4
call   12 returned 2
branch 13 taken 0 (fallthrough)
branch 14 taken 2
    %%%%%:  186-block  5
call   15 never executed
branch 16 never executed
branch 17 never executed
    %%%%%:  186-block  6
call   18 never executed
branch 19 never executed
branch 20 never executed
    %%%%%:  186-block  7
call   21 never executed
branch 22 never executed
branch 23 never executed
    %%%%%:  186-block  8
call   24 never executed
branch 25 never executed
branch 26 never executed
      104:  186-block  9
call   27 returned 104
branch 28 taken 0 (fallthrough)
branch 29 taken 104
        -:  187:	  {
    #####:  188:	    if (__builtin_mul_overflow(__n, sizeof(_Tp), &__n))
    %%%%%:  188-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  188-block  1
branch  2 never executed
branch  3 never executed
    %%%%%:  188-block  2
branch  4 never executed
branch  5 never executed
    %%%%%:  188-block  3
branch  6 never executed
branch  7 never executed
    %%%%%:  188-block  4
branch  8 never executed
branch  9 never executed
    %%%%%:  188-block  5
branch 10 never executed
branch 11 never executed
    %%%%%:  188-block  6
branch 12 never executed
branch 13 never executed
    %%%%%:  188-block  7
branch 14 never executed
branch 15 never executed
    %%%%%:  188-block  8
branch 16 never executed
branch 17 never executed
    %%%%%:  188-block  9
branch 18 never executed
branch 19 never executed
    #####:  189:	      std::__throw_bad_array_new_length();
    %%%%%:  189-block  0
call    0 never executed
    %%%%%:  189-block  1
call    1 never executed
    %%%%%:  189-block  2
call    2 never executed
    %%%%%:  189-block  3
call    3 never executed
    %%%%%:  189-block  4
call    4 never executed
    %%%%%:  189-block  5
call    5 never executed
    %%%%%:  189-block  6
call    6 never executed
    %%%%%:  189-block  7
call    7 never executed
    %%%%%:  189-block  8
call    8 never executed
    %%%%%:  189-block  9
call    9 never executed
    #####:  190:	    return static_cast<_Tp*>(::operator new(__n));
    %%%%%:  190-block  0
call    0 never executed
    %%%%%:  190-block  1
call    1 never executed
    %%%%%:  190-block  2
call    2 never executed
    %%%%%:  190-block  3
call    3 never executed
    %%%%%:  190-block  4
call    4 never executed
    %%%%%:  190-block  5
call    5 never executed
    %%%%%:  190-block  6
call    6 never executed
    %%%%%:  190-block  7
call    7 never executed
    %%%%%:  190-block  8
call    8 never executed
    %%%%%:  190-block  9
call    9 never executed
        -:  191:	  }
        -:  192:
     122*:  193:	return __allocator_base<_Tp>::allocate(__n, 0);
    %%%%%:  193-block  0
call    0 never executed
    %%%%%:  193-block  1
call    1 never executed
    %%%%%:  193-block  2
call    2 never executed
       16:  193-block  3
call    3 returned 16
        2:  193-block  4
call    4 returned 2
    %%%%%:  193-block  5
call    5 never executed
    %%%%%:  193-block  6
call    6 never executed
    %%%%%:  193-block  7
call    7 never executed
    %%%%%:  193-block  8
call    8 never executed
      104:  193-block  9
call    9 returned 104
        -:  194:      }
        -:  195:
        -:  196:      [[__gnu__::__always_inline__]]
        -:  197:      constexpr void
        -:  198:      deallocate(_Tp* __p, size_t __n)
        -:  199:      {
     113*:  200:	if (std::__is_constant_evaluated())
    %%%%%:  200-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  200-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  200-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
       15:  200-block  3
call    9 returned 15
branch 10 taken 0 (fallthrough)
branch 11 taken 15
    %%%%%:  200-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
       98:  200-block  5
call   15 returned 98
branch 16 taken 0 (fallthrough)
branch 17 taken 98
    %%%%%:  200-block  6
call   18 never executed
branch 19 never executed
branch 20 never executed
    %%%%%:  200-block  7
call   21 never executed
branch 22 never executed
branch 23 never executed
    %%%%%:  200-block  8
call   24 never executed
branch 25 never executed
branch 26 never executed
    %%%%%:  200-block  9
call   27 never executed
branch 28 never executed
branch 29 never executed
        -:  201:	  {
    #####:  202:	    ::operator delete(__p);
    %%%%%:  202-block  0
call    0 never executed
    %%%%%:  202-block  1
call    1 never executed
    %%%%%:  202-block  2
call    2 never executed
    %%%%%:  202-block  3
call    3 never executed
    %%%%%:  202-block  4
call    4 never executed
    %%%%%:  202-block  5
call    5 never executed
    %%%%%:  202-block  6
call    6 never executed
    %%%%%:  202-block  7
call    7 never executed
    %%%%%:  202-block  8
call    8 never executed
    %%%%%:  202-block  9
call    9 never executed
    #####:  203:	    return;
        -:  204:	  }
     113*:  205:	__allocator_base<_Tp>::deallocate(__p, __n);
    %%%%%:  205-block  0
call    0 never executed
    %%%%%:  205-block  1
call    1 never executed
    %%%%%:  205-block  2
call    2 never executed
       15:  205-block  3
call    3 returned 15
    %%%%%:  205-block  4
call    4 never executed
       98:  205-block  5
call    5 returned 98
    %%%%%:  205-block  6
call    6 never executed
    %%%%%:  205-block  7
call    7 never executed
    %%%%%:  205-block  8
call    8 never executed
    %%%%%:  205-block  9
call    9 never executed
        -:  206:      }
        -:  207:#endif // C++20
        -:  208:
        -:  209:      friend _GLIBCXX20_CONSTEXPR bool
function _ZSteqRKSaIcES1_ called 0 returned 0% blocks executed 0%
    #####:  210:      operator==(const allocator&, const allocator&) _GLIBCXX_NOTHROW
    #####:  211:      { return true; }
    %%%%%:  211-block  0
        -:  212:
        -:  213:#if __cpp_impl_three_way_comparison < 201907L
        -:  214:      friend _GLIBCXX20_CONSTEXPR bool
        -:  215:      operator!=(const allocator&, const allocator&) _GLIBCXX_NOTHROW
        -:  216:      { return false; }
        -:  217:#endif
        -:  218:
        -:  219:      // Inherit everything else.
        -:  220:    };
        -:  221:
        -:  222:  /** Equality comparison for std::allocator objects
        -:  223:   *
        -:  224:   * @return true, for all std::allocator objects.
        -:  225:   * @relates std::allocator
        -:  226:   */
        -:  227:  template<typename _T1, typename _T2>
        -:  228:    inline _GLIBCXX20_CONSTEXPR bool
        -:  229:    operator==(const allocator<_T1>&, const allocator<_T2>&)
        -:  230:    _GLIBCXX_NOTHROW
        -:  231:    { return true; }
        -:  232:
        -:  233:#if __cpp_impl_three_way_comparison < 201907L
        -:  234:  template<typename _T1, typename _T2>
        -:  235:    inline _GLIBCXX20_CONSTEXPR bool
        -:  236:    operator!=(const allocator<_T1>&, const allocator<_T2>&)
        -:  237:    _GLIBCXX_NOTHROW
        -:  238:    { return false; }
        -:  239:#endif
        -:  240:
        -:  241:  /// @cond undocumented
        -:  242:
        -:  243:  // Invalid allocator<cv T> partial specializations.
        -:  244:  // allocator_traits::rebind_alloc can be used to form a valid allocator type.
        -:  245:  template<typename _Tp>
        -:  246:    class allocator<const _Tp>
        -:  247:    {
        -:  248:    public:
        -:  249:      typedef _Tp value_type;
        -:  250:      template<typename _Up> allocator(const allocator<_Up>&) { }
        -:  251:    };
        -:  252:
        -:  253:  template<typename _Tp>
        -:  254:    class allocator<volatile _Tp>
        -:  255:    {
        -:  256:    public:
        -:  257:      typedef _Tp value_type;
        -:  258:      template<typename _Up> allocator(const allocator<_Up>&) { }
        -:  259:    };
        -:  260:
        -:  261:  template<typename _Tp>
        -:  262:    class allocator<const volatile _Tp>
        -:  263:    {
        -:  264:    public:
        -:  265:      typedef _Tp value_type;
        -:  266:      template<typename _Up> allocator(const allocator<_Up>&) { }
        -:  267:    };
        -:  268:
        -:  269:  /// @} group allocator
        -:  270:
        -:  271:  // Inhibit implicit instantiations for required instantiations,
        -:  272:  // which are defined via explicit instantiations elsewhere.
        -:  273:#if _GLIBCXX_EXTERN_TEMPLATE
        -:  274:  extern template class allocator<char>;
        -:  275:  extern template class allocator<wchar_t>;
        -:  276:#endif
        -:  277:
        -:  278:  // Undefine.
        -:  279:#undef __allocator_base
        -:  280:
        -:  281:  // To implement Option 3 of DR 431.
        -:  282:  template<typename _Alloc, bool = __is_empty(_Alloc)>
        -:  283:    struct __alloc_swap
        -:  284:    { static void _S_do_it(_Alloc&, _Alloc&) _GLIBCXX_NOEXCEPT { } };
        -:  285:
        -:  286:  template<typename _Alloc>
        -:  287:    struct __alloc_swap<_Alloc, false>
        -:  288:    {
        -:  289:      static void
        -:  290:      _S_do_it(_Alloc& __one, _Alloc& __two) _GLIBCXX_NOEXCEPT
        -:  291:      {
        -:  292:	// Precondition: swappable allocators.
        -:  293:	if (__one != __two)
        -:  294:	  swap(__one, __two);
        -:  295:      }
        -:  296:    };
        -:  297:
        -:  298:  // Optimize for stateless allocators.
        -:  299:  template<typename _Alloc, bool = __is_empty(_Alloc)>
        -:  300:    struct __alloc_neq
        -:  301:    {
        -:  302:      static bool
        -:  303:      _S_do_it(const _Alloc&, const _Alloc&)
        -:  304:      { return false; }
        -:  305:    };
        -:  306:
        -:  307:  template<typename _Alloc>
        -:  308:    struct __alloc_neq<_Alloc, false>
        -:  309:    {
        -:  310:      static bool
        -:  311:      _S_do_it(const _Alloc& __one, const _Alloc& __two)
        -:  312:      { return __one != __two; }
        -:  313:    };
        -:  314:
        -:  315:#if __cplusplus >= 201103L
        -:  316:  template<typename _Tp, bool
        -:  317:    = __or_<is_copy_constructible<typename _Tp::value_type>,
        -:  318:            is_nothrow_move_constructible<typename _Tp::value_type>>::value>
        -:  319:    struct __shrink_to_fit_aux
        -:  320:    { static bool _S_do_it(_Tp&) noexcept { return false; } };
        -:  321:
        -:  322:  template<typename _Tp>
        -:  323:    struct __shrink_to_fit_aux<_Tp, true>
        -:  324:    {
        -:  325:      _GLIBCXX20_CONSTEXPR
        -:  326:      static bool
        -:  327:      _S_do_it(_Tp& __c) noexcept
        -:  328:      {
        -:  329:#if __cpp_exceptions
        -:  330:	try
        -:  331:	  {
        -:  332:	    _Tp(__make_move_if_noexcept_iterator(__c.begin()),
        -:  333:		__make_move_if_noexcept_iterator(__c.end()),
        -:  334:		__c.get_allocator()).swap(__c);
        -:  335:	    return true;
        -:  336:	  }
        -:  337:	catch(...)
        -:  338:	  { return false; }
        -:  339:#else
        -:  340:	return false;
        -:  341:#endif
        -:  342:      }
        -:  343:    };
        -:  344:#endif
        -:  345:  /// @endcond
        -:  346:
        -:  347:_GLIBCXX_END_NAMESPACE_VERSION
        -:  348:} // namespace std
        -:  349:
        -:  350:#endif
