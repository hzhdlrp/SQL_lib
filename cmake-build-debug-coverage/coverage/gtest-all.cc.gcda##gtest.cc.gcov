        -:    0:Source:/Users/vadimleonov/Desktop/плюсы/SQL_lib/lib/googletest/googletest/src/gtest.cc
        -:    0:Graph:/Users/vadimleonov/Desktop/плюсы/SQL_lib/cmake-build-debug-coverage/lib/googletest/googletest/CMakeFiles/gtest.dir/src/gtest-all.cc.gcno
        -:    0:Data:/Users/vadimleonov/Desktop/плюсы/SQL_lib/cmake-build-debug-coverage/lib/googletest/googletest/CMakeFiles/gtest.dir/src/gtest-all.cc.gcda
        -:    0:Runs:1
        -:    1:// Copyright 2005, Google Inc.
        -:    2:// All rights reserved.
        -:    3://
        -:    4:// Redistribution and use in source and binary forms, with or without
        -:    5:// modification, are permitted provided that the following conditions are
        -:    6:// met:
        -:    7://
        -:    8://     * Redistributions of source code must retain the above copyright
        -:    9:// notice, this list of conditions and the following disclaimer.
        -:   10://     * Redistributions in binary form must reproduce the above
        -:   11:// copyright notice, this list of conditions and the following disclaimer
        -:   12:// in the documentation and/or other materials provided with the
        -:   13:// distribution.
        -:   14://     * Neither the name of Google Inc. nor the names of its
        -:   15:// contributors may be used to endorse or promote products derived from
        -:   16:// this software without specific prior written permission.
        -:   17://
        -:   18:// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
        -:   19:// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
        -:   20:// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
        -:   21:// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
        -:   22:// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
        -:   23:// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
        -:   24:// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
        -:   25:// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
        -:   26:// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
        -:   27:// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
        -:   28:// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
        -:   29:
        -:   30://
        -:   31:// The Google C++ Testing and Mocking Framework (Google Test)
        -:   32:
        -:   33:#include "gtest/gtest.h"
        -:   34:
        -:   35:#include <ctype.h>
        -:   36:#include <stdarg.h>
        -:   37:#include <stdio.h>
        -:   38:#include <stdlib.h>
        -:   39:#include <time.h>
        -:   40:#include <wchar.h>
        -:   41:#include <wctype.h>
        -:   42:
        -:   43:#include <algorithm>
        -:   44:#include <chrono>  // NOLINT
        -:   45:#include <cmath>
        -:   46:#include <csignal>  // NOLINT: raise(3) is used on some platforms
        -:   47:#include <cstdint>
        -:   48:#include <cstdlib>
        -:   49:#include <cstring>
        -:   50:#include <initializer_list>
        -:   51:#include <iomanip>
        -:   52:#include <ios>
        -:   53:#include <iostream>
        -:   54:#include <iterator>
        -:   55:#include <limits>
        -:   56:#include <list>
        -:   57:#include <map>
        -:   58:#include <ostream>  // NOLINT
        -:   59:#include <set>
        -:   60:#include <sstream>
        -:   61:#include <unordered_set>
        -:   62:#include <utility>
        -:   63:#include <vector>
        -:   64:
        -:   65:#include "gtest/gtest-assertion-result.h"
        -:   66:#include "gtest/gtest-spi.h"
        -:   67:#include "gtest/internal/custom/gtest.h"
        -:   68:#include "gtest/internal/gtest-port.h"
        -:   69:
        -:   70:#ifdef GTEST_OS_LINUX
        -:   71:
        -:   72:#include <fcntl.h>   // NOLINT
        -:   73:#include <limits.h>  // NOLINT
        -:   74:#include <sched.h>   // NOLINT
        -:   75:// Declares vsnprintf().  This header is not available on Windows.
        -:   76:#include <strings.h>   // NOLINT
        -:   77:#include <sys/mman.h>  // NOLINT
        -:   78:#include <sys/time.h>  // NOLINT
        -:   79:#include <unistd.h>    // NOLINT
        -:   80:
        -:   81:#include <string>
        -:   82:
        -:   83:#elif defined(GTEST_OS_ZOS)
        -:   84:#include <sys/time.h>  // NOLINT
        -:   85:
        -:   86:// On z/OS we additionally need strings.h for strcasecmp.
        -:   87:#include <strings.h>   // NOLINT
        -:   88:
        -:   89:#elif defined(GTEST_OS_WINDOWS_MOBILE)  // We are on Windows CE.
        -:   90:
        -:   91:#include <windows.h>  // NOLINT
        -:   92:#undef min
        -:   93:
        -:   94:#elif defined(GTEST_OS_WINDOWS)  // We are on Windows proper.
        -:   95:
        -:   96:#include <windows.h>  // NOLINT
        -:   97:#undef min
        -:   98:
        -:   99:#ifdef _MSC_VER
        -:  100:#include <crtdbg.h>  // NOLINT
        -:  101:#endif
        -:  102:
        -:  103:#include <io.h>         // NOLINT
        -:  104:#include <sys/stat.h>   // NOLINT
        -:  105:#include <sys/timeb.h>  // NOLINT
        -:  106:#include <sys/types.h>  // NOLINT
        -:  107:
        -:  108:#ifdef GTEST_OS_WINDOWS_MINGW
        -:  109:#include <sys/time.h>  // NOLINT
        -:  110:#endif                 // GTEST_OS_WINDOWS_MINGW
        -:  111:
        -:  112:#else
        -:  113:
        -:  114:// cpplint thinks that the header is already included, so we want to
        -:  115:// silence it.
        -:  116:#include <sys/time.h>  // NOLINT
        -:  117:#include <unistd.h>    // NOLINT
        -:  118:
        -:  119:#endif  // GTEST_OS_LINUX
        -:  120:
        -:  121:#if GTEST_HAS_EXCEPTIONS
        -:  122:#include <stdexcept>
        -:  123:#endif
        -:  124:
        -:  125:#if GTEST_CAN_STREAM_RESULTS_
        -:  126:#include <arpa/inet.h>   // NOLINT
        -:  127:#include <netdb.h>       // NOLINT
        -:  128:#include <sys/socket.h>  // NOLINT
        -:  129:#include <sys/types.h>   // NOLINT
        -:  130:#endif
        -:  131:
        -:  132:#include "src/gtest-internal-inl.h"
        -:  133:
        -:  134:#ifdef GTEST_OS_WINDOWS
        -:  135:#define vsnprintf _vsnprintf
        -:  136:#endif  // GTEST_OS_WINDOWS
        -:  137:
        -:  138:#ifdef GTEST_OS_MAC
        -:  139:#ifndef GTEST_OS_IOS
        -:  140:#include <crt_externs.h>
        -:  141:#endif
        -:  142:#endif
        -:  143:
        -:  144:#ifdef GTEST_HAS_ABSL
        -:  145:#include "absl/container/flat_hash_set.h"
        -:  146:#include "absl/debugging/failure_signal_handler.h"
        -:  147:#include "absl/debugging/stacktrace.h"
        -:  148:#include "absl/debugging/symbolize.h"
        -:  149:#include "absl/flags/parse.h"
        -:  150:#include "absl/flags/usage.h"
        -:  151:#include "absl/strings/str_cat.h"
        -:  152:#include "absl/strings/str_replace.h"
        -:  153:#include "absl/strings/string_view.h"
        -:  154:#include "absl/strings/strip.h"
        -:  155:#endif  // GTEST_HAS_ABSL
        -:  156:
        -:  157:// Checks builtin compiler feature |x| while avoiding an extra layer of #ifdefs
        -:  158:// at the callsite.
        -:  159:#if defined(__has_builtin)
        -:  160:#define GTEST_HAS_BUILTIN(x) __has_builtin(x)
        -:  161:#else
        -:  162:#define GTEST_HAS_BUILTIN(x) 0
        -:  163:#endif  // defined(__has_builtin)
        -:  164:
        -:  165:#if defined(GTEST_HAS_ABSL) && !defined(GTEST_NO_ABSL_FLAGS)
        -:  166:#define GTEST_HAS_ABSL_FLAGS
        -:  167:#endif
        -:  168:
        -:  169:namespace testing {
        -:  170:
        -:  171:using internal::CountIf;
        -:  172:using internal::ForEach;
        -:  173:using internal::GetElementOr;
        -:  174:using internal::Shuffle;
        -:  175:
        -:  176:// Constants.
        -:  177:
        -:  178:// A test whose test suite name or test name matches this filter is
        -:  179:// disabled and not run.
        -:  180:static const char kDisableTestFilter[] = "DISABLED_*:*/DISABLED_*";
        -:  181:
        -:  182:// A test suite whose name matches this filter is considered a death
        -:  183:// test suite and will be run before test suites whose name doesn't
        -:  184:// match this filter.
        -:  185:static const char kDeathTestSuiteFilter[] = "*DeathTest:*DeathTest/*";
        -:  186:
        -:  187:// A test filter that matches everything.
        -:  188:static const char kUniversalFilter[] = "*";
        -:  189:
        -:  190:// The default output format.
        -:  191:static const char kDefaultOutputFormat[] = "xml";
        -:  192:// The default output file.
        -:  193:static const char kDefaultOutputFile[] = "test_detail";
        -:  194:
        -:  195:// The environment variable name for the test shard index.
        -:  196:static const char kTestShardIndex[] = "GTEST_SHARD_INDEX";
        -:  197:// The environment variable name for the total number of test shards.
        -:  198:static const char kTestTotalShards[] = "GTEST_TOTAL_SHARDS";
        -:  199:// The environment variable name for the test shard status file.
        -:  200:static const char kTestShardStatusFile[] = "GTEST_SHARD_STATUS_FILE";
        -:  201:
        -:  202:namespace internal {
        -:  203:
        -:  204:// The text used in failure messages to indicate the start of the
        -:  205:// stack trace.
        -:  206:const char kStackTraceMarker[] = "\nStack trace:\n";
        -:  207:
        -:  208:// g_help_flag is true if and only if the --help flag or an equivalent form
        -:  209:// is specified on the command line.
        -:  210:bool g_help_flag = false;
        -:  211:
        -:  212:#if GTEST_HAS_FILE_SYSTEM
        -:  213:// Utility function to Open File for Writing
function _ZN7testing8internalL18OpenFileForWritingERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:  214:static FILE* OpenFileForWriting(const std::string& output_file) {
    #####:  215:  FILE* fileout = nullptr;
    #####:  216:  FilePath output_file_path(output_file);
    %%%%%:  216-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  216-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  216-block  2
call    6 never executed
    $$$$$:  216-block  3
call    7 never executed
    $$$$$:  216-block  4
    #####:  217:  FilePath output_dir(output_file_path.RemoveFileName());
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  218:
    #####:  219:  if (output_dir.CreateDirectoriesRecursively()) {
    %%%%%:  219-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  219-block  1
branch  3 never executed
branch  4 never executed
    #####:  220:    fileout = posix::FOpen(output_file.c_str(), "w");
    %%%%%:  220-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  220-block  1
        -:  221:  }
    #####:  222:  if (fileout == nullptr) {
    %%%%%:  222-block  0
branch  0 never executed
branch  1 never executed
    #####:  223:    GTEST_LOG_(FATAL) << "Unable to open file \"" << output_file << "\"";
    %%%%%:  223-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  223-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  223-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:  223-block  3
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%:  223-block  4
call   13 never executed
    $$$$$:  223-block  5
call   14 never executed
    $$$$$:  223-block  6
        -:  224:  }
    #####:  225:  return fileout;
    %%%%%:  225-block  0
    #####:  226:}
    %%%%%:  226-block  0
call    0 never executed
call    1 never executed
    $$$$$:  226-block  1
call    2 never executed
    $$$$$:  226-block  2
call    3 never executed
        -:  227:#endif  // GTEST_HAS_FILE_SYSTEM
        -:  228:
        -:  229:}  // namespace internal
        -:  230:
        -:  231:// Bazel passes in the argument to '--test_filter' via the TESTBRIDGE_TEST_ONLY
        -:  232:// environment variable.
function _ZN7testingL16GetDefaultFilterEv called 1 returned 100% blocks executed 80%
        1:  233:static const char* GetDefaultFilter() {
        -:  234:  const char* const testbridge_test_only =
        1:  235:      internal::posix::GetEnv("TESTBRIDGE_TEST_ONLY");
        1:  235-block  0
call    0 returned 1
        1:  236:  if (testbridge_test_only != nullptr) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  237:    return testbridge_test_only;
    %%%%%:  237-block  0
        -:  238:  }
        1:  239:  return kUniversalFilter;
        1:  239-block  0
        -:  240:}
        -:  241:
        -:  242:// Bazel passes in the argument to '--test_runner_fail_fast' via the
        -:  243:// TESTBRIDGE_TEST_RUNNER_FAIL_FAST environment variable.
function _ZN7testingL18GetDefaultFailFastEv called 1 returned 100% blocks executed 80%
        1:  244:static bool GetDefaultFailFast() {
        -:  245:  const char* const testbridge_test_runner_fail_fast =
        1:  246:      internal::posix::GetEnv("TESTBRIDGE_TEST_RUNNER_FAIL_FAST");
        1:  246-block  0
call    0 returned 1
        1:  247:  if (testbridge_test_runner_fail_fast != nullptr) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  248:    return strcmp(testbridge_test_runner_fail_fast, "1") == 0;
    %%%%%:  248-block  0
        -:  249:  }
        1:  250:  return false;
        1:  250-block  0
        -:  251:}
        -:  252:
        -:  253:}  // namespace testing
        -:  254:
        -:  255:GTEST_DEFINE_bool_(
        -:  256:    fail_fast,
        -:  257:    testing::internal::BoolFromGTestEnv("fail_fast",
        -:  258:                                        testing::GetDefaultFailFast()),
        -:  259:    "True if and only if a test failure should stop further test execution.");
        -:  260:
        -:  261:GTEST_DEFINE_bool_(
        -:  262:    also_run_disabled_tests,
        -:  263:    testing::internal::BoolFromGTestEnv("also_run_disabled_tests", false),
        -:  264:    "Run disabled tests too, in addition to the tests normally being run.");
        -:  265:
        -:  266:GTEST_DEFINE_bool_(
        -:  267:    break_on_failure,
        -:  268:    testing::internal::BoolFromGTestEnv("break_on_failure", false),
        -:  269:    "True if and only if a failed assertion should be a debugger "
        -:  270:    "break-point.");
        -:  271:
        -:  272:GTEST_DEFINE_bool_(catch_exceptions,
        -:  273:                   testing::internal::BoolFromGTestEnv("catch_exceptions",
        -:  274:                                                       true),
        -:  275:                   "True if and only if " GTEST_NAME_
        -:  276:                   " should catch exceptions and treat them as test failures.");
        -:  277:
        -:  278:GTEST_DEFINE_string_(
        -:  279:    color, testing::internal::StringFromGTestEnv("color", "auto"),
        -:  280:    "Whether to use colors in the output.  Valid values: yes, no, "
        -:  281:    "and auto.  'auto' means to use colors if the output is "
        -:  282:    "being sent to a terminal and the TERM environment variable "
        -:  283:    "is set to a terminal type that supports colors.");
        -:  284:
        -:  285:GTEST_DEFINE_string_(
        -:  286:    filter,
        -:  287:    testing::internal::StringFromGTestEnv("filter",
        -:  288:                                          testing::GetDefaultFilter()),
        -:  289:    "A colon-separated list of glob (not regex) patterns "
        -:  290:    "for filtering the tests to run, optionally followed by a "
        -:  291:    "'-' and a : separated list of negative patterns (tests to "
        -:  292:    "exclude).  A test is run if it matches one of the positive "
        -:  293:    "patterns and does not match any of the negative patterns.");
        -:  294:
        -:  295:GTEST_DEFINE_bool_(
        -:  296:    install_failure_signal_handler,
        -:  297:    testing::internal::BoolFromGTestEnv("install_failure_signal_handler",
        -:  298:                                        false),
        -:  299:    "If true and supported on the current platform, " GTEST_NAME_
        -:  300:    " should "
        -:  301:    "install a signal handler that dumps debugging information when fatal "
        -:  302:    "signals are raised.");
        -:  303:
        -:  304:GTEST_DEFINE_bool_(list_tests, false, "List all tests without running them.");
        -:  305:
        -:  306:// The net priority order after flag processing is thus:
        -:  307://   --gtest_output command line flag
        -:  308://   GTEST_OUTPUT environment variable
        -:  309://   XML_OUTPUT_FILE environment variable
        -:  310://   ''
        -:  311:GTEST_DEFINE_string_(
        -:  312:    output,
        -:  313:    testing::internal::StringFromGTestEnv(
        -:  314:        "output", testing::internal::OutputFlagAlsoCheckEnvVar().c_str()),
        -:  315:    "A format (defaults to \"xml\" but can be specified to be \"json\"), "
        -:  316:    "optionally followed by a colon and an output file name or directory. "
        -:  317:    "A directory is indicated by a trailing pathname separator. "
        -:  318:    "Examples: \"xml:filename.xml\", \"xml::directoryname/\". "
        -:  319:    "If a directory is specified, output files will be created "
        -:  320:    "within that directory, with file-names based on the test "
        -:  321:    "executable's name and, if necessary, made unique by adding "
        -:  322:    "digits.");
        -:  323:
        -:  324:GTEST_DEFINE_bool_(
        -:  325:    brief, testing::internal::BoolFromGTestEnv("brief", false),
        -:  326:    "True if only test failures should be displayed in text output.");
        -:  327:
        -:  328:GTEST_DEFINE_bool_(print_time,
        -:  329:                   testing::internal::BoolFromGTestEnv("print_time", true),
        -:  330:                   "True if and only if " GTEST_NAME_
        -:  331:                   " should display elapsed time in text output.");
        -:  332:
        -:  333:GTEST_DEFINE_bool_(print_utf8,
        -:  334:                   testing::internal::BoolFromGTestEnv("print_utf8", true),
        -:  335:                   "True if and only if " GTEST_NAME_
        -:  336:                   " prints UTF8 characters as text.");
        -:  337:
        -:  338:GTEST_DEFINE_int32_(
        -:  339:    random_seed, testing::internal::Int32FromGTestEnv("random_seed", 0),
        -:  340:    "Random number seed to use when shuffling test orders.  Must be in range "
        -:  341:    "[1, 99999], or 0 to use a seed based on the current time.");
        -:  342:
        -:  343:GTEST_DEFINE_int32_(
        -:  344:    repeat, testing::internal::Int32FromGTestEnv("repeat", 1),
        -:  345:    "How many times to repeat each test.  Specify a negative number "
        -:  346:    "for repeating forever.  Useful for shaking out flaky tests.");
        -:  347:
        -:  348:GTEST_DEFINE_bool_(
        -:  349:    recreate_environments_when_repeating,
        -:  350:    testing::internal::BoolFromGTestEnv("recreate_environments_when_repeating",
        -:  351:                                        false),
        -:  352:    "Controls whether global test environments are recreated for each repeat "
        -:  353:    "of the tests. If set to false the global test environments are only set "
        -:  354:    "up once, for the first iteration, and only torn down once, for the last. "
        -:  355:    "Useful for shaking out flaky tests with stable, expensive test "
        -:  356:    "environments. If --gtest_repeat is set to a negative number, meaning "
        -:  357:    "there is no last run, the environments will always be recreated to avoid "
        -:  358:    "leaks.");
        -:  359:
        -:  360:GTEST_DEFINE_bool_(show_internal_stack_frames, false,
        -:  361:                   "True if and only if " GTEST_NAME_
        -:  362:                   " should include internal stack frames when "
        -:  363:                   "printing test failure stack traces.");
        -:  364:
        -:  365:GTEST_DEFINE_bool_(shuffle,
        -:  366:                   testing::internal::BoolFromGTestEnv("shuffle", false),
        -:  367:                   "True if and only if " GTEST_NAME_
        -:  368:                   " should randomize tests' order on every run.");
        -:  369:
        -:  370:GTEST_DEFINE_int32_(
        -:  371:    stack_trace_depth,
        -:  372:    testing::internal::Int32FromGTestEnv("stack_trace_depth",
        -:  373:                                         testing::kMaxStackTraceDepth),
        -:  374:    "The maximum number of stack frames to print when an "
        -:  375:    "assertion fails.  The valid range is 0 through 100, inclusive.");
        -:  376:
        -:  377:GTEST_DEFINE_string_(
        -:  378:    stream_result_to,
        -:  379:    testing::internal::StringFromGTestEnv("stream_result_to", ""),
        -:  380:    "This flag specifies the host name and the port number on which to stream "
        -:  381:    "test results. Example: \"localhost:555\". The flag is effective only on "
        -:  382:    "Linux and macOS.");
        -:  383:
        -:  384:GTEST_DEFINE_bool_(
        -:  385:    throw_on_failure,
        -:  386:    testing::internal::BoolFromGTestEnv("throw_on_failure", false),
        -:  387:    "When this flag is specified, a failed assertion will throw an exception "
        -:  388:    "if exceptions are enabled or exit the program with a non-zero code "
        -:  389:    "otherwise. For use with an external test framework.");
        -:  390:
        -:  391:#if GTEST_USE_OWN_FLAGFILE_FLAG_
        -:  392:GTEST_DEFINE_string_(
        -:  393:    flagfile, testing::internal::StringFromGTestEnv("flagfile", ""),
        -:  394:    "This flag specifies the flagfile to read command-line flags from.");
        -:  395:#endif  // GTEST_USE_OWN_FLAGFILE_FLAG_
        -:  396:
        -:  397:namespace testing {
        -:  398:namespace internal {
        -:  399:
        -:  400:const uint32_t Random::kMaxRange;
        -:  401:
        -:  402:// Generates a random number from [0, range), using a Linear
        -:  403:// Congruential Generator (LCG).  Crashes if 'range' is 0 or greater
        -:  404:// than kMaxRange.
function _ZN7testing8internal6Random8GenerateEj called 0 returned 0% blocks executed 0%
    #####:  405:uint32_t Random::Generate(uint32_t range) {
        -:  406:  // These constants are the same as are used in glibc's rand(3).
        -:  407:  // Use wider types than necessary to prevent unsigned overflow diagnostics.
    #####:  408:  state_ = static_cast<uint32_t>(1103515245ULL * state_ + 12345U) % kMaxRange;
        -:  409:
    #####:  410:  GTEST_CHECK_(range > 0) << "Cannot generate a number in the range [0, 0).";
    %%%%%:  410-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  410-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  410-block  2
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:  410-block  3
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%:  410-block  4
call   13 never executed
    $$$$$:  410-block  5
call   14 never executed
    $$$$$:  410-block  6
call   15 never executed
    #####:  411:  GTEST_CHECK_(range <= kMaxRange)
    %%%%%:  411-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  411-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  411-block  2
call    6 never executed
    %%%%%:  411-block  3
call    7 never executed
    $$$$$:  411-block  4
call    8 never executed
    #####:  412:      << "Generation of a number in [0, " << range << ") was requested, "
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  412-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  412-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####:  413:      << "but this can only generate numbers in [0, " << kMaxRange << ").";
    %%%%%:  413-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  413-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  413-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:  413-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
        -:  414:
        -:  415:  // Converting via modulus introduces a bit of downward bias, but
        -:  416:  // it's simple, and a linear congruential generator isn't too good
        -:  417:  // to begin with.
    #####:  418:  return state_ % range;
    %%%%%:  418-block  0
    %%%%%:  418-block  1
        -:  419:}
        -:  420:
        -:  421:// GTestIsInitialized() returns true if and only if the user has initialized
        -:  422:// Google Test.  Useful for catching the user mistake of not initializing
        -:  423:// Google Test before calling RUN_ALL_TESTS().
function _ZN7testing8internalL18GTestIsInitializedEv called 2 returned 100% blocks executed 100%
        2:  424:static bool GTestIsInitialized() { return !GetArgvs().empty(); }
        2:  424-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:  424-block  1
call    3 returned 2
call    4 returned 2
        2:  424-block  2
        -:  425:
        -:  426:// Iterates over a vector of TestSuites, keeping a running sum of the
        -:  427:// results of calling a given int-returning method on each.
        -:  428:// Returns the sum.
function _ZN7testing8internalL20SumOverTestSuiteListERKSt6vectorIPNS_9TestSuiteESaIS3_EEMS2_KFivE called 5 returned 100% blocks executed 91%
        5:  429:static int SumOverTestSuiteList(const std::vector<TestSuite*>& case_list,
        -:  430:                                int (TestSuite::*method)() const) {
        5:  431:  int sum = 0;
       10:  432:  for (size_t i = 0; i < case_list.size(); i++) {
        5:  432-block  0
       10:  432-block  1
call    0 returned 10
branch  1 taken 5
branch  2 taken 5 (fallthrough)
       5*:  433:    sum += (case_list[i]->*method)();
        5:  433-block  0
call    0 returned 5
branch  1 taken 5 (fallthrough)
branch  2 taken 0
        5:  433-block  1
    %%%%%:  433-block  2
        5:  433-block  3
call    3 returned 5
        -:  434:  }
        5:  435:  return sum;
        5:  435-block  0
        -:  436:}
        -:  437:
        -:  438:// Returns true if and only if the test suite passed.
function _ZN7testing8internalL15TestSuitePassedEPKNS_9TestSuiteE called 0 returned 0% blocks executed 0%
    #####:  439:static bool TestSuitePassed(const TestSuite* test_suite) {
    #####:  440:  return test_suite->should_run() && test_suite->Passed();
    %%%%%:  440-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  440-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  440-block  2
    %%%%%:  440-block  3
    %%%%%:  440-block  4
        -:  441:}
        -:  442:
        -:  443:// Returns true if and only if the test suite failed.
function _ZN7testing8internalL15TestSuiteFailedEPKNS_9TestSuiteE called 2 returned 100% blocks executed 62%
        2:  444:static bool TestSuiteFailed(const TestSuite* test_suite) {
       2*:  445:  return test_suite->should_run() && test_suite->Failed();
        2:  445-block  0
call    0 returned 2
branch  1 taken 0 (fallthrough)
branch  2 taken 2
    %%%%%:  445-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  445-block  2
        2:  445-block  3
        2:  445-block  4
        -:  446:}
        -:  447:
        -:  448:// Returns true if and only if test_suite contains at least one test that
        -:  449:// should run.
function _ZN7testing8internalL18ShouldRunTestSuiteEPKNS_9TestSuiteE called 2 returned 100% blocks executed 100%
        2:  450:static bool ShouldRunTestSuite(const TestSuite* test_suite) {
        2:  451:  return test_suite->should_run();
        2:  451-block  0
call    0 returned 2
        -:  452:}
        -:  453:
        -:  454:namespace {
        -:  455:
        -:  456:// Returns true if test part results of type `type` should include a stack
        -:  457:// trace.
function _ZN7testing8internal12_GLOBAL__N_133ShouldEmitStackTraceForResultTypeENS_14TestPartResult4TypeE called 0 returned 0% blocks executed 0%
    #####:  458:bool ShouldEmitStackTraceForResultType(TestPartResult::Type type) {
        -:  459:  // Suppress emission of the stack trace for SUCCEED() since it likely never
        -:  460:  // requires investigation, and GTEST_SKIP() since skipping is an intentional
        -:  461:  // act by the developer rather than a failure requiring investigation.
    #####:  462:  return type != TestPartResult::kSuccess && type != TestPartResult::kSkip;
    %%%%%:  462-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  462-block  1
branch  2 never executed
branch  3 never executed
    %%%%%:  462-block  2
    %%%%%:  462-block  3
    %%%%%:  462-block  4
        -:  463:}
        -:  464:
        -:  465:}  // namespace
        -:  466:
        -:  467:// AssertHelper constructor.
    #####:  468:AssertHelper::AssertHelper(TestPartResult::Type type, const char* file,
    #####:  469:                           int line, const char* message)
    #####:  470:    : data_(new AssertHelperData(type, file, line, message)) {}
------------------
_ZN7testing8internal12AssertHelperC1ENS_14TestPartResult4TypeEPKciS5_:
function _ZN7testing8internal12AssertHelperC1ENS_14TestPartResult4TypeEPKciS5_ called 0 returned 0% blocks executed 0%
    #####:  468:AssertHelper::AssertHelper(TestPartResult::Type type, const char* file,
    #####:  469:                           int line, const char* message)
    #####:  470:    : data_(new AssertHelperData(type, file, line, message)) {}
    %%%%%:  470-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  470-block  1
    $$$$$:  470-block  2
branch  4 never executed
branch  5 never executed
    $$$$$:  470-block  3
call    6 never executed
------------------
_ZN7testing8internal12AssertHelperC2ENS_14TestPartResult4TypeEPKciS5_:
function _ZN7testing8internal12AssertHelperC2ENS_14TestPartResult4TypeEPKciS5_ called 0 returned 0% blocks executed 0%
    #####:  468:AssertHelper::AssertHelper(TestPartResult::Type type, const char* file,
    #####:  469:                           int line, const char* message)
    #####:  470:    : data_(new AssertHelperData(type, file, line, message)) {}
    %%%%%:  470-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  470-block  1
    $$$$$:  470-block  2
branch  4 never executed
branch  5 never executed
    $$$$$:  470-block  3
call    6 never executed
------------------
        -:  471:
    #####:  472:AssertHelper::~AssertHelper() { delete data_; }
------------------
_ZN7testing8internal12AssertHelperD1Ev:
function _ZN7testing8internal12AssertHelperD1Ev called 0 returned 0% blocks executed 0%
    #####:  472:AssertHelper::~AssertHelper() { delete data_; }
    %%%%%:  472-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  472-block  1
call    2 never executed
call    3 never executed
------------------
_ZN7testing8internal12AssertHelperD2Ev:
function _ZN7testing8internal12AssertHelperD2Ev called 0 returned 0% blocks executed 0%
    #####:  472:AssertHelper::~AssertHelper() { delete data_; }
    %%%%%:  472-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  472-block  1
call    2 never executed
call    3 never executed
------------------
        -:  473:
        -:  474:// Message assignment, for assertion streaming support.
function _ZNK7testing8internal12AssertHelperaSERKNS_7MessageE called 0 returned 0% blocks executed 0%
    #####:  475:void AssertHelper::operator=(const Message& message) const {
    #####:  476:  UnitTest::GetInstance()->AddTestPartResult(
    %%%%%:  476-block  0
call    0 never executed
    %%%%%:  476-block  1
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  477:      data_->type, data_->file, data_->line,
    #####:  478:      AppendUserMessage(data_->message, message),
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$:  478-block  0
call    3 never executed
    #####:  479:      ShouldEmitStackTraceForResultType(data_->type)
    %%%%%:  479-block  0
call    0 never executed
    #####:  480:          ? UnitTest::GetInstance()->impl()->CurrentOsStackTraceExceptTop(1)
branch  0 never executed
branch  1 never executed
    %%%%%:  480-block  0
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:  480-block  1
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%:  480-block  2
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%:  480-block  3
call   15 never executed
    %%%%%:  480-block  4
call   16 never executed
    $$$$$:  480-block  5
call   17 never executed
    $$$$$:  480-block  6
branch 18 never executed
branch 19 never executed
    $$$$$:  480-block  7
call   20 never executed
    $$$$$:  480-block  8
    $$$$$:  480-block  9
    #####:  481:          : ""
    %%%%%:  481-block  0
call    0 never executed
        -:  482:      // Skips the stack frame for this function itself.
        -:  483:  );  // NOLINT
    #####:  484:}
        -:  485:
        -:  486:namespace {
        -:  487:
        -:  488:// When TEST_P is found without a matching INSTANTIATE_TEST_SUITE_P
        -:  489:// to creates test cases for it, a synthetic test case is
        -:  490:// inserted to report ether an error or a log message.
        -:  491://
        -:  492:// This configuration bit will likely be removed at some point.
        -:  493:constexpr bool kErrorOnUninstantiatedParameterizedTest = true;
        -:  494:constexpr bool kErrorOnUninstantiatedTypeParameterizedTest = true;
        -:  495:
        -:  496:// A test that fails at a given file/line location with a given message.
        -:  497:class FailureTest : public Test {
        -:  498: public:
function _ZN7testing8internal12_GLOBAL__N_111FailureTestC1ERKNS0_12CodeLocationENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb called 0 returned 0% blocks executed 0%
    #####:  499:  explicit FailureTest(const CodeLocation& loc, std::string error_message,
        -:  500:                       bool as_error)
    #####:  501:      : loc_(loc),
    #####:  502:        error_message_(std::move(error_message)),
    %%%%%:  502-block  0
call    0 never executed
call    1 never executed
    #####:  503:        as_error_(as_error) {}
    %%%%%:  503-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$:  503-block  1
call    4 never executed
        -:  504:
function _ZN7testing8internal12_GLOBAL__N_111FailureTest8TestBodyEv called 0 returned 0% blocks executed 0%
    #####:  505:  void TestBody() override {
    #####:  506:    if (as_error_) {
    %%%%%:  506-block  0
branch  0 never executed
branch  1 never executed
    #####:  507:      AssertHelper(TestPartResult::kNonFatalFailure, loc_.file.c_str(),
    %%%%%:  507-block  0
call    0 never executed
    $$$$$:  507-block  1
call    1 never executed
    $$$$$:  507-block  2
    #####:  508:                   loc_.line, "") = Message() << error_message_;
    %%%%%:  508-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  508-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  508-block  2
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:  508-block  3
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
    $$$$$:  508-block  4
call   14 never executed
        -:  509:    } else {
    #####:  510:      std::cout << error_message_ << std::endl;
    %%%%%:  510-block  0
call    0 never executed
call    1 never executed
        -:  511:    }
    #####:  512:  }
    %%%%%:  512-block  0
        -:  513:
        -:  514: private:
        -:  515:  const CodeLocation loc_;
        -:  516:  const std::string error_message_;
        -:  517:  const bool as_error_;
        -:  518:};
        -:  519:
        -:  520:}  // namespace
        -:  521:
function _ZN7testing8internal33GetIgnoredParameterizedTestSuitesB5cxx11Ev called 1 returned 100% blocks executed 100%
        1:  522:std::set<std::string>* GetIgnoredParameterizedTestSuites() {
        1:  523:  return UnitTest::GetInstance()->impl()->ignored_parameterized_test_suites();
        1:  523-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
        -:  524:}
        -:  525:
        -:  526:// Add a given test_suit to the list of them allow to go un-instantiated.
    #####:  527:MarkAsIgnored::MarkAsIgnored(const char* test_suite) {
    #####:  528:  GetIgnoredParameterizedTestSuites()->insert(test_suite);
    #####:  529:}
------------------
_ZN7testing8internal13MarkAsIgnoredC1EPKc:
function _ZN7testing8internal13MarkAsIgnoredC1EPKc called 0 returned 0% blocks executed 0%
    #####:  527:MarkAsIgnored::MarkAsIgnored(const char* test_suite) {
    #####:  528:  GetIgnoredParameterizedTestSuites()->insert(test_suite);
    %%%%%:  528-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:  528-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:  528-block  2
call    8 never executed
call    9 never executed
    $$$$$:  528-block  3
call   10 never executed
    $$$$$:  528-block  4
call   11 never executed
    $$$$$:  528-block  5
    #####:  529:}
------------------
_ZN7testing8internal13MarkAsIgnoredC2EPKc:
function _ZN7testing8internal13MarkAsIgnoredC2EPKc called 0 returned 0% blocks executed 0%
    #####:  527:MarkAsIgnored::MarkAsIgnored(const char* test_suite) {
    #####:  528:  GetIgnoredParameterizedTestSuites()->insert(test_suite);
    %%%%%:  528-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:  528-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:  528-block  2
call    8 never executed
call    9 never executed
    $$$$$:  528-block  3
call   10 never executed
    $$$$$:  528-block  4
call   11 never executed
    $$$$$:  528-block  5
    #####:  529:}
------------------
        -:  530:
        -:  531:// If this parameterized test suite has no instantiations (and that
        -:  532:// has not been marked as okay), emit a test case reporting that.
function _ZN7testing8internal23InsertSyntheticTestCaseERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS0_12CodeLocationEb called 0 returned 0% blocks executed 0%
    #####:  533:void InsertSyntheticTestCase(const std::string& name, CodeLocation location,
        -:  534:                             bool has_test_p) {
    #####:  535:  const auto& ignored = *GetIgnoredParameterizedTestSuites();
    %%%%%:  535-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  536:  if (ignored.find(name) != ignored.end()) return;
    %%%%%:  536-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  536-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  536-block  2
    $$$$$:  536-block  3
        -:  537:
    #####:  538:  const char kMissingInstantiation[] =  //
        -:  539:      " is defined via TEST_P, but never instantiated. None of the test "
        -:  540:      "cases "
        -:  541:      "will run. Either no INSTANTIATE_TEST_SUITE_P is provided or the only "
        -:  542:      "ones provided expand to nothing."
        -:  543:      "\n\n"
        -:  544:      "Ideally, TEST_P definitions should only ever be included as part of "
        -:  545:      "binaries that intend to use them. (As opposed to, for example, being "
        -:  546:      "placed in a library that may be linked in to get other utilities.)";
        -:  547:
    #####:  548:  const char kMissingTestCase[] =  //
        -:  549:      " is instantiated via INSTANTIATE_TEST_SUITE_P, but no tests are "
        -:  550:      "defined via TEST_P . No test cases will run."
        -:  551:      "\n\n"
        -:  552:      "Ideally, INSTANTIATE_TEST_SUITE_P should only ever be invoked from "
        -:  553:      "code that always depend on code that provides TEST_P. Failing to do "
        -:  554:      "so is often an indication of dead code, e.g. the last TEST_P was "
        -:  555:      "removed but the rest got left behind.";
        -:  556:
        -:  557:  std::string message =
    #####:  558:      "Parameterized test suite " + name +
    %%%%%:  558-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  558-block  1
branch  3 never executed
branch  4 never executed
    %%%%%:  558-block  2
    %%%%%:  558-block  3
    %%%%%:  558-block  4
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
    $$$$$:  558-block  5
call   10 never executed
    $$$$$:  558-block  6
call   11 never executed
    $$$$$:  558-block  7
    $$$$$:  558-block  8
    #####:  559:      (has_test_p ? kMissingInstantiation : kMissingTestCase) +
    %%%%%:  559-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$:  559-block  1
call    4 never executed
    $$$$$:  559-block  2
        -:  560:      "\n\n"
        -:  561:      "To suppress this error for this test suite, insert the following line "
        -:  562:      "(in a non-header) in the namespace it is defined in:"
        -:  563:      "\n\n"
    #####:  564:      "GTEST_ALLOW_UNINSTANTIATED_PARAMETERIZED_TEST(" +
    %%%%%:  564-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  564-block  1
call    3 never executed
    $$$$$:  564-block  2
call    4 never executed
    $$$$$:  564-block  3
    #####:  565:      name + ");";
    %%%%%:  565-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  566:
    #####:  567:  std::string full_name = "UninstantiatedParameterizedTestSuite<" + name + ">";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  567-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  567-block  1
call    6 never executed
    $$$$$:  567-block  2
call    7 never executed
    $$$$$:  567-block  3
    #####:  568:  RegisterTest(  //
call    0 never executed
call    1 never executed
        -:  569:      "GoogleTestVerification", full_name.c_str(),
        -:  570:      nullptr,  // No type parameter.
        -:  571:      nullptr,  // No value parameter.
function _ZZN7testing8internal23InsertSyntheticTestCaseERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS0_12CodeLocationEbENKUlvE_clEv called 0 returned 0% blocks executed 0%
    #####:  572:      location.file.c_str(), location.line, [message, location] {
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  572-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  572-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:  572-block  2
call    9 never executed
    $$$$$:  572-block  3
call   10 never executed
    $$$$$:  572-block  4
branch 11 never executed
branch 12 never executed
    $$$$$:  572-block  5
call   13 never executed
    $$$$$:  572-block  6
    #####:  573:        return new FailureTest(location, message,
    #####:  574:                               kErrorOnUninstantiatedParameterizedTest);
    %%%%%:  574-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  574-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  574-block  2
call    7 never executed
    %%%%%:  574-block  3
    $$$$$:  574-block  4
call    8 never executed
    $$$$$:  574-block  5
    $$$$$:  574-block  6
branch  9 never executed
branch 10 never executed
    $$$$$:  574-block  7
call   11 never executed
        -:  575:      });
    #####:  576:}
call    0 never executed
call    1 never executed
    $$$$$:  576-block  0
call    2 never executed
    $$$$$:  576-block  1
call    3 never executed
        -:  577:
function _ZN7testing8internal34RegisterTypeParameterizedTestSuiteEPKcNS0_12CodeLocationE called 0 returned 0% blocks executed 0%
    #####:  578:void RegisterTypeParameterizedTestSuite(const char* test_suite_name,
        -:  579:                                        CodeLocation code_location) {
    #####:  580:  GetUnitTestImpl()->type_parameterized_test_registry().RegisterTestSuite(
    %%%%%:  580-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  580-block  1
call    6 never executed
    $$$$$:  580-block  2
call    7 never executed
    #####:  581:      test_suite_name, std::move(code_location));
call    0 never executed
    #####:  582:}
        -:  583:
function _ZN7testing8internal47RegisterTypeParameterizedTestSuiteInstantiationEPKc called 0 returned 0% blocks executed 0%
    #####:  584:void RegisterTypeParameterizedTestSuiteInstantiation(const char* case_name) {
    #####:  585:  GetUnitTestImpl()->type_parameterized_test_registry().RegisterInstantiation(
    %%%%%:  585-block  0
call    0 never executed
call    1 never executed
call    2 never executed
        -:  586:      case_name);
    #####:  587:}
        -:  588:
function _ZN7testing8internal34TypeParameterizedTestSuiteRegistry17RegisterTestSuiteEPKcNS0_12CodeLocationE called 0 returned 0% blocks executed 0%
    #####:  589:void TypeParameterizedTestSuiteRegistry::RegisterTestSuite(
        -:  590:    const char* test_suite_name, CodeLocation code_location) {
    #####:  591:  suites_.emplace(std::string(test_suite_name),
    %%%%%:  591-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
    $$$$$:  591-block  1
call    8 never executed
    $$$$$:  591-block  2
call    9 never executed
    $$$$$:  591-block  3
    #####:  592:                  TypeParameterizedTestSuiteInfo(std::move(code_location)));
    %%%%%:  592-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    %%%%%:  592-block  1
call    3 never executed
call    4 never executed
call    5 never executed
    $$$$$:  592-block  2
call    6 never executed
    $$$$$:  592-block  3
call    7 never executed
    $$$$$:  592-block  4
    $$$$$:  592-block  5
    #####:  593:}
        -:  594:
function _ZN7testing8internal34TypeParameterizedTestSuiteRegistry21RegisterInstantiationEPKc called 0 returned 0% blocks executed 0%
    #####:  595:void TypeParameterizedTestSuiteRegistry::RegisterInstantiation(
        -:  596:    const char* test_suite_name) {
    #####:  597:  auto it = suites_.find(std::string(test_suite_name));
    %%%%%:  597-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  597-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  597-block  2
call    7 never executed
call    8 never executed
    $$$$$:  597-block  3
call    9 never executed
    $$$$$:  597-block  4
call   10 never executed
    $$$$$:  597-block  5
    $$$$$:  597-block  6
    #####:  598:  if (it != suites_.end()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  599:    it->second.instantiated = true;
    %%%%%:  599-block  0
call    0 never executed
        -:  600:  } else {
    #####:  601:    GTEST_LOG_(ERROR) << "Unknown type parameterized test suit '"
    %%%%%:  601-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  601-block  1
call    3 never executed
    %%%%%:  601-block  2
call    4 never executed
    $$$$$:  601-block  3
call    5 never executed
    $$$$$:  601-block  4
    #####:  602:                      << test_suite_name << "'";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  602-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  602-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
        -:  603:  }
    #####:  604:}
    %%%%%:  604-block  0
        -:  605:
function _ZN7testing8internal34TypeParameterizedTestSuiteRegistry22CheckForInstantiationsEv called 1 returned 100% blocks executed 12%
        1:  606:void TypeParameterizedTestSuiteRegistry::CheckForInstantiations() {
        1:  607:  const auto& ignored = *GetIgnoredParameterizedTestSuites();
        1:  607-block  0
call    0 returned 1
       1*:  608:  for (const auto& testcase : suites_) {
call    0 returned 1
call    1 returned 1
    %%%%%:  608-block  0
call    2 never executed
    %%%%%:  608-block  1
call    3 never executed
        1:  608-block  2
call    4 returned 1
branch  5 taken 0
branch  6 taken 1 (fallthrough)
    #####:  609:    if (testcase.second.instantiated) continue;
branch  0 never executed
branch  1 never executed
    %%%%%:  609-block  0
    %%%%%:  609-block  1
    #####:  610:    if (ignored.find(testcase.first) != ignored.end()) continue;
    %%%%%:  610-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  610-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  610-block  2
    $$$$$:  610-block  3
        -:  611:
        -:  612:    std::string message =
    #####:  613:        "Type parameterized test suite " + testcase.first +
    %%%%%:  613-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  613-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
    $$$$$:  613-block  2
call    8 never executed
    $$$$$:  613-block  3
call    9 never executed
    $$$$$:  613-block  4
    $$$$$:  613-block  5
        -:  614:        " is defined via REGISTER_TYPED_TEST_SUITE_P, but never instantiated "
        -:  615:        "via INSTANTIATE_TYPED_TEST_SUITE_P. None of the test cases will run."
        -:  616:        "\n\n"
        -:  617:        "Ideally, TYPED_TEST_P definitions should only ever be included as "
        -:  618:        "part of binaries that intend to use them. (As opposed to, for "
        -:  619:        "example, being placed in a library that may be linked in to get "
        -:  620:        "other "
        -:  621:        "utilities.)"
        -:  622:        "\n\n"
        -:  623:        "To suppress this error for this test suite, insert the following "
        -:  624:        "line "
        -:  625:        "(in a non-header) in the namespace it is defined in:"
        -:  626:        "\n\n"
    #####:  627:        "GTEST_ALLOW_UNINSTANTIATED_PARAMETERIZED_TEST(" +
    %%%%%:  627-block  0
call    0 never executed
    $$$$$:  627-block  1
call    1 never executed
    $$$$$:  627-block  2
    #####:  628:        testcase.first + ");";
    %%%%%:  628-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  628-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:  629:
        -:  630:    std::string full_name =
    #####:  631:        "UninstantiatedTypeParameterizedTestSuite<" + testcase.first + ">";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  631-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  631-block  1
call    6 never executed
    $$$$$:  631-block  2
call    7 never executed
    $$$$$:  631-block  3
    #####:  632:    RegisterTest(  //
call    0 never executed
call    1 never executed
        -:  633:        "GoogleTestVerification", full_name.c_str(),
        -:  634:        nullptr,  // No type parameter.
        -:  635:        nullptr,  // No value parameter.
        -:  636:        testcase.second.code_location.file.c_str(),
function _ZZN7testing8internal34TypeParameterizedTestSuiteRegistry22CheckForInstantiationsEvENKUlvE_clEv called 0 returned 0% blocks executed 0%
    #####:  637:        testcase.second.code_location.line, [message, testcase] {
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  637-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  637-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:  637-block  2
call    9 never executed
    $$$$$:  637-block  3
call   10 never executed
    $$$$$:  637-block  4
branch 11 never executed
branch 12 never executed
    $$$$$:  637-block  5
call   13 never executed
    $$$$$:  637-block  6
    #####:  638:          return new FailureTest(testcase.second.code_location, message,
    #####:  639:                                 kErrorOnUninstantiatedTypeParameterizedTest);
    %%%%%:  639-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  639-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  639-block  2
call    7 never executed
    %%%%%:  639-block  3
    $$$$$:  639-block  4
call    8 never executed
    $$$$$:  639-block  5
    $$$$$:  639-block  6
branch  9 never executed
branch 10 never executed
    $$$$$:  639-block  7
call   11 never executed
        -:  640:        });
    #####:  641:  }
call    0 never executed
call    1 never executed
    $$$$$:  641-block  0
call    2 never executed
    $$$$$:  641-block  1
call    3 never executed
        1:  642:}
        1:  642-block  0
        -:  643:
        -:  644:// A copy of all command line arguments.  Set by InitGoogleTest().
        -:  645:static ::std::vector<std::string> g_argvs;
        -:  646:
function _ZN7testing8internal8GetArgvsB5cxx11Ev called 2 returned 100% blocks executed 100%
        2:  647:::std::vector<std::string> GetArgvs() {
        -:  648:#if defined(GTEST_CUSTOM_GET_ARGVS_)
        -:  649:  // GTEST_CUSTOM_GET_ARGVS_() may return a container of std::string or
        -:  650:  // ::string. This code converts it to the appropriate type.
        -:  651:  const auto& custom = GTEST_CUSTOM_GET_ARGVS_();
        -:  652:  return ::std::vector<std::string>(custom.begin(), custom.end());
        -:  653:#else   // defined(GTEST_CUSTOM_GET_ARGVS_)
        2:  654:  return g_argvs;
        2:  654-block  0
call    0 returned 2
        -:  655:#endif  // defined(GTEST_CUSTOM_GET_ARGVS_)
        -:  656:}
        -:  657:
        -:  658:#if GTEST_HAS_FILE_SYSTEM
        -:  659:// Returns the current application's name, removing directory path if that
        -:  660:// is present.
function _ZN7testing8internal24GetCurrentExecutableNameEv called 0 returned 0% blocks executed 0%
    #####:  661:FilePath GetCurrentExecutableName() {
    #####:  662:  FilePath result;
    %%%%%:  662-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  663:
    #####:  664:  auto args = GetArgvs();
    %%%%%:  664-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  665:  if (!args.empty()) {
    %%%%%:  665-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  666:#if defined(GTEST_OS_WINDOWS) || defined(GTEST_OS_OS2)
        -:  667:    result.Set(FilePath(args[0]).RemoveExtension("exe"));
        -:  668:#else
    #####:  669:    result.Set(FilePath(args[0]));
    %%%%%:  669-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  669-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  669-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:  669-block  3
call   10 never executed
call   11 never executed
    $$$$$:  669-block  4
call   12 never executed
    $$$$$:  669-block  5
call   13 never executed
    $$$$$:  669-block  6
    $$$$$:  669-block  7
        -:  670:#endif  // GTEST_OS_WINDOWS
        -:  671:  }
        -:  672:
    #####:  673:  return result.RemoveDirectoryName();
    %%%%%:  673-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  673-block  1
    #####:  674:}
    %%%%%:  674-block  0
call    0 never executed
call    1 never executed
    $$$$$:  674-block  1
call    2 never executed
    $$$$$:  674-block  2
call    3 never executed
        -:  675:#endif  // GTEST_HAS_FILE_SYSTEM
        -:  676:
        -:  677:// Functions for processing the gtest_output flag.
        -:  678:
        -:  679:// Returns the output format, or "" for normal printed output.
function _ZN7testing8internal15UnitTestOptions15GetOutputFormatB5cxx11Ev called 1 returned 100% blocks executed 48%
        1:  680:std::string UnitTestOptions::GetOutputFormat() {
        1:  681:  std::string s = GTEST_FLAG_GET(output);
        1:  681-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  682:  const char* const gtest_output_flag = s.c_str();
        1:  682-block  0
call    0 returned 1
        1:  683:  const char* const colon = strchr(gtest_output_flag, ':');
        -:  684:  return (colon == nullptr)
        1:  685:             ? std::string(gtest_output_flag)
        1:  685-block  0
call    0 returned 1
        -:  686:             : std::string(gtest_output_flag,
       3*:  687:                           static_cast<size_t>(colon - gtest_output_flag));
branch  0 taken 1 (fallthrough)
branch  1 taken 0
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
    %%%%%:  687-block  0
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
        1:  687-block  1
branch  9 taken 0 (fallthrough)
branch 10 taken 1
    %%%%%:  687-block  2
call   11 never executed
        1:  687-block  3
branch 12 taken 1 (fallthrough)
branch 13 taken 0
        1:  687-block  4
call   14 returned 1
        1:  687-block  5
    $$$$$:  687-block  6
branch 15 never executed
branch 16 never executed
    $$$$$:  687-block  7
call   17 never executed
    $$$$$:  687-block  8
    $$$$$:  687-block  9
branch 18 never executed
branch 19 never executed
    $$$$$:  687-block 10
call   20 never executed
    $$$$$:  687-block 11
        1:  688:}
        1:  688-block  0
call    0 returned 1
    $$$$$:  688-block  1
call    1 never executed
        -:  689:
        -:  690:#if GTEST_HAS_FILE_SYSTEM
        -:  691:// Returns the name of the requested output file, or the default if none
        -:  692:// was explicitly specified.
function _ZN7testing8internal15UnitTestOptions27GetAbsolutePathToOutputFileB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####:  693:std::string UnitTestOptions::GetAbsolutePathToOutputFile() {
    #####:  694:  std::string s = GTEST_FLAG_GET(output);
    %%%%%:  694-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  695:  const char* const gtest_output_flag = s.c_str();
    %%%%%:  695-block  0
call    0 never executed
        -:  696:
    #####:  697:  std::string format = GetOutputFormat();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  698:  if (format.empty()) format = std::string(kDefaultOutputFormat);
    %%%%%:  698-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  698-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  698-block  2
call    7 never executed
call    8 never executed
call    9 never executed
    $$$$$:  698-block  3
call   10 never executed
    $$$$$:  698-block  4
    $$$$$:  698-block  5
        -:  699:
    #####:  700:  const char* const colon = strchr(gtest_output_flag, ':');
    #####:  701:  if (colon == nullptr)
    %%%%%:  701-block  0
branch  0 never executed
branch  1 never executed
    #####:  702:    return internal::FilePath::MakeFileName(
    %%%%%:  702-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  702-block  1
call    4 never executed
    $$$$$:  702-block  2
call    5 never executed
    $$$$$:  702-block  3
    #####:  703:               internal::FilePath(
    %%%%%:  703-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  703-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  703-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
    $$$$$:  703-block  3
call   12 never executed
    $$$$$:  703-block  4
call   13 never executed
    $$$$$:  703-block  5
call   14 never executed
    $$$$$:  703-block  6
    $$$$$:  703-block  7
    $$$$$:  703-block  8
    #####:  704:                   UnitTest::GetInstance()->original_working_dir()),
call    0 never executed
    #####:  705:               internal::FilePath(kDefaultOutputFile), 0, format.c_str())
    %%%%%:  705-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  705-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    $$$$$:  705-block  2
call   11 never executed
    $$$$$:  705-block  3
call   12 never executed
    $$$$$:  705-block  4
call   13 never executed
    $$$$$:  705-block  5
    $$$$$:  705-block  6
    $$$$$:  705-block  7
    #####:  706:        .string();
    %%%%%:  706-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  707:
    #####:  708:  internal::FilePath output_name(colon + 1);
    %%%%%:  708-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  708-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  708-block  2
call    7 never executed
call    8 never executed
    $$$$$:  708-block  3
call    9 never executed
    $$$$$:  708-block  4
call   10 never executed
    $$$$$:  708-block  5
    $$$$$:  708-block  6
    #####:  709:  if (!output_name.IsAbsolutePath())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  710:    output_name = internal::FilePath::ConcatPaths(
    %%%%%:  710-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$:  710-block  1
    #####:  711:        internal::FilePath(UnitTest::GetInstance()->original_working_dir()),
    %%%%%:  711-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  711-block  1
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:  711-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
    $$$$$:  711-block  3
call   13 never executed
    $$$$$:  711-block  4
call   14 never executed
    $$$$$:  711-block  5
call   15 never executed
    $$$$$:  711-block  6
    $$$$$:  711-block  7
    $$$$$:  711-block  8
    #####:  712:        internal::FilePath(colon + 1));
    %%%%%:  712-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  712-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  712-block  2
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$:  712-block  3
call   12 never executed
    $$$$$:  712-block  4
call   13 never executed
    $$$$$:  712-block  5
call   14 never executed
    $$$$$:  712-block  6
    $$$$$:  712-block  7
    $$$$$:  712-block  8
        -:  713:
    #####:  714:  if (!output_name.IsDirectory()) return output_name.string();
    %%%%%:  714-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  714-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
        -:  715:
        -:  716:  internal::FilePath result(internal::FilePath::GenerateUniqueFileName(
    #####:  717:      output_name, internal::GetCurrentExecutableName(),
    %%%%%:  717-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$:  717-block  1
call    3 never executed
    $$$$$:  717-block  2
    #####:  718:      GetOutputFormat().c_str()));
    %%%%%:  718-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  718-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  718-block  2
call    7 never executed
call    8 never executed
    $$$$$:  718-block  3
call    9 never executed
    $$$$$:  718-block  4
    #####:  719:  return result.string();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  720:}
    %%%%%:  720-block  0
call    0 never executed
    %%%%%:  720-block  1
call    1 never executed
    %%%%%:  720-block  2
call    2 never executed
call    3 never executed
    $$$$$:  720-block  3
call    4 never executed
    $$$$$:  720-block  4
call    5 never executed
    $$$$$:  720-block  5
call    6 never executed
    $$$$$:  720-block  6
call    7 never executed
        -:  721:#endif  // GTEST_HAS_FILE_SYSTEM
        -:  722:
        -:  723:// Returns true if and only if the wildcard pattern matches the string. Each
        -:  724:// pattern consists of regular characters, single-character wildcards (?), and
        -:  725:// multi-character wildcards (*).
        -:  726://
        -:  727:// This function implements a linear-time string globbing algorithm based on
        -:  728:// https://research.swtch.com/glob.
function _ZN7testing8internalL20PatternMatchesStringERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKcSA_ called 11 returned 100% blocks executed 78%
       11:  729:static bool PatternMatchesString(const std::string& name_str,
        -:  730:                                 const char* pattern, const char* pattern_end) {
       11:  731:  const char* name = name_str.c_str();
       11:  731-block  0
call    0 returned 11
       11:  732:  const char* const name_begin = name;
       11:  733:  const char* const name_end = name + name_str.size();
call    0 returned 11
        -:  734:
       11:  735:  const char* pattern_next = pattern;
       11:  736:  const char* name_next = name;
        -:  737:
     164*:  738:  while (pattern < pattern_end || name < name_end) {
      164:  738-block  0
branch  0 taken 164
branch  1 taken 0 (fallthrough)
    %%%%%:  738-block  1
branch  2 never executed
branch  3 never executed
      164:  739:    if (pattern < pattern_end) {
      164:  739-block  0
branch  0 taken 164 (fallthrough)
branch  1 taken 0
      164:  740:      switch (*pattern) {
      164:  740-block  0
branch  0 taken 92
branch  1 taken 0
branch  2 taken 72
       92:  741:        default:  // Match an ordinary character.
       92:  742:          if (name < name_end && *name == *pattern) {
       92:  742-block  0
branch  0 taken 86 (fallthrough)
branch  1 taken 6
       86:  742-block  1
branch  2 taken 15 (fallthrough)
branch  3 taken 71
       15:  743:            ++pattern;
       15:  744:            ++name;
       15:  745:            continue;
       15:  745-block  0
        -:  746:          }
       77:  747:          break;
       77:  747-block  0
    #####:  748:        case '?':  // Match any single character.
    #####:  749:          if (name < name_end) {
    %%%%%:  749-block  0
branch  0 never executed
branch  1 never executed
    #####:  750:            ++pattern;
    #####:  751:            ++name;
    #####:  752:            continue;
    %%%%%:  752-block  0
        -:  753:          }
    #####:  754:          break;
    %%%%%:  754-block  0
       72:  755:        case '*':
        -:  756:          // Match zero or more characters. Start by skipping over the wildcard
        -:  757:          // and matching zero characters from name. If that fails, restart and
        -:  758:          // match one more character than the last attempt.
       72:  759:          pattern_next = pattern;
       72:  760:          name_next = name + 1;
       72:  761:          ++pattern;
       72:  762:          continue;
       72:  762-block  0
        -:  763:      }
        -:  764:    }
        -:  765:    // Failed to match a character. Restart if possible.
       77:  766:    if (name_begin < name_next && name_next <= name_end) {
       77:  766-block  0
branch  0 taken 72 (fallthrough)
branch  1 taken 5
       72:  766-block  1
branch  2 taken 66 (fallthrough)
branch  3 taken 6
       66:  767:      pattern = pattern_next;
       66:  768:      name = name_next;
       66:  769:      continue;
       66:  769-block  0
        -:  770:    }
       11:  771:    return false;
       11:  771-block  0
        -:  772:  }
    #####:  773:  return true;
    %%%%%:  773-block  0
        -:  774:}
        -:  775:
        -:  776:namespace {
        -:  777:
function _ZN7testing8internal12_GLOBAL__N_113IsGlobPatternERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 9 returned 100% blocks executed 100%
        9:  778:bool IsGlobPattern(const std::string& pattern) {
        9:  779:  return std::any_of(pattern.begin(), pattern.end(),
        9:  779-block  0
call    0 returned 9
call    1 returned 9
call    2 returned 9
function _ZZN7testing8internal12_GLOBAL__N_113IsGlobPatternERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEENKUlcE_clEc called 93 returned 100% blocks executed 100%
      102:  780:                     [](const char c) { return c == '?' || c == '*'; });
       93:  780-block  0
branch  0 taken 93 (fallthrough)
branch  1 taken 0
       93:  780-block  1
branch  2 taken 9 (fallthrough)
branch  3 taken 84
        9:  780-block  2
       84:  780-block  3
       93:  780-block  4
        -:  781:}
        -:  782:
        -:  783:class UnitTestFilter {
        -:  784: public:
function _ZN7testing8internal12_GLOBAL__N_114UnitTestFilterC1Ev called 2 returned 100% blocks executed 100%
        2:  785:  UnitTestFilter() = default;
        2:  785-block  0
call    0 returned 2
call    1 returned 2
        -:  786:
        -:  787:  // Constructs a filter from a string of patterns separated by `:`.
function _ZN7testing8internal12_GLOBAL__N_114UnitTestFilterC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 3 returned 100% blocks executed 77%
        3:  788:  explicit UnitTestFilter(const std::string& filter) {
        3:  788-block  0
call    0 returned 3
call    1 returned 3
        -:  789:    // By design "" filter matches "" string.
        3:  790:    std::vector<std::string> all_patterns;
        3:  791:    SplitString(filter, ':', &all_patterns);
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3:  792:    const auto exact_match_patterns_begin = std::partition(
        3:  792-block  0
call    0 returned 3
call    1 returned 3
call    2 returned 3
branch  3 taken 3 (fallthrough)
branch  4 taken 0 (throw)
        -:  793:        all_patterns.begin(), all_patterns.end(), &IsGlobPattern);
        -:  794:
        6:  795:    glob_patterns_.reserve(static_cast<size_t>(
        3:  796:        std::distance(all_patterns.begin(), exact_match_patterns_begin)));
        3:  796-block  0
call    0 returned 3
call    1 returned 3
branch  2 taken 3 (fallthrough)
branch  3 taken 0 (throw)
        3:  796-block  1
call    4 returned 3
branch  5 taken 3 (fallthrough)
branch  6 taken 0 (throw)
        6:  797:    std::move(all_patterns.begin(), exact_match_patterns_begin,
        3:  797-block  0
call    0 returned 3
call    1 returned 3
branch  2 taken 3 (fallthrough)
branch  3 taken 0 (throw)
        3:  797-block  1
call    4 returned 3
branch  5 taken 3 (fallthrough)
branch  6 taken 0 (throw)
        3:  798:              std::inserter(glob_patterns_, glob_patterns_.begin()));
call    0 returned 3
        6:  799:    std::move(
        3:  799-block  0
call    0 returned 3
call    1 returned 3
branch  2 taken 3 (fallthrough)
branch  3 taken 0 (throw)
        3:  799-block  1
call    4 returned 3
branch  5 taken 3 (fallthrough)
branch  6 taken 0 (throw)
        -:  800:        exact_match_patterns_begin, all_patterns.end(),
        3:  801:        std::inserter(exact_match_patterns_, exact_match_patterns_.begin()));
call    0 returned 3
        3:  802:  }
        3:  802-block  0
call    0 returned 3
    $$$$$:  802-block  1
call    1 never executed
    $$$$$:  802-block  2
call    2 never executed
    $$$$$:  802-block  3
call    3 never executed
        -:  803:
        -:  804:  // Returns true if and only if name matches at least one of the patterns in
        -:  805:  // the filter.
function _ZNK7testing8internal12_GLOBAL__N_114UnitTestFilter11MatchesNameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 4 returned 100% blocks executed 86%
        4:  806:  bool MatchesName(const std::string& name) const {
       8*:  807:    return exact_match_patterns_.find(name) != exact_match_patterns_.end() ||
        4:  807-block  0
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0 (throw)
        4:  807-block  1
call    3 returned 4
call    4 returned 4
branch  5 taken 4 (fallthrough)
branch  6 taken 0
    %%%%%:  807-block  2
        4:  807-block  3
    $$$$$:  807-block  4
        4:  808:           std::any_of(glob_patterns_.begin(), glob_patterns_.end(),
        4:  808-block  0
call    0 returned 4
call    1 returned 4
call    2 returned 4
branch  3 taken 4 (fallthrough)
branch  4 taken 0 (throw)
        4:  808-block  1
branch  5 taken 0 (fallthrough)
branch  6 taken 4
function _ZZNK7testing8internal12_GLOBAL__N_114UnitTestFilter11MatchesNameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEENKUlSA_E_clESA_ called 11 returned 100% blocks executed 100%
       11:  809:                       [&name](const std::string& pattern) {
       22:  810:                         return PatternMatchesString(
       11:  810-block  0
call    0 returned 11
call    1 returned 11
        -:  811:                             name, pattern.c_str(),
       22:  812:                             pattern.c_str() + pattern.size());
call    0 returned 11
call    1 returned 11
        4:  813:                       });
        4:  813-block  0
        4:  813-block  1
        -:  814:  }
        -:  815:
        -:  816: private:
        -:  817:  std::vector<std::string> glob_patterns_;
        -:  818:  std::unordered_set<std::string> exact_match_patterns_;
        -:  819:};
        -:  820:
        -:  821:class PositiveAndNegativeUnitTestFilter {
        -:  822: public:
        -:  823:  // Constructs a positive and a negative filter from a string. The string
        -:  824:  // contains a positive filter optionally followed by a '-' character and a
        -:  825:  // negative filter. In case only a negative filter is provided the positive
        -:  826:  // filter will be assumed "*".
        -:  827:  // A filter is a list of patterns separated by ':'.
function _ZN7testing8internal12_GLOBAL__N_133PositiveAndNegativeUnitTestFilterC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 1 returned 100% blocks executed 20%
        1:  828:  explicit PositiveAndNegativeUnitTestFilter(const std::string& filter) {
        1:  828-block  0
call    0 returned 1
call    1 returned 1
        1:  829:    std::vector<std::string> positive_and_negative_filters;
        -:  830:
        -:  831:    // NOTE: `SplitString` always returns a non-empty container.
        1:  832:    SplitString(filter, '-', &positive_and_negative_filters);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  833:    const auto& positive_filter = positive_and_negative_filters.front();
        1:  833-block  0
call    0 returned 1
        -:  834:
        1:  835:    if (positive_and_negative_filters.size() > 1) {
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####:  836:      positive_filter_ = UnitTestFilter(
    %%%%%:  836-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$:  836-block  1
    #####:  837:          positive_filter.empty() ? kUniversalFilter : positive_filter);
    %%%%%:  837-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  837-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  837-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:  837-block  3
call   10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%:  837-block  4
call   14 never executed
    $$$$$:  837-block  5
call   15 never executed
    $$$$$:  837-block  6
branch 16 never executed
branch 17 never executed
    $$$$$:  837-block  7
call   18 never executed
    $$$$$:  837-block  8
    $$$$$:  837-block  9
        -:  838:
        -:  839:      // TODO(b/214626361): Fail on multiple '-' characters
        -:  840:      // For the moment to preserve old behavior we concatenate the rest of the
        -:  841:      // string parts with `-` as separator to generate the negative filter.
    #####:  842:      auto negative_filter_string = positive_and_negative_filters[1];
    %%%%%:  842-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  843:      for (std::size_t i = 2; i < positive_and_negative_filters.size(); i++)
    %%%%%:  843-block  0
    %%%%%:  843-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  844:        negative_filter_string =
    #####:  845:            negative_filter_string + '-' + positive_and_negative_filters[i];
    %%%%%:  845-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  845-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  845-block  2
call    7 never executed
call    8 never executed
call    9 never executed
    $$$$$:  845-block  3
call   10 never executed
    $$$$$:  845-block  4
    $$$$$:  845-block  5
    #####:  846:      negative_filter_ = UnitTestFilter(negative_filter_string);
    %%%%%:  846-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  846-block  1
call    3 never executed
call    4 never executed
    $$$$$:  846-block  2
    #####:  847:    } else {
call    0 never executed
    $$$$$:  847-block  0
call    1 never executed
        -:  848:      // In case we don't have a negative filter and positive filter is ""
        -:  849:      // we do not use kUniversalFilter by design as opposed to when we have a
        -:  850:      // negative filter.
        1:  851:      positive_filter_ = UnitTestFilter(positive_filter);
        1:  851-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  851-block  1
call    3 returned 1
call    4 returned 1
    $$$$$:  851-block  2
        -:  852:    }
        1:  853:  }
        1:  853-block  0
call    0 returned 1
    $$$$$:  853-block  1
call    1 never executed
    $$$$$:  853-block  2
call    2 never executed
    $$$$$:  853-block  3
call    3 never executed
        -:  854:
        -:  855:  // Returns true if and only if test name (this is generated by appending test
        -:  856:  // suit name and test name via a '.' character) matches the positive filter
        -:  857:  // and does not match the negative filter.
function _ZNK7testing8internal12_GLOBAL__N_133PositiveAndNegativeUnitTestFilter11MatchesTestERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_ called 1 returned 100% blocks executed 64%
        1:  858:  bool MatchesTest(const std::string& test_suite_name,
        -:  859:                   const std::string& test_name) const {
        1:  860:    return MatchesName(test_suite_name + "." + test_name);
        1:  860-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  860-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  860-block  2
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:  860-block  3
        1:  860-block  4
call    9 returned 1
call   10 returned 1
        1:  860-block  5
    $$$$$:  860-block  6
call   11 never executed
    $$$$$:  860-block  7
call   12 never executed
    $$$$$:  860-block  8
        -:  861:  }
        -:  862:
        -:  863:  // Returns true if and only if name matches the positive filter and does not
        -:  864:  // match the negative filter.
function _ZNK7testing8internal12_GLOBAL__N_133PositiveAndNegativeUnitTestFilter11MatchesNameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 1 returned 100% blocks executed 62%
        1:  865:  bool MatchesName(const std::string& name) const {
       1*:  866:    return positive_filter_.MatchesName(name) &&
        1:  866-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  866-block  1
        1:  866-block  2
       1*:  867:           !negative_filter_.MatchesName(name);
    %%%%%:  867-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        1:  867-block  1
        -:  868:  }
        -:  869:
        -:  870: private:
        -:  871:  UnitTestFilter positive_filter_;
        -:  872:  UnitTestFilter negative_filter_;
        -:  873:};
        -:  874:}  // namespace
        -:  875:
function _ZN7testing8internal15UnitTestOptions13MatchesFilterERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKc called 0 returned 0% blocks executed 0%
    #####:  876:bool UnitTestOptions::MatchesFilter(const std::string& name_str,
        -:  877:                                    const char* filter) {
    #####:  878:  return UnitTestFilter(filter).MatchesName(name_str);
    %%%%%:  878-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  878-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  878-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:  878-block  3
    %%%%%:  878-block  4
call   10 never executed
call   11 never executed
call   12 never executed
    %%%%%:  878-block  5
    $$$$$:  878-block  6
call   13 never executed
    $$$$$:  878-block  7
call   14 never executed
    $$$$$:  878-block  8
call   15 never executed
    $$$$$:  878-block  9
    $$$$$:  878-block 10
        -:  879:}
        -:  880:
        -:  881:// Returns true if and only if the user-specified filter matches the test
        -:  882:// suite name and the test name.
function _ZN7testing8internal15UnitTestOptions17FilterMatchesTestERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_ called 0 returned 0% blocks executed 0%
    #####:  883:bool UnitTestOptions::FilterMatchesTest(const std::string& test_suite_name,
        -:  884:                                        const std::string& test_name) {
        -:  885:  // Split --gtest_filter at '-', if there is one, to separate into
        -:  886:  // positive filter and negative filter portions
    #####:  887:  return PositiveAndNegativeUnitTestFilter(GTEST_FLAG_GET(filter))
    %%%%%:  887-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  887-block  1
call    3 never executed
    $$$$$:  887-block  2
call    4 never executed
    #####:  888:      .MatchesTest(test_suite_name, test_name);
    %%%%%:  888-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  888-block  1
    %%%%%:  888-block  2
        -:  889:}
        -:  890:
        -:  891:#if GTEST_HAS_SEH
        -:  892:static std::string FormatSehExceptionMessage(DWORD exception_code,
        -:  893:                                             const char* location) {
        -:  894:  Message message;
        -:  895:  message << "SEH exception with code 0x" << std::setbase(16) << exception_code
        -:  896:          << std::setbase(10) << " thrown in " << location << ".";
        -:  897:  return message.GetString();
        -:  898:}
        -:  899:
        -:  900:int UnitTestOptions::GTestProcessSEH(DWORD seh_code, const char* location) {
        -:  901:  // Google Test should handle a SEH exception if:
        -:  902:  //   1. the user wants it to, AND
        -:  903:  //   2. this is not a breakpoint exception or stack overflow, AND
        -:  904:  //   3. this is not a C++ exception (VC++ implements them via SEH,
        -:  905:  //      apparently).
        -:  906:  //
        -:  907:  // SEH exception code for C++ exceptions.
        -:  908:  // (see https://support.microsoft.com/kb/185294 for more information).
        -:  909:  const DWORD kCxxExceptionCode = 0xe06d7363;
        -:  910:
        -:  911:  if (!GTEST_FLAG_GET(catch_exceptions) || seh_code == kCxxExceptionCode ||
        -:  912:      seh_code == EXCEPTION_BREAKPOINT ||
        -:  913:      seh_code == EXCEPTION_STACK_OVERFLOW) {
        -:  914:    return EXCEPTION_CONTINUE_SEARCH;  // Don't handle these exceptions
        -:  915:  }
        -:  916:
        -:  917:  internal::ReportFailureInUnknownLocation(
        -:  918:      TestPartResult::kFatalFailure,
        -:  919:      FormatSehExceptionMessage(seh_code, location) +
        -:  920:          "\n"
        -:  921:          "Stack trace:\n" +
        -:  922:          ::testing::internal::GetCurrentOsStackTraceExceptTop(1));
        -:  923:
        -:  924:  return EXCEPTION_EXECUTE_HANDLER;
        -:  925:}
        -:  926:#endif  // GTEST_HAS_SEH
        -:  927:
        -:  928:}  // namespace internal
        -:  929:
        -:  930:// The c'tor sets this object as the test part result reporter used by
        -:  931:// Google Test.  The 'result' parameter specifies where to report the
        -:  932:// results. Intercepts only failures from the current thread.
    #####:  933:ScopedFakeTestPartResultReporter::ScopedFakeTestPartResultReporter(
    #####:  934:    TestPartResultArray* result)
    #####:  935:    : intercept_mode_(INTERCEPT_ONLY_CURRENT_THREAD), result_(result) {
    #####:  936:  Init();
    #####:  937:}
------------------
_ZN7testing32ScopedFakeTestPartResultReporterC1EPNS_19TestPartResultArrayE:
function _ZN7testing32ScopedFakeTestPartResultReporterC1EPNS_19TestPartResultArrayE called 0 returned 0% blocks executed 0%
    #####:  933:ScopedFakeTestPartResultReporter::ScopedFakeTestPartResultReporter(
    #####:  934:    TestPartResultArray* result)
    #####:  935:    : intercept_mode_(INTERCEPT_ONLY_CURRENT_THREAD), result_(result) {
    %%%%%:  935-block  0
call    0 never executed
    #####:  936:  Init();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  937:}
    %%%%%:  937-block  0
    $$$$$:  937-block  1
call    0 never executed
------------------
_ZN7testing32ScopedFakeTestPartResultReporterC2EPNS_19TestPartResultArrayE:
function _ZN7testing32ScopedFakeTestPartResultReporterC2EPNS_19TestPartResultArrayE called 0 returned 0% blocks executed 0%
    #####:  933:ScopedFakeTestPartResultReporter::ScopedFakeTestPartResultReporter(
    #####:  934:    TestPartResultArray* result)
    #####:  935:    : intercept_mode_(INTERCEPT_ONLY_CURRENT_THREAD), result_(result) {
    %%%%%:  935-block  0
call    0 never executed
    #####:  936:  Init();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  937:}
    %%%%%:  937-block  0
    $$$$$:  937-block  1
call    0 never executed
------------------
        -:  938:
        -:  939:// The c'tor sets this object as the test part result reporter used by
        -:  940:// Google Test.  The 'result' parameter specifies where to report the
        -:  941:// results.
    #####:  942:ScopedFakeTestPartResultReporter::ScopedFakeTestPartResultReporter(
    #####:  943:    InterceptMode intercept_mode, TestPartResultArray* result)
    #####:  944:    : intercept_mode_(intercept_mode), result_(result) {
    #####:  945:  Init();
    #####:  946:}
------------------
_ZN7testing32ScopedFakeTestPartResultReporterC1ENS0_13InterceptModeEPNS_19TestPartResultArrayE:
function _ZN7testing32ScopedFakeTestPartResultReporterC1ENS0_13InterceptModeEPNS_19TestPartResultArrayE called 0 returned 0% blocks executed 0%
    #####:  942:ScopedFakeTestPartResultReporter::ScopedFakeTestPartResultReporter(
    #####:  943:    InterceptMode intercept_mode, TestPartResultArray* result)
    #####:  944:    : intercept_mode_(intercept_mode), result_(result) {
    %%%%%:  944-block  0
call    0 never executed
    #####:  945:  Init();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  946:}
    %%%%%:  946-block  0
    $$$$$:  946-block  1
call    0 never executed
------------------
_ZN7testing32ScopedFakeTestPartResultReporterC2ENS0_13InterceptModeEPNS_19TestPartResultArrayE:
function _ZN7testing32ScopedFakeTestPartResultReporterC2ENS0_13InterceptModeEPNS_19TestPartResultArrayE called 0 returned 0% blocks executed 0%
    #####:  942:ScopedFakeTestPartResultReporter::ScopedFakeTestPartResultReporter(
    #####:  943:    InterceptMode intercept_mode, TestPartResultArray* result)
    #####:  944:    : intercept_mode_(intercept_mode), result_(result) {
    %%%%%:  944-block  0
call    0 never executed
    #####:  945:  Init();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  946:}
    %%%%%:  946-block  0
    $$$$$:  946-block  1
call    0 never executed
------------------
        -:  947:
function _ZN7testing32ScopedFakeTestPartResultReporter4InitEv called 0 returned 0% blocks executed 0%
    #####:  948:void ScopedFakeTestPartResultReporter::Init() {
    #####:  949:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
    %%%%%:  949-block  0
call    0 never executed
    #####:  950:  if (intercept_mode_ == INTERCEPT_ALL_THREADS) {
branch  0 never executed
branch  1 never executed
    #####:  951:    old_reporter_ = impl->GetGlobalTestPartResultReporter();
    %%%%%:  951-block  0
call    0 never executed
    #####:  952:    impl->SetGlobalTestPartResultReporter(this);
call    0 never executed
        -:  953:  } else {
    #####:  954:    old_reporter_ = impl->GetTestPartResultReporterForCurrentThread();
    %%%%%:  954-block  0
call    0 never executed
    #####:  955:    impl->SetTestPartResultReporterForCurrentThread(this);
call    0 never executed
        -:  956:  }
    #####:  957:}
        -:  958:
        -:  959:// The d'tor restores the test part result reporter used by Google Test
        -:  960:// before.
    #####:  961:ScopedFakeTestPartResultReporter::~ScopedFakeTestPartResultReporter() {
    #####:  962:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
    #####:  963:  if (intercept_mode_ == INTERCEPT_ALL_THREADS) {
    #####:  964:    impl->SetGlobalTestPartResultReporter(old_reporter_);
        -:  965:  } else {
    #####:  966:    impl->SetTestPartResultReporterForCurrentThread(old_reporter_);
        -:  967:  }
    #####:  968:}
------------------
_ZN7testing32ScopedFakeTestPartResultReporterD0Ev:
function _ZN7testing32ScopedFakeTestPartResultReporterD0Ev called 0 returned 0% blocks executed 0%
    #####:  961:ScopedFakeTestPartResultReporter::~ScopedFakeTestPartResultReporter() {
        -:  962:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
        -:  963:  if (intercept_mode_ == INTERCEPT_ALL_THREADS) {
        -:  964:    impl->SetGlobalTestPartResultReporter(old_reporter_);
        -:  965:  } else {
        -:  966:    impl->SetTestPartResultReporterForCurrentThread(old_reporter_);
        -:  967:  }
    #####:  968:}
    %%%%%:  968-block  0
call    0 never executed
call    1 never executed
------------------
_ZN7testing32ScopedFakeTestPartResultReporterD1Ev:
function _ZN7testing32ScopedFakeTestPartResultReporterD1Ev called 0 returned 0% blocks executed 0%
    #####:  961:ScopedFakeTestPartResultReporter::~ScopedFakeTestPartResultReporter() {
    #####:  962:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
    %%%%%:  962-block  0
call    0 never executed
    #####:  963:  if (intercept_mode_ == INTERCEPT_ALL_THREADS) {
branch  0 never executed
branch  1 never executed
    #####:  964:    impl->SetGlobalTestPartResultReporter(old_reporter_);
    %%%%%:  964-block  0
call    0 never executed
        -:  965:  } else {
    #####:  966:    impl->SetTestPartResultReporterForCurrentThread(old_reporter_);
    %%%%%:  966-block  0
call    0 never executed
        -:  967:  }
    #####:  968:}
    %%%%%:  968-block  0
call    0 never executed
------------------
_ZN7testing32ScopedFakeTestPartResultReporterD2Ev:
function _ZN7testing32ScopedFakeTestPartResultReporterD2Ev called 0 returned 0% blocks executed 0%
    #####:  961:ScopedFakeTestPartResultReporter::~ScopedFakeTestPartResultReporter() {
    #####:  962:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
    %%%%%:  962-block  0
call    0 never executed
    #####:  963:  if (intercept_mode_ == INTERCEPT_ALL_THREADS) {
branch  0 never executed
branch  1 never executed
    #####:  964:    impl->SetGlobalTestPartResultReporter(old_reporter_);
    %%%%%:  964-block  0
call    0 never executed
        -:  965:  } else {
    #####:  966:    impl->SetTestPartResultReporterForCurrentThread(old_reporter_);
    %%%%%:  966-block  0
call    0 never executed
        -:  967:  }
    #####:  968:}
    %%%%%:  968-block  0
call    0 never executed
------------------
        -:  969:
        -:  970:// Increments the test part result count and remembers the result.
        -:  971:// This method is from the TestPartResultReporterInterface interface.
function _ZN7testing32ScopedFakeTestPartResultReporter20ReportTestPartResultERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####:  972:void ScopedFakeTestPartResultReporter::ReportTestPartResult(
        -:  973:    const TestPartResult& result) {
    #####:  974:  result_->Append(result);
    %%%%%:  974-block  0
call    0 never executed
    #####:  975:}
        -:  976:
        -:  977:namespace internal {
        -:  978:
        -:  979:// Returns the type ID of ::testing::Test.  We should always call this
        -:  980:// instead of GetTypeId< ::testing::Test>() to get the type ID of
        -:  981:// testing::Test.  This is to work around a suspected linker bug when
        -:  982:// using Google Test as a framework on Mac OS X.  The bug causes
        -:  983:// GetTypeId< ::testing::Test>() to return different values depending
        -:  984:// on whether the call is from the Google Test framework itself or
        -:  985:// from user test code.  GetTestTypeId() is guaranteed to always
        -:  986:// return the same value, as it always calls GetTypeId<>() from the
        -:  987:// gtest.cc, which is within the Google Test framework.
function _ZN7testing8internal13GetTestTypeIdEv called 2 returned 100% blocks executed 100%
        2:  988:TypeId GetTestTypeId() { return GetTypeId<Test>(); }
        2:  988-block  0
call    0 returned 2
        -:  989:
        -:  990:// The value of GetTestTypeId() as seen from within the Google Test
        -:  991:// library.  This is solely for testing GetTestTypeId().
        -:  992:extern const TypeId kTestTypeIdInGoogleTest = GetTestTypeId();
        -:  993:
        -:  994:// This predicate-formatter checks that 'results' contains a test part
        -:  995:// failure of the given type and that the failure message contains the
        -:  996:// given substring.
function _ZN7testing8internalL13HasOneFailureEPKcS2_S2_RKNS_19TestPartResultArrayENS_14TestPartResult4TypeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:  997:static AssertionResult HasOneFailure(const char* /* results_expr */,
        -:  998:                                     const char* /* type_expr */,
        -:  999:                                     const char* /* substr_expr */,
        -: 1000:                                     const TestPartResultArray& results,
        -: 1001:                                     TestPartResult::Type type,
        -: 1002:                                     const std::string& substr) {
        -: 1003:  const std::string expected(type == TestPartResult::kFatalFailure
        -: 1004:                                 ? "1 fatal failure"
    #####: 1005:                                 : "1 non-fatal failure");
    %%%%%: 1005-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1005-block  1
    %%%%%: 1005-block  2
    %%%%%: 1005-block  3
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1005-block  4
call    6 never executed
    $$$$$: 1005-block  5
call    7 never executed
    $$$$$: 1005-block  6
    #####: 1006:  Message msg;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1007:  if (results.size() != 1) {
    %%%%%: 1007-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1008:    msg << "Expected: " << expected << "\n"
    %%%%%: 1008-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1008-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1008-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1009:        << "  Actual: " << results.size() << " failures";
    %%%%%: 1009-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1009-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 1009-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    $$$$$: 1009-block  3
    #####: 1010:    for (int i = 0; i < results.size(); i++) {
    %%%%%: 1010-block  0
    %%%%%: 1010-block  1
    %%%%%: 1010-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1011:      msg << "\n" << results.GetTestPartResult(i);
    %%%%%: 1011-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1011-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1011-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
        -: 1012:    }
    #####: 1013:    return AssertionFailure() << msg;
    %%%%%: 1013-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1013-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1013-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1013-block  3
call    9 never executed
    $$$$$: 1013-block  4
call   10 never executed
    $$$$$: 1013-block  5
        -: 1014:  }
        -: 1015:
    #####: 1016:  const TestPartResult& r = results.GetTestPartResult(0);
    %%%%%: 1016-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1017:  if (r.type() != type) {
    %%%%%: 1017-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1018:    return AssertionFailure() << "Expected: " << expected << "\n"
    %%%%%: 1018-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1018-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1018-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1018-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1018-block  4
call   12 never executed
    $$$$$: 1018-block  5
call   13 never executed
    $$$$$: 1018-block  6
    #####: 1019:                              << "  Actual:\n"
    %%%%%: 1019-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1020:                              << r;
    %%%%%: 1020-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1020-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 1021:  }
        -: 1022:
    #####: 1023:  if (strstr(r.message(), substr.c_str()) == nullptr) {
    %%%%%: 1023-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1024:    return AssertionFailure()
    %%%%%: 1024-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1024-block  1
call    3 never executed
    $$$$$: 1024-block  2
call    4 never executed
    $$$$$: 1024-block  3
    #####: 1025:           << "Expected: " << expected << " containing \"" << substr << "\"\n"
    %%%%%: 1025-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1025-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1025-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1025-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1025-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    #####: 1026:           << "  Actual:\n"
    %%%%%: 1026-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1027:           << r;
    %%%%%: 1027-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1027-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 1028:  }
        -: 1029:
    #####: 1030:  return AssertionSuccess();
    %%%%%: 1030-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1031:}
    %%%%%: 1031-block  0
call    0 never executed
call    1 never executed
    $$$$$: 1031-block  1
call    2 never executed
    $$$$$: 1031-block  2
call    3 never executed
        -: 1032:
        -: 1033:// The constructor of SingleFailureChecker remembers where to look up
        -: 1034:// test part results, what type of failure we expect, and what
        -: 1035:// substring the failure message should contain.
    #####: 1036:SingleFailureChecker::SingleFailureChecker(const TestPartResultArray* results,
        -: 1037:                                           TestPartResult::Type type,
    #####: 1038:                                           const std::string& substr)
    #####: 1039:    : results_(results), type_(type), substr_(substr) {}
------------------
_ZN7testing8internal20SingleFailureCheckerC1EPKNS_19TestPartResultArrayENS_14TestPartResult4TypeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE:
function _ZN7testing8internal20SingleFailureCheckerC1EPKNS_19TestPartResultArrayENS_14TestPartResult4TypeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 1036:SingleFailureChecker::SingleFailureChecker(const TestPartResultArray* results,
        -: 1037:                                           TestPartResult::Type type,
    #####: 1038:                                           const std::string& substr)
    #####: 1039:    : results_(results), type_(type), substr_(substr) {}
    %%%%%: 1039-block  0
call    0 never executed
------------------
_ZN7testing8internal20SingleFailureCheckerC2EPKNS_19TestPartResultArrayENS_14TestPartResult4TypeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE:
function _ZN7testing8internal20SingleFailureCheckerC2EPKNS_19TestPartResultArrayENS_14TestPartResult4TypeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 1036:SingleFailureChecker::SingleFailureChecker(const TestPartResultArray* results,
        -: 1037:                                           TestPartResult::Type type,
    #####: 1038:                                           const std::string& substr)
    #####: 1039:    : results_(results), type_(type), substr_(substr) {}
    %%%%%: 1039-block  0
call    0 never executed
------------------
        -: 1040:
        -: 1041:// The destructor of SingleFailureChecker verifies that the given
        -: 1042:// TestPartResultArray contains exactly one failure that has the given
        -: 1043:// type and contains the given substring.  If that's not the case, a
        -: 1044:// non-fatal failure will be generated.
    #####: 1045:SingleFailureChecker::~SingleFailureChecker() {
    #####: 1046:  EXPECT_PRED_FORMAT3(HasOneFailure, *results_, type_, substr_);
    #####: 1047:}
------------------
_ZN7testing8internal20SingleFailureCheckerD1Ev:
function _ZN7testing8internal20SingleFailureCheckerD1Ev called 0 returned 0% blocks executed 0%
    #####: 1045:SingleFailureChecker::~SingleFailureChecker() {
    #####: 1046:  EXPECT_PRED_FORMAT3(HasOneFailure, *results_, type_, substr_);
    %%%%%: 1046-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1046-block  1
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
    %%%%%: 1046-block  2
call   10 never executed
    #####: 1047:}
call    0 never executed
------------------
_ZN7testing8internal20SingleFailureCheckerD2Ev:
function _ZN7testing8internal20SingleFailureCheckerD2Ev called 0 returned 0% blocks executed 0%
    #####: 1045:SingleFailureChecker::~SingleFailureChecker() {
    #####: 1046:  EXPECT_PRED_FORMAT3(HasOneFailure, *results_, type_, substr_);
    %%%%%: 1046-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1046-block  1
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
    %%%%%: 1046-block  2
call   10 never executed
    #####: 1047:}
call    0 never executed
------------------
        -: 1048:
       1*: 1049:DefaultGlobalTestPartResultReporter::DefaultGlobalTestPartResultReporter(
       1*: 1050:    UnitTestImpl* unit_test)
       1*: 1051:    : unit_test_(unit_test) {}
------------------
_ZN7testing8internal35DefaultGlobalTestPartResultReporterC1EPNS0_12UnitTestImplE:
function _ZN7testing8internal35DefaultGlobalTestPartResultReporterC1EPNS0_12UnitTestImplE called 1 returned 100% blocks executed 100%
        1: 1049:DefaultGlobalTestPartResultReporter::DefaultGlobalTestPartResultReporter(
        1: 1050:    UnitTestImpl* unit_test)
        1: 1051:    : unit_test_(unit_test) {}
        1: 1051-block  0
call    0 returned 1
------------------
_ZN7testing8internal35DefaultGlobalTestPartResultReporterC2EPNS0_12UnitTestImplE:
function _ZN7testing8internal35DefaultGlobalTestPartResultReporterC2EPNS0_12UnitTestImplE called 0 returned 0% blocks executed 0%
    #####: 1049:DefaultGlobalTestPartResultReporter::DefaultGlobalTestPartResultReporter(
    #####: 1050:    UnitTestImpl* unit_test)
    #####: 1051:    : unit_test_(unit_test) {}
    %%%%%: 1051-block  0
call    0 never executed
------------------
        -: 1052:
function _ZN7testing8internal35DefaultGlobalTestPartResultReporter20ReportTestPartResultERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 1053:void DefaultGlobalTestPartResultReporter::ReportTestPartResult(
        -: 1054:    const TestPartResult& result) {
    #####: 1055:  unit_test_->current_test_result()->AddTestPartResult(result);
    %%%%%: 1055-block  0
call    0 never executed
call    1 never executed
    #####: 1056:  unit_test_->listeners()->repeater()->OnTestPartResult(result);
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1057:}
        -: 1058:
       1*: 1059:DefaultPerThreadTestPartResultReporter::DefaultPerThreadTestPartResultReporter(
       1*: 1060:    UnitTestImpl* unit_test)
       1*: 1061:    : unit_test_(unit_test) {}
------------------
_ZN7testing8internal38DefaultPerThreadTestPartResultReporterC1EPNS0_12UnitTestImplE:
function _ZN7testing8internal38DefaultPerThreadTestPartResultReporterC1EPNS0_12UnitTestImplE called 1 returned 100% blocks executed 100%
        1: 1059:DefaultPerThreadTestPartResultReporter::DefaultPerThreadTestPartResultReporter(
        1: 1060:    UnitTestImpl* unit_test)
        1: 1061:    : unit_test_(unit_test) {}
        1: 1061-block  0
call    0 returned 1
------------------
_ZN7testing8internal38DefaultPerThreadTestPartResultReporterC2EPNS0_12UnitTestImplE:
function _ZN7testing8internal38DefaultPerThreadTestPartResultReporterC2EPNS0_12UnitTestImplE called 0 returned 0% blocks executed 0%
    #####: 1059:DefaultPerThreadTestPartResultReporter::DefaultPerThreadTestPartResultReporter(
    #####: 1060:    UnitTestImpl* unit_test)
    #####: 1061:    : unit_test_(unit_test) {}
    %%%%%: 1061-block  0
call    0 never executed
------------------
        -: 1062:
function _ZN7testing8internal38DefaultPerThreadTestPartResultReporter20ReportTestPartResultERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 1063:void DefaultPerThreadTestPartResultReporter::ReportTestPartResult(
        -: 1064:    const TestPartResult& result) {
    #####: 1065:  unit_test_->GetGlobalTestPartResultReporter()->ReportTestPartResult(result);
    %%%%%: 1065-block  0
call    0 never executed
call    1 never executed
    #####: 1066:}
        -: 1067:
        -: 1068:// Returns the global test part result reporter.
        -: 1069:TestPartResultReporterInterface*
function _ZN7testing8internal12UnitTestImpl31GetGlobalTestPartResultReporterEv called 0 returned 0% blocks executed 0%
    #####: 1070:UnitTestImpl::GetGlobalTestPartResultReporter() {
    #####: 1071:  internal::MutexLock lock(&global_test_part_result_reporter_mutex_);
    %%%%%: 1071-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1072:  return global_test_part_result_reporter_;
    %%%%%: 1072-block  0
    #####: 1073:}
    %%%%%: 1073-block  0
call    0 never executed
        -: 1074:
        -: 1075:// Sets the global test part result reporter.
function _ZN7testing8internal12UnitTestImpl31SetGlobalTestPartResultReporterEPNS_31TestPartResultReporterInterfaceE called 0 returned 0% blocks executed 0%
    #####: 1076:void UnitTestImpl::SetGlobalTestPartResultReporter(
        -: 1077:    TestPartResultReporterInterface* reporter) {
    #####: 1078:  internal::MutexLock lock(&global_test_part_result_reporter_mutex_);
    %%%%%: 1078-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1079:  global_test_part_result_reporter_ = reporter;
    #####: 1080:}
    %%%%%: 1080-block  0
call    0 never executed
        -: 1081:
        -: 1082:// Returns the test part result reporter for the current thread.
        -: 1083:TestPartResultReporterInterface*
function _ZN7testing8internal12UnitTestImpl41GetTestPartResultReporterForCurrentThreadEv called 0 returned 0% blocks executed 0%
    #####: 1084:UnitTestImpl::GetTestPartResultReporterForCurrentThread() {
    #####: 1085:  return per_thread_test_part_result_reporter_.get();
    %%%%%: 1085-block  0
call    0 never executed
        -: 1086:}
        -: 1087:
        -: 1088:// Sets the test part result reporter for the current thread.
function _ZN7testing8internal12UnitTestImpl41SetTestPartResultReporterForCurrentThreadEPNS_31TestPartResultReporterInterfaceE called 0 returned 0% blocks executed 0%
    #####: 1089:void UnitTestImpl::SetTestPartResultReporterForCurrentThread(
        -: 1090:    TestPartResultReporterInterface* reporter) {
    #####: 1091:  per_thread_test_part_result_reporter_.set(reporter);
    %%%%%: 1091-block  0
call    0 never executed
    #####: 1092:}
        -: 1093:
        -: 1094:// Gets the number of successful test suites.
function _ZNK7testing8internal12UnitTestImpl27successful_test_suite_countEv called 0 returned 0% blocks executed 0%
    #####: 1095:int UnitTestImpl::successful_test_suite_count() const {
    #####: 1096:  return CountIf(test_suites_, TestSuitePassed);
    %%%%%: 1096-block  0
call    0 never executed
        -: 1097:}
        -: 1098:
        -: 1099:// Gets the number of failed test suites.
function _ZNK7testing8internal12UnitTestImpl23failed_test_suite_countEv called 2 returned 100% blocks executed 100%
        2: 1100:int UnitTestImpl::failed_test_suite_count() const {
        2: 1101:  return CountIf(test_suites_, TestSuiteFailed);
        2: 1101-block  0
call    0 returned 2
        -: 1102:}
        -: 1103:
        -: 1104:// Gets the number of all test suites.
function _ZNK7testing8internal12UnitTestImpl22total_test_suite_countEv called 0 returned 0% blocks executed 0%
    #####: 1105:int UnitTestImpl::total_test_suite_count() const {
    #####: 1106:  return static_cast<int>(test_suites_.size());
    %%%%%: 1106-block  0
call    0 never executed
        -: 1107:}
        -: 1108:
        -: 1109:// Gets the number of all test suites that contain at least one test
        -: 1110:// that should run.
function _ZNK7testing8internal12UnitTestImpl23test_suite_to_run_countEv called 2 returned 100% blocks executed 100%
        2: 1111:int UnitTestImpl::test_suite_to_run_count() const {
        2: 1112:  return CountIf(test_suites_, ShouldRunTestSuite);
        2: 1112-block  0
call    0 returned 2
        -: 1113:}
        -: 1114:
        -: 1115:// Gets the number of successful tests.
function _ZNK7testing8internal12UnitTestImpl21successful_test_countEv called 1 returned 100% blocks executed 100%
        1: 1116:int UnitTestImpl::successful_test_count() const {
        1: 1117:  return SumOverTestSuiteList(test_suites_, &TestSuite::successful_test_count);
        1: 1117-block  0
call    0 returned 1
        -: 1118:}
        -: 1119:
        -: 1120:// Gets the number of skipped tests.
function _ZNK7testing8internal12UnitTestImpl18skipped_test_countEv called 1 returned 100% blocks executed 100%
        1: 1121:int UnitTestImpl::skipped_test_count() const {
        1: 1122:  return SumOverTestSuiteList(test_suites_, &TestSuite::skipped_test_count);
        1: 1122-block  0
call    0 returned 1
        -: 1123:}
        -: 1124:
        -: 1125:// Gets the number of failed tests.
function _ZNK7testing8internal12UnitTestImpl17failed_test_countEv called 0 returned 0% blocks executed 0%
    #####: 1126:int UnitTestImpl::failed_test_count() const {
    #####: 1127:  return SumOverTestSuiteList(test_suites_, &TestSuite::failed_test_count);
    %%%%%: 1127-block  0
call    0 never executed
        -: 1128:}
        -: 1129:
        -: 1130:// Gets the number of disabled tests that will be reported in the XML report.
function _ZNK7testing8internal12UnitTestImpl30reportable_disabled_test_countEv called 1 returned 100% blocks executed 100%
        1: 1131:int UnitTestImpl::reportable_disabled_test_count() const {
        1: 1132:  return SumOverTestSuiteList(test_suites_,
        1: 1132-block  0
call    0 returned 1
        1: 1133:                              &TestSuite::reportable_disabled_test_count);
        -: 1134:}
        -: 1135:
        -: 1136:// Gets the number of disabled tests.
function _ZNK7testing8internal12UnitTestImpl19disabled_test_countEv called 0 returned 0% blocks executed 0%
    #####: 1137:int UnitTestImpl::disabled_test_count() const {
    #####: 1138:  return SumOverTestSuiteList(test_suites_, &TestSuite::disabled_test_count);
    %%%%%: 1138-block  0
call    0 never executed
        -: 1139:}
        -: 1140:
        -: 1141:// Gets the number of tests to be printed in the XML report.
function _ZNK7testing8internal12UnitTestImpl21reportable_test_countEv called 0 returned 0% blocks executed 0%
    #####: 1142:int UnitTestImpl::reportable_test_count() const {
    #####: 1143:  return SumOverTestSuiteList(test_suites_, &TestSuite::reportable_test_count);
    %%%%%: 1143-block  0
call    0 never executed
        -: 1144:}
        -: 1145:
        -: 1146:// Gets the number of all tests.
function _ZNK7testing8internal12UnitTestImpl16total_test_countEv called 0 returned 0% blocks executed 0%
    #####: 1147:int UnitTestImpl::total_test_count() const {
    #####: 1148:  return SumOverTestSuiteList(test_suites_, &TestSuite::total_test_count);
    %%%%%: 1148-block  0
call    0 never executed
        -: 1149:}
        -: 1150:
        -: 1151:// Gets the number of tests that should run.
function _ZNK7testing8internal12UnitTestImpl17test_to_run_countEv called 2 returned 100% blocks executed 100%
        2: 1152:int UnitTestImpl::test_to_run_count() const {
        2: 1153:  return SumOverTestSuiteList(test_suites_, &TestSuite::test_to_run_count);
        2: 1153-block  0
call    0 returned 2
        -: 1154:}
        -: 1155:
        -: 1156:// Returns the current OS stack trace as an std::string.
        -: 1157://
        -: 1158:// The maximum number of stack frames to be included is specified by
        -: 1159:// the gtest_stack_trace_depth flag.  The skip_count parameter
        -: 1160:// specifies the number of top frames to be skipped, which doesn't
        -: 1161:// count against the number of frames to be included.
        -: 1162://
        -: 1163:// For example, if Foo() calls Bar(), which in turn calls
        -: 1164:// CurrentOsStackTraceExceptTop(1), Foo() will be included in the
        -: 1165:// trace but Bar() and CurrentOsStackTraceExceptTop() won't.
function _ZN7testing8internal12UnitTestImpl28CurrentOsStackTraceExceptTopB5cxx11Ei called 0 returned 0% blocks executed 0%
    #####: 1166:std::string UnitTestImpl::CurrentOsStackTraceExceptTop(int skip_count) {
    #####: 1167:  return os_stack_trace_getter()->CurrentStackTrace(
    %%%%%: 1167-block  0
call    0 never executed
        -: 1168:      static_cast<int>(GTEST_FLAG_GET(stack_trace_depth)), skip_count + 1
        -: 1169:      // Skips the user-specified number of frames plus this function
        -: 1170:      // itself.
    #####: 1171:  );  // NOLINT
call    0 never executed
        -: 1172:}
        -: 1173:
        -: 1174:// A helper class for measuring elapsed times.
        -: 1175:class Timer {
        -: 1176: public:
function _ZN7testing8internal5TimerC1Ev called 1 returned 100% blocks executed 100%
        1: 1177:  Timer() : start_(clock::now()) {}
        1: 1177-block  0
call    0 returned 1
        -: 1178:
        -: 1179:  // Return time elapsed in milliseconds since the timer was created.
function _ZN7testing8internal5Timer7ElapsedEv called 1 returned 100% blocks executed 78%
        1: 1180:  TimeInMillis Elapsed() {
        3: 1181:    return std::chrono::duration_cast<std::chrono::milliseconds>(clock::now() -
        1: 1181-block  0
call    0 returned 1
        1: 1181-block  1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
    $$$$$: 1181-block  2
    $$$$$: 1181-block  3
        1: 1182:                                                                 start_)
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        2: 1183:        .count();
        1: 1183-block  0
call    0 returned 1
        1: 1183-block  1
        -: 1184:  }
        -: 1185:
        -: 1186: private:
        -: 1187:  // Fall back to the system_clock when building with newlib on a system
        -: 1188:  // without a monotonic clock.
        -: 1189:#if defined(_NEWLIB_VERSION) && !defined(CLOCK_MONOTONIC)
        -: 1190:  using clock = std::chrono::system_clock;
        -: 1191:#else
        -: 1192:  using clock = std::chrono::steady_clock;
        -: 1193:#endif
        -: 1194:  clock::time_point start_;
        -: 1195:};
        -: 1196:
        -: 1197:// Returns a timestamp as milliseconds since the epoch. Note this time may jump
        -: 1198:// around subject to adjustments by the system, to measure elapsed time use
        -: 1199:// Timer instead.
function _ZN7testing8internal15GetTimeInMillisEv called 2 returned 100% blocks executed 73%
        2: 1200:TimeInMillis GetTimeInMillis() {
        2: 1201:  return std::chrono::duration_cast<std::chrono::milliseconds>(
        2: 1201-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2: 1202:             std::chrono::system_clock::now() -
        2: 1202-block  0
call    0 returned 2
    $$$$$: 1202-block  1
    $$$$$: 1202-block  2
        4: 1203:             std::chrono::system_clock::from_time_t(0))
call    0 returned 2
call    1 returned 2
branch  2 taken 2 (fallthrough)
branch  3 taken 0 (throw)
    $$$$$: 1203-block  0
        4: 1204:      .count();
        2: 1204-block  0
call    0 returned 2
        2: 1204-block  1
        -: 1205:}
        -: 1206:
        -: 1207:// Utilities
        -: 1208:
        -: 1209:// class String.
        -: 1210:
        -: 1211:#ifdef GTEST_OS_WINDOWS_MOBILE
        -: 1212:// Creates a UTF-16 wide string from the given ANSI string, allocating
        -: 1213:// memory using new. The caller is responsible for deleting the return
        -: 1214:// value using delete[]. Returns the wide string, or NULL if the
        -: 1215:// input is NULL.
        -: 1216:LPCWSTR String::AnsiToUtf16(const char* ansi) {
        -: 1217:  if (!ansi) return nullptr;
        -: 1218:  const int length = strlen(ansi);
        -: 1219:  const int unicode_length =
        -: 1220:      MultiByteToWideChar(CP_ACP, 0, ansi, length, nullptr, 0);
        -: 1221:  WCHAR* unicode = new WCHAR[unicode_length + 1];
        -: 1222:  MultiByteToWideChar(CP_ACP, 0, ansi, length, unicode, unicode_length);
        -: 1223:  unicode[unicode_length] = 0;
        -: 1224:  return unicode;
        -: 1225:}
        -: 1226:
        -: 1227:// Creates an ANSI string from the given wide string, allocating
        -: 1228:// memory using new. The caller is responsible for deleting the return
        -: 1229:// value using delete[]. Returns the ANSI string, or NULL if the
        -: 1230:// input is NULL.
        -: 1231:const char* String::Utf16ToAnsi(LPCWSTR utf16_str) {
        -: 1232:  if (!utf16_str) return nullptr;
        -: 1233:  const int ansi_length = WideCharToMultiByte(CP_ACP, 0, utf16_str, -1, nullptr,
        -: 1234:                                              0, nullptr, nullptr);
        -: 1235:  char* ansi = new char[ansi_length + 1];
        -: 1236:  WideCharToMultiByte(CP_ACP, 0, utf16_str, -1, ansi, ansi_length, nullptr,
        -: 1237:                      nullptr);
        -: 1238:  ansi[ansi_length] = 0;
        -: 1239:  return ansi;
        -: 1240:}
        -: 1241:
        -: 1242:#endif  // GTEST_OS_WINDOWS_MOBILE
        -: 1243:
        -: 1244:// Compares two C strings.  Returns true if and only if they have the same
        -: 1245:// content.
        -: 1246://
        -: 1247:// Unlike strcmp(), this function can handle NULL argument(s).  A NULL
        -: 1248:// C string is considered different to any non-NULL C string,
        -: 1249:// including the empty string.
function _ZN7testing8internal6String13CStringEqualsEPKcS3_ called 2 returned 100% blocks executed 67%
        2: 1250:bool String::CStringEquals(const char* lhs, const char* rhs) {
       2*: 1251:  if (lhs == nullptr) return rhs == nullptr;
        2: 1251-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    %%%%%: 1251-block  1
        -: 1252:
       2*: 1253:  if (rhs == nullptr) return false;
        2: 1253-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    %%%%%: 1253-block  1
        -: 1254:
        2: 1255:  return strcmp(lhs, rhs) == 0;
        2: 1255-block  0
        -: 1256:}
        -: 1257:
        -: 1258:#if GTEST_HAS_STD_WSTRING
        -: 1259:
        -: 1260:// Converts an array of wide chars to a narrow string using the UTF-8
        -: 1261:// encoding, and streams the result to the given Message object.
function _ZN7testing8internalL24StreamWideCharsToMessageEPKwmPNS_7MessageE called 0 returned 0% blocks executed 0%
    #####: 1262:static void StreamWideCharsToMessage(const wchar_t* wstr, size_t length,
        -: 1263:                                     Message* msg) {
    #####: 1264:  for (size_t i = 0; i != length;) {  // NOLINT
    %%%%%: 1264-block  0
    %%%%%: 1264-block  1
branch  0 never executed
branch  1 never executed
    #####: 1265:    if (wstr[i] != L'\0') {
    %%%%%: 1265-block  0
branch  0 never executed
branch  1 never executed
    #####: 1266:      *msg << WideStringToUtf8(wstr + i, static_cast<int>(length - i));
    %%%%%: 1266-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1266-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1266-block  2
call    6 never executed
    $$$$$: 1266-block  3
call    7 never executed
    $$$$$: 1266-block  4
call    8 never executed
    #####: 1267:      while (i != length && wstr[i] != L'\0') i++;
    %%%%%: 1267-block  0
    %%%%%: 1267-block  1
branch  0 never executed
branch  1 never executed
    %%%%%: 1267-block  2
branch  2 never executed
branch  3 never executed
        -: 1268:    } else {
    #####: 1269:      *msg << '\0';
    %%%%%: 1269-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1270:      i++;
    %%%%%: 1270-block  0
        -: 1271:    }
        -: 1272:  }
    #####: 1273:}
    %%%%%: 1273-block  0
        -: 1274:
        -: 1275:#endif  // GTEST_HAS_STD_WSTRING
        -: 1276:
function _ZN7testing8internal11SplitStringERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcPSt6vectorIS6_SaIS6_EE called 4 returned 100% blocks executed 68%
        4: 1277:void SplitString(const ::std::string& str, char delimiter,
        -: 1278:                 ::std::vector< ::std::string>* dest) {
        4: 1279:  ::std::vector< ::std::string> parsed;
        4: 1280:  ::std::string::size_type pos = 0;
       10: 1281:  while (::testing::internal::AlwaysTrue()) {
        4: 1281-block  0
       10: 1281-block  1
call    0 returned 10
branch  1 taken 10 (fallthrough)
branch  2 taken 0 (throw)
       10: 1281-block  2
branch  3 taken 10
branch  4 taken 0 (fallthrough)
       10: 1282:    const ::std::string::size_type colon = str.find(delimiter, pos);
       10: 1282-block  0
call    0 returned 10
       10: 1283:    if (colon == ::std::string::npos) {
branch  0 taken 4 (fallthrough)
branch  1 taken 6
        4: 1284:      parsed.push_back(str.substr(pos));
        4: 1284-block  0
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0 (throw)
        4: 1284-block  1
call    3 returned 4
branch  4 taken 4 (fallthrough)
branch  5 taken 0 (throw)
        4: 1284-block  2
call    6 returned 4
    $$$$$: 1284-block  3
call    7 never executed
    $$$$$: 1284-block  4
        4: 1285:      break;
        -: 1286:    } else {
        6: 1287:      parsed.push_back(str.substr(pos, colon - pos));
        6: 1287-block  0
call    0 returned 6
branch  1 taken 6 (fallthrough)
branch  2 taken 0 (throw)
        6: 1287-block  1
call    3 returned 6
branch  4 taken 6 (fallthrough)
branch  5 taken 0 (throw)
        6: 1287-block  2
call    6 returned 6
    $$$$$: 1287-block  3
call    7 never executed
    $$$$$: 1287-block  4
        6: 1288:      pos = colon + 1;
        -: 1289:    }
        -: 1290:  }
        4: 1291:  dest->swap(parsed);
        4: 1291-block  0
call    0 returned 4
        4: 1292:}
call    0 returned 4
    $$$$$: 1292-block  0
call    1 never executed
        -: 1293:
        -: 1294:}  // namespace internal
        -: 1295:
        -: 1296:// Constructs an empty Message.
        -: 1297:// We allocate the stringstream separately because otherwise each use of
        -: 1298:// ASSERT/EXPECT in a procedure adds over 200 bytes to the procedure's
        -: 1299:// stack frame leading to huge stack frames in some cases; gcc does not reuse
        -: 1300:// the stack space.
      53*: 1301:Message::Message() : ss_(new ::std::stringstream) {
        -: 1302:  // By default, we want there to be enough precision when printing
        -: 1303:  // a double to a Message.
      53*: 1304:  *ss_ << std::setprecision(std::numeric_limits<double>::digits10 + 2);
      53*: 1305:}
------------------
_ZN7testing7MessageC1Ev:
function _ZN7testing7MessageC1Ev called 53 returned 100% blocks executed 80%
       53: 1301:Message::Message() : ss_(new ::std::stringstream) {
       53: 1301-block  0
call    0 returned 53
call    1 returned 53
branch  2 taken 53 (fallthrough)
branch  3 taken 0 (throw)
       53: 1301-block  1
call    4 returned 53
    $$$$$: 1301-block  2
branch  5 never executed
branch  6 never executed
    $$$$$: 1301-block  3
call    7 never executed
        -: 1302:  // By default, we want there to be enough precision when printing
        -: 1303:  // a double to a Message.
       53: 1304:  *ss_ << std::setprecision(std::numeric_limits<double>::digits10 + 2);
call    0 returned 53
call    1 returned 53
call    2 returned 53
       53: 1305:}
------------------
_ZN7testing7MessageC2Ev:
function _ZN7testing7MessageC2Ev called 0 returned 0% blocks executed 0%
    #####: 1301:Message::Message() : ss_(new ::std::stringstream) {
    %%%%%: 1301-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1301-block  1
call    4 never executed
    $$$$$: 1301-block  2
branch  5 never executed
branch  6 never executed
    $$$$$: 1301-block  3
call    7 never executed
        -: 1302:  // By default, we want there to be enough precision when printing
        -: 1303:  // a double to a Message.
    #####: 1304:  *ss_ << std::setprecision(std::numeric_limits<double>::digits10 + 2);
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1305:}
------------------
        -: 1306:
        -: 1307:// These two overloads allow streaming a wide C string to a Message
        -: 1308:// using the UTF-8 encoding.
function _ZN7testing7MessagelsEPKw called 0 returned 0% blocks executed 0%
    #####: 1309:Message& Message::operator<<(const wchar_t* wide_c_str) {
    #####: 1310:  return *this << internal::String::ShowWideCString(wide_c_str);
    %%%%%: 1310-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1310-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1310-block  2
call    6 never executed
    %%%%%: 1310-block  3
    $$$$$: 1310-block  4
call    7 never executed
        -: 1311:}
function _ZN7testing7MessagelsEPw called 0 returned 0% blocks executed 0%
    #####: 1312:Message& Message::operator<<(wchar_t* wide_c_str) {
    #####: 1313:  return *this << internal::String::ShowWideCString(wide_c_str);
    %%%%%: 1313-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1313-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1313-block  2
call    6 never executed
    %%%%%: 1313-block  3
    $$$$$: 1313-block  4
call    7 never executed
        -: 1314:}
        -: 1315:
        -: 1316:#if GTEST_HAS_STD_WSTRING
        -: 1317:// Converts the given wide string to a narrow string using the UTF-8
        -: 1318:// encoding, and streams the result to this Message object.
function _ZN7testing7MessagelsERKNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEE called 0 returned 0% blocks executed 0%
    #####: 1319:Message& Message::operator<<(const ::std::wstring& wstr) {
    #####: 1320:  internal::StreamWideCharsToMessage(wstr.c_str(), wstr.length(), this);
    %%%%%: 1320-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1321:  return *this;
        -: 1322:}
        -: 1323:#endif  // GTEST_HAS_STD_WSTRING
        -: 1324:
        -: 1325:// Gets the text streamed to this object so far as an std::string.
        -: 1326:// Each '\0' character in the buffer is replaced with "\\0".
function _ZNK7testing7Message9GetStringB5cxx11Ev called 53 returned 100% blocks executed 100%
       53: 1327:std::string Message::GetString() const {
       53: 1328:  return internal::StringStreamToString(ss_.get());
       53: 1328-block  0
call    0 returned 53
call    1 returned 53
        -: 1329:}
        -: 1330:
        -: 1331:namespace internal {
        -: 1332:
        -: 1333:namespace edit_distance {
function _ZN7testing8internal13edit_distance21CalculateOptimalEditsERKSt6vectorImSaImEES6_ called 0 returned 0% blocks executed 0%
    #####: 1334:std::vector<EditType> CalculateOptimalEdits(const std::vector<size_t>& left,
        -: 1335:                                            const std::vector<size_t>& right) {
        -: 1336:  std::vector<std::vector<double> > costs(
    #####: 1337:      left.size() + 1, std::vector<double>(right.size() + 1));
    %%%%%: 1337-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1337-block  1
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 1337-block  2
call   10 never executed
call   11 never executed
call   12 never executed
    $$$$$: 1337-block  3
call   13 never executed
    $$$$$: 1337-block  4
    $$$$$: 1337-block  5
call   14 never executed
    $$$$$: 1337-block  6
call   15 never executed
    $$$$$: 1337-block  7
    $$$$$: 1337-block  8
        -: 1338:  std::vector<std::vector<EditType> > best_move(
    #####: 1339:      left.size() + 1, std::vector<EditType>(right.size() + 1));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1339-block  0
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 1339-block  1
call   10 never executed
call   11 never executed
call   12 never executed
    $$$$$: 1339-block  2
call   13 never executed
    $$$$$: 1339-block  3
    $$$$$: 1339-block  4
call   14 never executed
    $$$$$: 1339-block  5
call   15 never executed
    $$$$$: 1339-block  6
    $$$$$: 1339-block  7
        -: 1340:
        -: 1341:  // Populate for empty right.
    #####: 1342:  for (size_t l_i = 0; l_i < costs.size(); ++l_i) {
    %%%%%: 1342-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1343:    costs[l_i][0] = static_cast<double>(l_i);
    %%%%%: 1343-block  0
call    0 never executed
call    1 never executed
    #####: 1344:    best_move[l_i][0] = kRemove;
call    0 never executed
call    1 never executed
        -: 1345:  }
        -: 1346:  // Populate for empty left.
    #####: 1347:  for (size_t r_i = 1; r_i < costs[0].size(); ++r_i) {
    %%%%%: 1347-block  0
    %%%%%: 1347-block  1
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1348:    costs[0][r_i] = static_cast<double>(r_i);
    %%%%%: 1348-block  0
call    0 never executed
call    1 never executed
    #####: 1349:    best_move[0][r_i] = kAdd;
call    0 never executed
call    1 never executed
        -: 1350:  }
        -: 1351:
    #####: 1352:  for (size_t l_i = 0; l_i < left.size(); ++l_i) {
    %%%%%: 1352-block  0
    %%%%%: 1352-block  1
    %%%%%: 1352-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1353:    for (size_t r_i = 0; r_i < right.size(); ++r_i) {
    %%%%%: 1353-block  0
    %%%%%: 1353-block  1
    %%%%%: 1353-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1354:      if (left[l_i] == right[r_i]) {
    %%%%%: 1354-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1355:        // Found a match. Consume it.
    #####: 1356:        costs[l_i + 1][r_i + 1] = costs[l_i][r_i];
    %%%%%: 1356-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####: 1357:        best_move[l_i + 1][r_i + 1] = kMatch;
call    0 never executed
call    1 never executed
    #####: 1358:        continue;
        -: 1359:      }
        -: 1360:
    #####: 1361:      const double add = costs[l_i + 1][r_i];
    %%%%%: 1361-block  0
call    0 never executed
call    1 never executed
    #####: 1362:      const double remove = costs[l_i][r_i + 1];
call    0 never executed
call    1 never executed
    #####: 1363:      const double replace = costs[l_i][r_i];
call    0 never executed
call    1 never executed
    #####: 1364:      if (add < remove && add < replace) {
branch  0 never executed
branch  1 never executed
    %%%%%: 1364-block  0
branch  2 never executed
branch  3 never executed
    #####: 1365:        costs[l_i + 1][r_i + 1] = add + 1;
    %%%%%: 1365-block  0
call    0 never executed
call    1 never executed
    #####: 1366:        best_move[l_i + 1][r_i + 1] = kAdd;
call    0 never executed
call    1 never executed
    #####: 1367:      } else if (remove < add && remove < replace) {
    %%%%%: 1367-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1367-block  1
branch  2 never executed
branch  3 never executed
    #####: 1368:        costs[l_i + 1][r_i + 1] = remove + 1;
    %%%%%: 1368-block  0
call    0 never executed
call    1 never executed
    #####: 1369:        best_move[l_i + 1][r_i + 1] = kRemove;
call    0 never executed
call    1 never executed
        -: 1370:      } else {
        -: 1371:        // We make replace a little more expensive than add/remove to lower
        -: 1372:        // their priority.
    #####: 1373:        costs[l_i + 1][r_i + 1] = replace + 1.00001;
    %%%%%: 1373-block  0
call    0 never executed
call    1 never executed
    #####: 1374:        best_move[l_i + 1][r_i + 1] = kReplace;
call    0 never executed
call    1 never executed
        -: 1375:      }
        -: 1376:    }
        -: 1377:  }
        -: 1378:
        -: 1379:  // Reconstruct the best path. We do it in reverse order.
    #####: 1380:  std::vector<EditType> best_path;
    #####: 1381:  for (size_t l_i = left.size(), r_i = right.size(); l_i > 0 || r_i > 0;) {
    %%%%%: 1381-block  0
call    0 never executed
call    1 never executed
    %%%%%: 1381-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 1381-block  2
branch  4 never executed
branch  5 never executed
    #####: 1382:    EditType move = best_move[l_i][r_i];
    %%%%%: 1382-block  0
call    0 never executed
call    1 never executed
    #####: 1383:    best_path.push_back(move);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1384:    l_i -= move != kAdd;
    #####: 1385:    r_i -= move != kRemove;
    %%%%%: 1385-block  0
        -: 1386:  }
    #####: 1387:  std::reverse(best_path.begin(), best_path.end());
    %%%%%: 1387-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1388:  return best_path;
    %%%%%: 1388-block  0
    %%%%%: 1388-block  1
    #####: 1389:}
    %%%%%: 1389-block  0
call    0 never executed
call    1 never executed
    $$$$$: 1389-block  1
call    2 never executed
    $$$$$: 1389-block  2
call    3 never executed
    $$$$$: 1389-block  3
call    4 never executed
        -: 1390:
        -: 1391:namespace {
        -: 1392:
        -: 1393:// Helper class to convert string into ids with deduplication.
        -: 1394:class InternalStrings {
        -: 1395: public:
function _ZN7testing8internal13edit_distance12_GLOBAL__N_115InternalStrings5GetIdERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 1396:  size_t GetId(const std::string& str) {
    #####: 1397:    IdMap::iterator it = ids_.find(str);
    %%%%%: 1397-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1398:    if (it != ids_.end()) return it->second;
    %%%%%: 1398-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1398-block  1
call    4 never executed
    #####: 1399:    size_t id = ids_.size();
    %%%%%: 1399-block  0
call    0 never executed
    #####: 1400:    return ids_[str] = id;
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1400-block  0
        -: 1401:  }
        -: 1402:
        -: 1403: private:
        -: 1404:  typedef std::map<std::string, size_t> IdMap;
        -: 1405:  IdMap ids_;
        -: 1406:};
        -: 1407:
        -: 1408:}  // namespace
        -: 1409:
function _ZN7testing8internal13edit_distance21CalculateOptimalEditsERKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS8_EESC_ called 0 returned 0% blocks executed 0%
    #####: 1410:std::vector<EditType> CalculateOptimalEdits(
        -: 1411:    const std::vector<std::string>& left,
        -: 1412:    const std::vector<std::string>& right) {
    #####: 1413:  std::vector<size_t> left_ids, right_ids;
        -: 1414:  {
    #####: 1415:    InternalStrings intern_table;
    %%%%%: 1415-block  0
call    0 never executed
    #####: 1416:    for (size_t i = 0; i < left.size(); ++i) {
    %%%%%: 1416-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1417:      left_ids.push_back(intern_table.GetId(left[i]));
    %%%%%: 1417-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1417-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 1417-block  2
    $$$$$: 1417-block  3
        -: 1418:    }
    #####: 1419:    for (size_t i = 0; i < right.size(); ++i) {
    %%%%%: 1419-block  0
    %%%%%: 1419-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1420:      right_ids.push_back(intern_table.GetId(right[i]));
    %%%%%: 1420-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1420-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 1420-block  2
    $$$$$: 1420-block  3
        -: 1421:    }
    #####: 1422:  }
    %%%%%: 1422-block  0
call    0 never executed
    $$$$$: 1422-block  1
call    1 never executed
    #####: 1423:  return CalculateOptimalEdits(left_ids, right_ids);
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1423-block  0
    #####: 1424:}
    %%%%%: 1424-block  0
call    0 never executed
call    1 never executed
    $$$$$: 1424-block  1
call    2 never executed
    $$$$$: 1424-block  2
call    3 never executed
        -: 1425:
        -: 1426:namespace {
        -: 1427:
        -: 1428:// Helper class that holds the state for one hunk and prints it out to the
        -: 1429:// stream.
        -: 1430:// It reorders adds/removes when possible to group all removes before all
        -: 1431:// adds. It also adds the hunk header before printint into the stream.
        -: 1432:class Hunk {
        -: 1433: public:
function _ZN7testing8internal13edit_distance12_GLOBAL__N_14HunkC1Emm called 0 returned 0% blocks executed 0%
    #####: 1434:  Hunk(size_t left_start, size_t right_start)
    #####: 1435:      : left_start_(left_start),
    #####: 1436:        right_start_(right_start),
    #####: 1437:        adds_(),
    #####: 1438:        removes_(),
    #####: 1439:        common_() {}
    %%%%%: 1439-block  0
call    0 never executed
call    1 never executed
call    2 never executed
        -: 1440:
function _ZN7testing8internal13edit_distance12_GLOBAL__N_14Hunk8PushLineEcPKc called 0 returned 0% blocks executed 0%
    #####: 1441:  void PushLine(char edit, const char* line) {
    #####: 1442:    switch (edit) {
    %%%%%: 1442-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1443:      case ' ':
    #####: 1444:        ++common_;
    #####: 1445:        FlushEdits();
    %%%%%: 1445-block  0
call    0 never executed
    #####: 1446:        hunk_.push_back(std::make_pair(' ', line));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 1446-block  0
    $$$$$: 1446-block  1
call    4 never executed
    #####: 1447:        break;
    %%%%%: 1447-block  0
    #####: 1448:      case '-':
    #####: 1449:        ++removes_;
    #####: 1450:        hunk_removes_.push_back(std::make_pair('-', line));
    %%%%%: 1450-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 1450-block  1
    $$$$$: 1450-block  2
call    4 never executed
    #####: 1451:        break;
    %%%%%: 1451-block  0
    #####: 1452:      case '+':
    #####: 1453:        ++adds_;
    #####: 1454:        hunk_adds_.push_back(std::make_pair('+', line));
    %%%%%: 1454-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 1454-block  1
    #####: 1455:        break;
    %%%%%: 1455-block  0
        -: 1456:    }
    #####: 1457:  }
    %%%%%: 1457-block  0
        -: 1458:
function _ZN7testing8internal13edit_distance12_GLOBAL__N_14Hunk7PrintToEPSo called 0 returned 0% blocks executed 0%
    #####: 1459:  void PrintTo(std::ostream* os) {
    #####: 1460:    PrintHeader(os);
    %%%%%: 1460-block  0
call    0 never executed
    #####: 1461:    FlushEdits();
call    0 never executed
    #####: 1462:    for (std::list<std::pair<char, const char*> >::const_iterator it =
    #####: 1463:             hunk_.begin();
call    0 never executed
call    1 never executed
    #####: 1464:         it != hunk_.end(); ++it) {
    %%%%%: 1464-block  0
call    0 never executed
    %%%%%: 1464-block  1
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1465:      *os << it->first << it->second << "\n";
    %%%%%: 1465-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1465-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 1465-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
        -: 1466:    }
    #####: 1467:  }
    %%%%%: 1467-block  0
        -: 1468:
function _ZNK7testing8internal13edit_distance12_GLOBAL__N_14Hunk9has_editsEv called 0 returned 0% blocks executed 0%
    #####: 1469:  bool has_edits() const { return adds_ || removes_; }
    %%%%%: 1469-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1469-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 1469-block  2
    %%%%%: 1469-block  3
    %%%%%: 1469-block  4
        -: 1470:
        -: 1471: private:
function _ZN7testing8internal13edit_distance12_GLOBAL__N_14Hunk10FlushEditsEv called 0 returned 0% blocks executed 0%
    #####: 1472:  void FlushEdits() {
    #####: 1473:    hunk_.splice(hunk_.end(), hunk_removes_);
    %%%%%: 1473-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1474:    hunk_.splice(hunk_.end(), hunk_adds_);
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1475:  }
        -: 1476:
        -: 1477:  // Print a unified diff header for one hunk.
        -: 1478:  // The format is
        -: 1479:  //   "@@ -<left_start>,<left_length> +<right_start>,<right_length> @@"
        -: 1480:  // where the left/right parts are omitted if unnecessary.
function _ZNK7testing8internal13edit_distance12_GLOBAL__N_14Hunk11PrintHeaderEPSo called 0 returned 0% blocks executed 0%
    #####: 1481:  void PrintHeader(std::ostream* ss) const {
    #####: 1482:    *ss << "@@ ";
    %%%%%: 1482-block  0
call    0 never executed
    #####: 1483:    if (removes_) {
branch  0 never executed
branch  1 never executed
    #####: 1484:      *ss << "-" << left_start_ << "," << (removes_ + common_);
    %%%%%: 1484-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1485:    }
    #####: 1486:    if (removes_ && adds_) {
    %%%%%: 1486-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1486-block  1
branch  2 never executed
branch  3 never executed
    #####: 1487:      *ss << " ";
    %%%%%: 1487-block  0
call    0 never executed
        -: 1488:    }
    #####: 1489:    if (adds_) {
    %%%%%: 1489-block  0
branch  0 never executed
branch  1 never executed
    #####: 1490:      *ss << "+" << right_start_ << "," << (adds_ + common_);
    %%%%%: 1490-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1491:    }
    #####: 1492:    *ss << " @@\n";
    %%%%%: 1492-block  0
call    0 never executed
    #####: 1493:  }
        -: 1494:
        -: 1495:  size_t left_start_, right_start_;
        -: 1496:  size_t adds_, removes_, common_;
        -: 1497:  std::list<std::pair<char, const char*> > hunk_, hunk_adds_, hunk_removes_;
        -: 1498:};
        -: 1499:
        -: 1500:}  // namespace
        -: 1501:
        -: 1502:// Create a list of diff hunks in Unified diff format.
        -: 1503:// Each hunk has a header generated by PrintHeader above plus a body with
        -: 1504:// lines prefixed with ' ' for no change, '-' for deletion and '+' for
        -: 1505:// addition.
        -: 1506:// 'context' represents the desired unchanged prefix/suffix around the diff.
        -: 1507:// If two hunks are close enough that their contexts overlap, then they are
        -: 1508:// joined into one hunk.
function _ZN7testing8internal13edit_distance17CreateUnifiedDiffERKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS8_EESC_m called 0 returned 0% blocks executed 0%
    #####: 1509:std::string CreateUnifiedDiff(const std::vector<std::string>& left,
        -: 1510:                              const std::vector<std::string>& right,
        -: 1511:                              size_t context) {
    #####: 1512:  const std::vector<EditType> edits = CalculateOptimalEdits(left, right);
    %%%%%: 1512-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1513:
    #####: 1514:  size_t l_i = 0, r_i = 0, edit_i = 0;
    #####: 1515:  std::stringstream ss;
    %%%%%: 1515-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1516:  while (edit_i < edits.size()) {
    %%%%%: 1516-block  0
    %%%%%: 1516-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1517:    // Find first edit.
    #####: 1518:    while (edit_i < edits.size() && edits[edit_i] == kMatch) {
    %%%%%: 1518-block  0
    %%%%%: 1518-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1518-block  2
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1518-block  3
    %%%%%: 1518-block  4
    %%%%%: 1518-block  5
branch  6 never executed
branch  7 never executed
    #####: 1519:      ++l_i;
    #####: 1520:      ++r_i;
    #####: 1521:      ++edit_i;
    %%%%%: 1521-block  0
        -: 1522:    }
        -: 1523:
        -: 1524:    // Find the first line to include in the hunk.
    #####: 1525:    const size_t prefix_context = std::min(l_i, context);
    %%%%%: 1525-block  0
call    0 never executed
    #####: 1526:    Hunk hunk(l_i - prefix_context + 1, r_i - prefix_context + 1);
call    0 never executed
    #####: 1527:    for (size_t i = prefix_context; i > 0; --i) {
    %%%%%: 1527-block  0
    %%%%%: 1527-block  1
branch  0 never executed
branch  1 never executed
    #####: 1528:      hunk.PushLine(' ', left[l_i - i].c_str());
    %%%%%: 1528-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -: 1529:    }
        -: 1530:
        -: 1531:    // Iterate the edits until we found enough suffix for the hunk or the input
        -: 1532:    // is over.
    #####: 1533:    size_t n_suffix = 0;
    #####: 1534:    for (; edit_i < edits.size(); ++edit_i) {
    %%%%%: 1534-block  0
    %%%%%: 1534-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1535:      if (n_suffix >= context) {
    %%%%%: 1535-block  0
branch  0 never executed
branch  1 never executed
        -: 1536:        // Continue only if the next hunk is very close.
    #####: 1537:        auto it = edits.begin() + static_cast<int>(edit_i);
    %%%%%: 1537-block  0
call    0 never executed
call    1 never executed
    #####: 1538:        while (it != edits.end() && *it == kMatch) ++it;
    %%%%%: 1538-block  0
call    0 never executed
    %%%%%: 1538-block  1
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 1538-block  2
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 1538-block  3
    %%%%%: 1538-block  4
    %%%%%: 1538-block  5
branch  8 never executed
branch  9 never executed
    #####: 1539:        if (it == edits.end() ||
    %%%%%: 1539-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1539-block  1
    %%%%%: 1539-block  2
    #####: 1540:            static_cast<size_t>(it - edits.begin()) - edit_i >= context) {
    %%%%%: 1540-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1540-block  1
branch  4 never executed
branch  5 never executed
        -: 1541:          // There is no next edit or it is too far away.
    #####: 1542:          break;
    %%%%%: 1542-block  0
        -: 1543:        }
        -: 1544:      }
        -: 1545:
    #####: 1546:      EditType edit = edits[edit_i];
    %%%%%: 1546-block  0
call    0 never executed
        -: 1547:      // Reset count when a non match is found.
    #####: 1548:      n_suffix = edit == kMatch ? n_suffix + 1 : 0;
branch  0 never executed
branch  1 never executed
    %%%%%: 1548-block  0
    %%%%%: 1548-block  1
        -: 1549:
    #####: 1550:      if (edit == kMatch || edit == kRemove || edit == kReplace) {
    %%%%%: 1550-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1550-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 1550-block  2
branch  4 never executed
branch  5 never executed
    #####: 1551:        hunk.PushLine(edit == kMatch ? ' ' : '-', left[l_i].c_str());
    %%%%%: 1551-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1551-block  1
    %%%%%: 1551-block  2
    %%%%%: 1551-block  3
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
        -: 1552:      }
    #####: 1553:      if (edit == kAdd || edit == kReplace) {
    %%%%%: 1553-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1553-block  1
branch  2 never executed
branch  3 never executed
    #####: 1554:        hunk.PushLine('+', right[r_i].c_str());
    %%%%%: 1554-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -: 1555:      }
        -: 1556:
        -: 1557:      // Advance indices, depending on edit type.
    #####: 1558:      l_i += edit != kAdd;
    #####: 1559:      r_i += edit != kRemove;
    %%%%%: 1559-block  0
        -: 1560:    }
        -: 1561:
    #####: 1562:    if (!hunk.has_edits()) {
    %%%%%: 1562-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1563:      // We are done. We don't want this hunk.
    #####: 1564:      break;
    %%%%%: 1564-block  0
        -: 1565:    }
        -: 1566:
    #####: 1567:    hunk.PrintTo(&ss);
    %%%%%: 1567-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1568:  }
    %%%%%: 1568-block  0
    %%%%%: 1568-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 1568-block  2
call    3 never executed
    #####: 1569:  return ss.str();
    %%%%%: 1569-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1569-block  1
    #####: 1570:}
    %%%%%: 1570-block  0
call    0 never executed
call    1 never executed
    $$$$$: 1570-block  1
call    2 never executed
    $$$$$: 1570-block  2
call    3 never executed
        -: 1571:
        -: 1572:}  // namespace edit_distance
        -: 1573:
        -: 1574:namespace {
        -: 1575:
        -: 1576:// The string representation of the values received in EqFailure() are already
        -: 1577:// escaped. Split them on escaped '\n' boundaries. Leave all other escaped
        -: 1578:// characters the same.
function _ZN7testing8internal12_GLOBAL__N_118SplitEscapedStringERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 1579:std::vector<std::string> SplitEscapedString(const std::string& str) {
    #####: 1580:  std::vector<std::string> lines;
    #####: 1581:  size_t start = 0, end = str.size();
    %%%%%: 1581-block  0
call    0 never executed
    #####: 1582:  if (end > 2 && str[0] == '"' && str[end - 1] == '"') {
branch  0 never executed
branch  1 never executed
    %%%%%: 1582-block  0
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 1582-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 1582-block  2
    %%%%%: 1582-block  3
    %%%%%: 1582-block  4
branch  8 never executed
branch  9 never executed
    #####: 1583:    ++start;
    #####: 1584:    --end;
    %%%%%: 1584-block  0
        -: 1585:  }
    #####: 1586:  bool escaped = false;
    #####: 1587:  for (size_t i = start; i + 1 < end; ++i) {
    %%%%%: 1587-block  0
    %%%%%: 1587-block  1
    %%%%%: 1587-block  2
branch  0 never executed
branch  1 never executed
    #####: 1588:    if (escaped) {
    %%%%%: 1588-block  0
branch  0 never executed
branch  1 never executed
    #####: 1589:      escaped = false;
    #####: 1590:      if (str[i] == 'n') {
    %%%%%: 1590-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1591:        lines.push_back(str.substr(start, i - start - 1));
    %%%%%: 1591-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1591-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1591-block  2
call    6 never executed
    $$$$$: 1591-block  3
call    7 never executed
    $$$$$: 1591-block  4
    #####: 1592:        start = i + 1;
        -: 1593:      }
        -: 1594:    } else {
    #####: 1595:      escaped = str[i] == '\\';
    %%%%%: 1595-block  0
call    0 never executed
        -: 1596:    }
        -: 1597:  }
    #####: 1598:  lines.push_back(str.substr(start, end - start));
    %%%%%: 1598-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1598-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1598-block  2
call    6 never executed
    $$$$$: 1598-block  3
call    7 never executed
    $$$$$: 1598-block  4
    #####: 1599:  return lines;
    %%%%%: 1599-block  0
    =====: 1600:}
    $$$$$: 1600-block  0
call    0 never executed
        -: 1601:
        -: 1602:}  // namespace
        -: 1603:
        -: 1604:// Constructs and returns the message for an equality assertion
        -: 1605:// (e.g. ASSERT_EQ, EXPECT_STREQ, etc) failure.
        -: 1606://
        -: 1607:// The first four parameters are the expressions used in the assertion
        -: 1608:// and their values, as strings.  For example, for ASSERT_EQ(foo, bar)
        -: 1609:// where foo is 5 and bar is 6, we have:
        -: 1610://
        -: 1611://   lhs_expression: "foo"
        -: 1612://   rhs_expression: "bar"
        -: 1613://   lhs_value:      "5"
        -: 1614://   rhs_value:      "6"
        -: 1615://
        -: 1616:// The ignoring_case parameter is true if and only if the assertion is a
        -: 1617:// *_STRCASEEQ*.  When it's true, the string "Ignoring case" will
        -: 1618:// be inserted into the message.
function _ZN7testing8internal9EqFailureEPKcS2_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_b called 0 returned 0% blocks executed 0%
    #####: 1619:AssertionResult EqFailure(const char* lhs_expression,
        -: 1620:                          const char* rhs_expression,
        -: 1621:                          const std::string& lhs_value,
        -: 1622:                          const std::string& rhs_value, bool ignoring_case) {
    #####: 1623:  Message msg;
    %%%%%: 1623-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1624:  msg << "Expected equality of these values:";
    %%%%%: 1624-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1625:  msg << "\n  " << lhs_expression;
    %%%%%: 1625-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1625-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1626:  if (lhs_value != lhs_expression) {
    %%%%%: 1626-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1627:    msg << "\n    Which is: " << lhs_value;
    %%%%%: 1627-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1627-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 1628:  }
    #####: 1629:  msg << "\n  " << rhs_expression;
    %%%%%: 1629-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1629-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1630:  if (rhs_value != rhs_expression) {
    %%%%%: 1630-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1631:    msg << "\n    Which is: " << rhs_value;
    %%%%%: 1631-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1631-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 1632:  }
        -: 1633:
    #####: 1634:  if (ignoring_case) {
    %%%%%: 1634-block  0
branch  0 never executed
branch  1 never executed
    #####: 1635:    msg << "\nIgnoring case";
    %%%%%: 1635-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1636:  }
        -: 1637:
    #####: 1638:  if (!lhs_value.empty() && !rhs_value.empty()) {
    %%%%%: 1638-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1638-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1638-block  2
    %%%%%: 1638-block  3
    %%%%%: 1638-block  4
branch  6 never executed
branch  7 never executed
    #####: 1639:    const std::vector<std::string> lhs_lines = SplitEscapedString(lhs_value);
    %%%%%: 1639-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1640:    const std::vector<std::string> rhs_lines = SplitEscapedString(rhs_value);
    %%%%%: 1640-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1641:    if (lhs_lines.size() > 1 || rhs_lines.size() > 1) {
    %%%%%: 1641-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1641-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1641-block  2
    %%%%%: 1641-block  3
    %%%%%: 1641-block  4
branch  6 never executed
branch  7 never executed
    #####: 1642:      msg << "\nWith diff:\n"
    %%%%%: 1642-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1643:          << edit_distance::CreateUnifiedDiff(lhs_lines, rhs_lines);
    %%%%%: 1643-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1643-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1643-block  2
call    6 never executed
    $$$$$: 1643-block  3
call    7 never executed
    $$$$$: 1643-block  4
        -: 1644:    }
    #####: 1645:  }
    %%%%%: 1645-block  0
call    0 never executed
call    1 never executed
    $$$$$: 1645-block  1
call    2 never executed
    $$$$$: 1645-block  2
call    3 never executed
        -: 1646:
    #####: 1647:  return AssertionFailure() << msg;
    %%%%%: 1647-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1647-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1647-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1647-block  3
call    9 never executed
    %%%%%: 1647-block  4
    $$$$$: 1647-block  5
call   10 never executed
    $$$$$: 1647-block  6
    #####: 1648:}
call    0 never executed
    $$$$$: 1648-block  0
call    1 never executed
        -: 1649:
        -: 1650:// Constructs a failure message for Boolean assertions such as EXPECT_TRUE.
function _ZN7testing8internal30GetBoolAssertionFailureMessageB5cxx11ERKNS_15AssertionResultEPKcS5_S5_ called 0 returned 0% blocks executed 0%
    #####: 1651:std::string GetBoolAssertionFailureMessage(
        -: 1652:    const AssertionResult& assertion_result, const char* expression_text,
        -: 1653:    const char* actual_predicate_value, const char* expected_predicate_value) {
    #####: 1654:  const char* actual_message = assertion_result.message();
    %%%%%: 1654-block  0
call    0 never executed
    #####: 1655:  Message msg;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1656:  msg << "Value of: " << expression_text
    %%%%%: 1656-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1656-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1657:      << "\n  Actual: " << actual_predicate_value;
    %%%%%: 1657-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1657-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1658:  if (actual_message[0] != '\0') msg << " (" << actual_message << ")";
    %%%%%: 1658-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1658-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 1658-block  2
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 1658-block  3
call    8 never executed
branch  9 never executed
branch 10 never executed
    #####: 1659:  msg << "\nExpected: " << expected_predicate_value;
    %%%%%: 1659-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1659-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1660:  return msg.GetString();
    %%%%%: 1660-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1660-block  1
    #####: 1661:}
    %%%%%: 1661-block  0
call    0 never executed
    $$$$$: 1661-block  1
call    1 never executed
        -: 1662:
        -: 1663:// Helper function for implementing ASSERT_NEAR. Treats infinity as a specific
        -: 1664:// value, such that comparing infinity to infinity is equal, the distance
        -: 1665:// between -infinity and +infinity is infinity, and infinity <= infinity is
        -: 1666:// true.
function _ZN7testing8internal20DoubleNearPredFormatEPKcS2_S2_ddd called 0 returned 0% blocks executed 0%
    #####: 1667:AssertionResult DoubleNearPredFormat(const char* expr1, const char* expr2,
        -: 1668:                                     const char* abs_error_expr, double val1,
        -: 1669:                                     double val2, double abs_error) {
        -: 1670:  // We want to return success when the two values are infinity and at least
        -: 1671:  // one of the following is true:
        -: 1672:  //  * The values are the same-signed infinity.
        -: 1673:  //  * The error limit itself is infinity.
        -: 1674:  // This is done here so that we don't end up with a NaN when calculating the
        -: 1675:  // difference in values.
    #####: 1676:  if (std::isinf(val1) && std::isinf(val2) &&
    %%%%%: 1676-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1676-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 1676-block  2
    %%%%%: 1676-block  3
    %%%%%: 1676-block  4
branch  8 never executed
branch  9 never executed
    #####: 1677:      (std::signbit(val1) == std::signbit(val2) ||
    %%%%%: 1677-block  0
call    0 never executed
call    1 never executed
    #####: 1678:       (abs_error > 0.0 && std::isinf(abs_error)))) {
    %%%%%: 1678-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1678-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1679:    return AssertionSuccess();
    %%%%%: 1679-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1680:  }
        -: 1681:
    #####: 1682:  const double diff = fabs(val1 - val2);
    #####: 1683:  if (diff <= abs_error) return AssertionSuccess();
    %%%%%: 1683-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1683-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
        -: 1684:
        -: 1685:  // Find the value which is closest to zero.
    #####: 1686:  const double min_abs = std::min(fabs(val1), fabs(val2));
    %%%%%: 1686-block  0
call    0 never executed
        -: 1687:  // Find the distance to the next double from that value.
        -: 1688:  const double epsilon =
    #####: 1689:      nextafter(min_abs, std::numeric_limits<double>::infinity()) - min_abs;
call    0 never executed
        -: 1690:  // Detect the case where abs_error is so small that EXPECT_NEAR is
        -: 1691:  // effectively the same as EXPECT_EQUAL, and give an informative error
        -: 1692:  // message so that the situation can be more easily understood without
        -: 1693:  // requiring exotic floating-point knowledge.
        -: 1694:  // Don't do an epsilon check if abs_error is zero because that implies
        -: 1695:  // that an equality check was actually intended.
    #####: 1696:  if (!(std::isnan)(val1) && !(std::isnan)(val2) && abs_error > 0 &&
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1696-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1696-block  1
branch  6 never executed
branch  7 never executed
    %%%%%: 1696-block  2
    %%%%%: 1696-block  3
    %%%%%: 1696-block  4
branch  8 never executed
branch  9 never executed
    #####: 1697:      abs_error < epsilon) {
    %%%%%: 1697-block  0
branch  0 never executed
branch  1 never executed
    #####: 1698:    return AssertionFailure()
    %%%%%: 1698-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1698-block  1
call    3 never executed
    $$$$$: 1698-block  2
call    4 never executed
    $$$$$: 1698-block  3
    #####: 1699:           << "The difference between " << expr1 << " and " << expr2 << " is "
    %%%%%: 1699-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1699-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1699-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1699-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1699-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    #####: 1700:           << diff << ", where\n"
    %%%%%: 1700-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1700-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1701:           << expr1 << " evaluates to " << val1 << ",\n"
    %%%%%: 1701-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1701-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1701-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1701-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1702:           << expr2 << " evaluates to " << val2 << ".\nThe abs_error parameter "
    %%%%%: 1702-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1702-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1702-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1702-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1703:           << abs_error_expr << " evaluates to " << abs_error
    %%%%%: 1703-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1703-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1703-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
        -: 1704:           << " which is smaller than the minimum distance between doubles for "
    #####: 1705:              "numbers of this magnitude which is "
    %%%%%: 1705-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1706:           << epsilon
    %%%%%: 1706-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1707:           << ", thus making this EXPECT_NEAR check equivalent to "
    #####: 1708:              "EXPECT_EQUAL. Consider using EXPECT_DOUBLE_EQ instead.";
    %%%%%: 1708-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1708-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 1709:  }
    #####: 1710:  return AssertionFailure()
    %%%%%: 1710-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1710-block  1
call    3 never executed
    $$$$$: 1710-block  2
call    4 never executed
    $$$$$: 1710-block  3
    #####: 1711:         << "The difference between " << expr1 << " and " << expr2 << " is "
    %%%%%: 1711-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1711-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1711-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1711-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1711-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    #####: 1712:         << diff << ", which exceeds " << abs_error_expr << ", where\n"
    %%%%%: 1712-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1712-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1712-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1712-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1713:         << expr1 << " evaluates to " << val1 << ",\n"
    %%%%%: 1713-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1713-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1713-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1713-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1714:         << expr2 << " evaluates to " << val2 << ", and\n"
    %%%%%: 1714-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1714-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1714-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1714-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1715:         << abs_error_expr << " evaluates to " << abs_error << ".";
    %%%%%: 1715-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1715-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1715-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1715-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1715-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
        -: 1716:}
        -: 1717:
        -: 1718:// Helper template for implementing FloatLE() and DoubleLE().
        -: 1719:template <typename RawType>
    #####: 1720:AssertionResult FloatingPointLE(const char* expr1, const char* expr2,
        -: 1721:                                RawType val1, RawType val2) {
        -: 1722:  // Returns success if val1 is less than val2,
    #####: 1723:  if (val1 < val2) {
    #####: 1724:    return AssertionSuccess();
        -: 1725:  }
        -: 1726:
        -: 1727:  // or if val1 is almost equal to val2.
    #####: 1728:  const FloatingPoint<RawType> lhs(val1), rhs(val2);
    #####: 1729:  if (lhs.AlmostEquals(rhs)) {
    #####: 1730:    return AssertionSuccess();
        -: 1731:  }
        -: 1732:
        -: 1733:  // Note that the above two checks will both fail if either val1 or
        -: 1734:  // val2 is NaN, as the IEEE floating-point standard requires that
        -: 1735:  // any predicate involving a NaN must return false.
        -: 1736:
    #####: 1737:  ::std::stringstream val1_ss;
    #####: 1738:  val1_ss << std::setprecision(std::numeric_limits<RawType>::digits10 + 2)
    #####: 1739:          << val1;
        -: 1740:
    #####: 1741:  ::std::stringstream val2_ss;
    #####: 1742:  val2_ss << std::setprecision(std::numeric_limits<RawType>::digits10 + 2)
    #####: 1743:          << val2;
        -: 1744:
        -: 1745:  return AssertionFailure()
    #####: 1746:         << "Expected: (" << expr1 << ") <= (" << expr2 << ")\n"
    #####: 1747:         << "  Actual: " << StringStreamToString(&val1_ss) << " vs "
    #####: 1748:         << StringStreamToString(&val2_ss);
    #####: 1749:}
------------------
_ZN7testing8internal15FloatingPointLEIdEENS_15AssertionResultEPKcS4_T_S5_:
function _ZN7testing8internal15FloatingPointLEIdEENS_15AssertionResultEPKcS4_T_S5_ called 0 returned 0% blocks executed 0%
    #####: 1720:AssertionResult FloatingPointLE(const char* expr1, const char* expr2,
        -: 1721:                                RawType val1, RawType val2) {
        -: 1722:  // Returns success if val1 is less than val2,
    #####: 1723:  if (val1 < val2) {
    %%%%%: 1723-block  0
branch  0 never executed
branch  1 never executed
    #####: 1724:    return AssertionSuccess();
    %%%%%: 1724-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1725:  }
        -: 1726:
        -: 1727:  // or if val1 is almost equal to val2.
    #####: 1728:  const FloatingPoint<RawType> lhs(val1), rhs(val2);
    %%%%%: 1728-block  0
call    0 never executed
call    1 never executed
    #####: 1729:  if (lhs.AlmostEquals(rhs)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1729-block  0
branch  3 never executed
branch  4 never executed
    #####: 1730:    return AssertionSuccess();
    %%%%%: 1730-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1731:  }
        -: 1732:
        -: 1733:  // Note that the above two checks will both fail if either val1 or
        -: 1734:  // val2 is NaN, as the IEEE floating-point standard requires that
        -: 1735:  // any predicate involving a NaN must return false.
        -: 1736:
    #####: 1737:  ::std::stringstream val1_ss;
    %%%%%: 1737-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1738:  val1_ss << std::setprecision(std::numeric_limits<RawType>::digits10 + 2)
    %%%%%: 1738-block  0
call    0 never executed
call    1 never executed
    #####: 1739:          << val1;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1740:
    #####: 1741:  ::std::stringstream val2_ss;
    %%%%%: 1741-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1742:  val2_ss << std::setprecision(std::numeric_limits<RawType>::digits10 + 2)
    %%%%%: 1742-block  0
call    0 never executed
call    1 never executed
    #####: 1743:          << val2;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1744:
        -: 1745:  return AssertionFailure()
    #####: 1746:         << "Expected: (" << expr1 << ") <= (" << expr2 << ")\n"
    %%%%%: 1746-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1746-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1746-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1746-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1746-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 1746-block  5
call   15 never executed
branch 16 never executed
branch 17 never executed
    $$$$$: 1746-block  6
call   18 never executed
    $$$$$: 1746-block  7
    #####: 1747:         << "  Actual: " << StringStreamToString(&val1_ss) << " vs "
    %%%%%: 1747-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1747-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1747-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1747-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
    $$$$$: 1747-block  4
call   13 never executed
    $$$$$: 1747-block  5
    #####: 1748:         << StringStreamToString(&val2_ss);
    %%%%%: 1748-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1748-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1748-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1748-block  3
call    9 never executed
call   10 never executed
    $$$$$: 1748-block  4
call   11 never executed
    $$$$$: 1748-block  5
    #####: 1749:}
call    0 never executed
call    1 never executed
    $$$$$: 1749-block  0
call    2 never executed
    $$$$$: 1749-block  1
call    3 never executed
------------------
_ZN7testing8internal15FloatingPointLEIfEENS_15AssertionResultEPKcS4_T_S5_:
function _ZN7testing8internal15FloatingPointLEIfEENS_15AssertionResultEPKcS4_T_S5_ called 0 returned 0% blocks executed 0%
    #####: 1720:AssertionResult FloatingPointLE(const char* expr1, const char* expr2,
        -: 1721:                                RawType val1, RawType val2) {
        -: 1722:  // Returns success if val1 is less than val2,
    #####: 1723:  if (val1 < val2) {
    %%%%%: 1723-block  0
branch  0 never executed
branch  1 never executed
    #####: 1724:    return AssertionSuccess();
    %%%%%: 1724-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1725:  }
        -: 1726:
        -: 1727:  // or if val1 is almost equal to val2.
    #####: 1728:  const FloatingPoint<RawType> lhs(val1), rhs(val2);
    %%%%%: 1728-block  0
call    0 never executed
call    1 never executed
    #####: 1729:  if (lhs.AlmostEquals(rhs)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1729-block  0
branch  3 never executed
branch  4 never executed
    #####: 1730:    return AssertionSuccess();
    %%%%%: 1730-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1731:  }
        -: 1732:
        -: 1733:  // Note that the above two checks will both fail if either val1 or
        -: 1734:  // val2 is NaN, as the IEEE floating-point standard requires that
        -: 1735:  // any predicate involving a NaN must return false.
        -: 1736:
    #####: 1737:  ::std::stringstream val1_ss;
    %%%%%: 1737-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1738:  val1_ss << std::setprecision(std::numeric_limits<RawType>::digits10 + 2)
    %%%%%: 1738-block  0
call    0 never executed
call    1 never executed
    #####: 1739:          << val1;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1740:
    #####: 1741:  ::std::stringstream val2_ss;
    %%%%%: 1741-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1742:  val2_ss << std::setprecision(std::numeric_limits<RawType>::digits10 + 2)
    %%%%%: 1742-block  0
call    0 never executed
call    1 never executed
    #####: 1743:          << val2;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1744:
        -: 1745:  return AssertionFailure()
    #####: 1746:         << "Expected: (" << expr1 << ") <= (" << expr2 << ")\n"
    %%%%%: 1746-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1746-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1746-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1746-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1746-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 1746-block  5
call   15 never executed
branch 16 never executed
branch 17 never executed
    $$$$$: 1746-block  6
call   18 never executed
    $$$$$: 1746-block  7
    #####: 1747:         << "  Actual: " << StringStreamToString(&val1_ss) << " vs "
    %%%%%: 1747-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1747-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1747-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1747-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
    $$$$$: 1747-block  4
call   13 never executed
    $$$$$: 1747-block  5
    #####: 1748:         << StringStreamToString(&val2_ss);
    %%%%%: 1748-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1748-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1748-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1748-block  3
call    9 never executed
call   10 never executed
    $$$$$: 1748-block  4
call   11 never executed
    $$$$$: 1748-block  5
    #####: 1749:}
call    0 never executed
call    1 never executed
    $$$$$: 1749-block  0
call    2 never executed
    $$$$$: 1749-block  1
call    3 never executed
------------------
        -: 1750:
        -: 1751:}  // namespace internal
        -: 1752:
        -: 1753:// Asserts that val1 is less than, or almost equal to, val2.  Fails
        -: 1754:// otherwise.  In particular, it fails if either val1 or val2 is NaN.
function _ZN7testing7FloatLEEPKcS1_ff called 0 returned 0% blocks executed 0%
    #####: 1755:AssertionResult FloatLE(const char* expr1, const char* expr2, float val1,
        -: 1756:                        float val2) {
    #####: 1757:  return internal::FloatingPointLE<float>(expr1, expr2, val1, val2);
    %%%%%: 1757-block  0
call    0 never executed
        -: 1758:}
        -: 1759:
        -: 1760:// Asserts that val1 is less than, or almost equal to, val2.  Fails
        -: 1761:// otherwise.  In particular, it fails if either val1 or val2 is NaN.
function _ZN7testing8DoubleLEEPKcS1_dd called 0 returned 0% blocks executed 0%
    #####: 1762:AssertionResult DoubleLE(const char* expr1, const char* expr2, double val1,
        -: 1763:                         double val2) {
    #####: 1764:  return internal::FloatingPointLE<double>(expr1, expr2, val1, val2);
    %%%%%: 1764-block  0
call    0 never executed
        -: 1765:}
        -: 1766:
        -: 1767:namespace internal {
        -: 1768:
        -: 1769:// The helper function for {ASSERT|EXPECT}_STREQ.
function _ZN7testing8internal14CmpHelperSTREQEPKcS2_S2_S2_ called 0 returned 0% blocks executed 0%
    #####: 1770:AssertionResult CmpHelperSTREQ(const char* lhs_expression,
        -: 1771:                               const char* rhs_expression, const char* lhs,
        -: 1772:                               const char* rhs) {
    #####: 1773:  if (String::CStringEquals(lhs, rhs)) {
    %%%%%: 1773-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1774:    return AssertionSuccess();
    %%%%%: 1774-block  0
call    0 never executed
        -: 1775:  }
        -: 1776:
    #####: 1777:  return EqFailure(lhs_expression, rhs_expression, PrintToString(lhs),
    %%%%%: 1777-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 1777-block  1
call    3 never executed
    #####: 1778:                   PrintToString(rhs), false);
    %%%%%: 1778-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1778-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1778-block  2
call    6 never executed
call    7 never executed
    $$$$$: 1778-block  3
call    8 never executed
    $$$$$: 1778-block  4
        -: 1779:}
        -: 1780:
        -: 1781:// The helper function for {ASSERT|EXPECT}_STRCASEEQ.
function _ZN7testing8internal18CmpHelperSTRCASEEQEPKcS2_S2_S2_ called 0 returned 0% blocks executed 0%
    #####: 1782:AssertionResult CmpHelperSTRCASEEQ(const char* lhs_expression,
        -: 1783:                                   const char* rhs_expression, const char* lhs,
        -: 1784:                                   const char* rhs) {
    #####: 1785:  if (String::CaseInsensitiveCStringEquals(lhs, rhs)) {
    %%%%%: 1785-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1786:    return AssertionSuccess();
    %%%%%: 1786-block  0
call    0 never executed
        -: 1787:  }
        -: 1788:
    #####: 1789:  return EqFailure(lhs_expression, rhs_expression, PrintToString(lhs),
    %%%%%: 1789-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 1789-block  1
call    3 never executed
    #####: 1790:                   PrintToString(rhs), true);
    %%%%%: 1790-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1790-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1790-block  2
call    6 never executed
call    7 never executed
    $$$$$: 1790-block  3
call    8 never executed
    $$$$$: 1790-block  4
        -: 1791:}
        -: 1792:
        -: 1793:// The helper function for {ASSERT|EXPECT}_STRNE.
function _ZN7testing8internal14CmpHelperSTRNEEPKcS2_S2_S2_ called 0 returned 0% blocks executed 0%
    #####: 1794:AssertionResult CmpHelperSTRNE(const char* s1_expression,
        -: 1795:                               const char* s2_expression, const char* s1,
        -: 1796:                               const char* s2) {
    #####: 1797:  if (!String::CStringEquals(s1, s2)) {
    %%%%%: 1797-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1798:    return AssertionSuccess();
    %%%%%: 1798-block  0
call    0 never executed
        -: 1799:  } else {
    #####: 1800:    return AssertionFailure()
    %%%%%: 1800-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1800-block  1
call    3 never executed
    $$$$$: 1800-block  2
call    4 never executed
    #####: 1801:           << "Expected: (" << s1_expression << ") != (" << s2_expression
    %%%%%: 1801-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1801-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1801-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1801-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1802:           << "), actual: \"" << s1 << "\" vs \"" << s2 << "\"";
    %%%%%: 1802-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1802-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1802-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1802-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1802-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 1802-block  5
call   15 never executed
branch 16 never executed
branch 17 never executed
        -: 1803:  }
        -: 1804:}
        -: 1805:
        -: 1806:// The helper function for {ASSERT|EXPECT}_STRCASENE.
function _ZN7testing8internal18CmpHelperSTRCASENEEPKcS2_S2_S2_ called 0 returned 0% blocks executed 0%
    #####: 1807:AssertionResult CmpHelperSTRCASENE(const char* s1_expression,
        -: 1808:                                   const char* s2_expression, const char* s1,
        -: 1809:                                   const char* s2) {
    #####: 1810:  if (!String::CaseInsensitiveCStringEquals(s1, s2)) {
    %%%%%: 1810-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1811:    return AssertionSuccess();
    %%%%%: 1811-block  0
call    0 never executed
        -: 1812:  } else {
    #####: 1813:    return AssertionFailure()
    %%%%%: 1813-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1813-block  1
call    3 never executed
    $$$$$: 1813-block  2
call    4 never executed
    #####: 1814:           << "Expected: (" << s1_expression << ") != (" << s2_expression
    %%%%%: 1814-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1814-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1814-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1814-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1815:           << ") (ignoring case), actual: \"" << s1 << "\" vs \"" << s2 << "\"";
    %%%%%: 1815-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1815-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1815-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1815-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1815-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 1815-block  5
call   15 never executed
branch 16 never executed
branch 17 never executed
        -: 1816:  }
        -: 1817:}
        -: 1818:
        -: 1819:}  // namespace internal
        -: 1820:
        -: 1821:namespace {
        -: 1822:
        -: 1823:// Helper functions for implementing IsSubString() and IsNotSubstring().
        -: 1824:
        -: 1825:// This group of overloaded functions return true if and only if needle
        -: 1826:// is a substring of haystack.  NULL is considered a substring of
        -: 1827:// itself only.
        -: 1828:
function _ZN7testing12_GLOBAL__N_115IsSubstringPredEPKcS2_ called 0 returned 0% blocks executed 0%
    #####: 1829:bool IsSubstringPred(const char* needle, const char* haystack) {
    #####: 1830:  if (needle == nullptr || haystack == nullptr) return needle == haystack;
    %%%%%: 1830-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1830-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 1830-block  2
        -: 1831:
    #####: 1832:  return strstr(haystack, needle) != nullptr;
    %%%%%: 1832-block  0
        -: 1833:}
        -: 1834:
function _ZN7testing12_GLOBAL__N_115IsSubstringPredEPKwS2_ called 0 returned 0% blocks executed 0%
    #####: 1835:bool IsSubstringPred(const wchar_t* needle, const wchar_t* haystack) {
    #####: 1836:  if (needle == nullptr || haystack == nullptr) return needle == haystack;
    %%%%%: 1836-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1836-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 1836-block  2
        -: 1837:
    #####: 1838:  return wcsstr(haystack, needle) != nullptr;
    %%%%%: 1838-block  0
call    0 never executed
        -: 1839:}
        -: 1840:
        -: 1841:// StringType here can be either ::std::string or ::std::wstring.
        -: 1842:template <typename StringType>
    #####: 1843:bool IsSubstringPred(const StringType& needle, const StringType& haystack) {
    #####: 1844:  return haystack.find(needle) != StringType::npos;
        -: 1845:}
------------------
_ZN7testing12_GLOBAL__N_115IsSubstringPredINSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEEbRKT_SA_:
function _ZN7testing12_GLOBAL__N_115IsSubstringPredINSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEEbRKT_SA_ called 0 returned 0% blocks executed 0%
    #####: 1843:bool IsSubstringPred(const StringType& needle, const StringType& haystack) {
    #####: 1844:  return haystack.find(needle) != StringType::npos;
    %%%%%: 1844-block  0
call    0 never executed
        -: 1845:}
------------------
_ZN7testing12_GLOBAL__N_115IsSubstringPredINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT_SA_:
function _ZN7testing12_GLOBAL__N_115IsSubstringPredINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT_SA_ called 0 returned 0% blocks executed 0%
    #####: 1843:bool IsSubstringPred(const StringType& needle, const StringType& haystack) {
    #####: 1844:  return haystack.find(needle) != StringType::npos;
    %%%%%: 1844-block  0
call    0 never executed
        -: 1845:}
------------------
        -: 1846:
        -: 1847:// This function implements either IsSubstring() or IsNotSubstring(),
        -: 1848:// depending on the value of the expected_to_be_substring parameter.
        -: 1849:// StringType here can be const char*, const wchar_t*, ::std::string,
        -: 1850:// or ::std::wstring.
        -: 1851:template <typename StringType>
    #####: 1852:AssertionResult IsSubstringImpl(bool expected_to_be_substring,
        -: 1853:                                const char* needle_expr,
        -: 1854:                                const char* haystack_expr,
        -: 1855:                                const StringType& needle,
        -: 1856:                                const StringType& haystack) {
    #####: 1857:  if (IsSubstringPred(needle, haystack) == expected_to_be_substring)
    #####: 1858:    return AssertionSuccess();
        -: 1859:
    #####: 1860:  const bool is_wide_string = sizeof(needle[0]) > 1;
    #####: 1861:  const char* const begin_string_quote = is_wide_string ? "L\"" : "\"";
        -: 1862:  return AssertionFailure()
    #####: 1863:         << "Value of: " << needle_expr << "\n"
    #####: 1864:         << "  Actual: " << begin_string_quote << needle << "\"\n"
    #####: 1865:         << "Expected: " << (expected_to_be_substring ? "" : "not ")
    #####: 1866:         << "a substring of " << haystack_expr << "\n"
    #####: 1867:         << "Which is: " << begin_string_quote << haystack << "\"";
        -: 1868:}
------------------
_ZN7testing12_GLOBAL__N_115IsSubstringImplINSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEENS_15AssertionResultEbPKcSA_RKT_SD_:
function _ZN7testing12_GLOBAL__N_115IsSubstringImplINSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEENS_15AssertionResultEbPKcSA_RKT_SD_ called 0 returned 0% blocks executed 0%
    #####: 1852:AssertionResult IsSubstringImpl(bool expected_to_be_substring,
        -: 1853:                                const char* needle_expr,
        -: 1854:                                const char* haystack_expr,
        -: 1855:                                const StringType& needle,
        -: 1856:                                const StringType& haystack) {
    #####: 1857:  if (IsSubstringPred(needle, haystack) == expected_to_be_substring)
    %%%%%: 1857-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1858:    return AssertionSuccess();
    %%%%%: 1858-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1859:
    #####: 1860:  const bool is_wide_string = sizeof(needle[0]) > 1;
    #####: 1861:  const char* const begin_string_quote = is_wide_string ? "L\"" : "\"";
        -: 1862:  return AssertionFailure()
    #####: 1863:         << "Value of: " << needle_expr << "\n"
    %%%%%: 1863-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1863-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1863-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1863-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    $$$$$: 1863-block  4
call   12 never executed
    $$$$$: 1863-block  5
    #####: 1864:         << "  Actual: " << begin_string_quote << needle << "\"\n"
    %%%%%: 1864-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1864-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1864-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1864-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1865:         << "Expected: " << (expected_to_be_substring ? "" : "not ")
    %%%%%: 1865-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1865-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 1865-block  2
    %%%%%: 1865-block  3
    %%%%%: 1865-block  4
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 1865-block  5
call    8 never executed
    $$$$$: 1865-block  6
    #####: 1866:         << "a substring of " << haystack_expr << "\n"
    %%%%%: 1866-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1866-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1866-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1867:         << "Which is: " << begin_string_quote << haystack << "\"";
    %%%%%: 1867-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1867-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1867-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1867-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1867-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
        -: 1868:}
------------------
_ZN7testing12_GLOBAL__N_115IsSubstringImplINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_15AssertionResultEbPKcSA_RKT_SD_:
function _ZN7testing12_GLOBAL__N_115IsSubstringImplINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_15AssertionResultEbPKcSA_RKT_SD_ called 0 returned 0% blocks executed 0%
    #####: 1852:AssertionResult IsSubstringImpl(bool expected_to_be_substring,
        -: 1853:                                const char* needle_expr,
        -: 1854:                                const char* haystack_expr,
        -: 1855:                                const StringType& needle,
        -: 1856:                                const StringType& haystack) {
    #####: 1857:  if (IsSubstringPred(needle, haystack) == expected_to_be_substring)
    %%%%%: 1857-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1858:    return AssertionSuccess();
    %%%%%: 1858-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1859:
    #####: 1860:  const bool is_wide_string = sizeof(needle[0]) > 1;
    #####: 1861:  const char* const begin_string_quote = is_wide_string ? "L\"" : "\"";
        -: 1862:  return AssertionFailure()
    #####: 1863:         << "Value of: " << needle_expr << "\n"
    %%%%%: 1863-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1863-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1863-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1863-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    $$$$$: 1863-block  4
call   12 never executed
    $$$$$: 1863-block  5
    #####: 1864:         << "  Actual: " << begin_string_quote << needle << "\"\n"
    %%%%%: 1864-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1864-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1864-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1864-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1865:         << "Expected: " << (expected_to_be_substring ? "" : "not ")
    %%%%%: 1865-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1865-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 1865-block  2
    %%%%%: 1865-block  3
    %%%%%: 1865-block  4
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 1865-block  5
call    8 never executed
    $$$$$: 1865-block  6
    #####: 1866:         << "a substring of " << haystack_expr << "\n"
    %%%%%: 1866-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1866-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1866-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1867:         << "Which is: " << begin_string_quote << haystack << "\"";
    %%%%%: 1867-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1867-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1867-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1867-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1867-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
        -: 1868:}
------------------
_ZN7testing12_GLOBAL__N_115IsSubstringImplIPKwEENS_15AssertionResultEbPKcS6_RKT_S9_:
function _ZN7testing12_GLOBAL__N_115IsSubstringImplIPKwEENS_15AssertionResultEbPKcS6_RKT_S9_ called 0 returned 0% blocks executed 0%
    #####: 1852:AssertionResult IsSubstringImpl(bool expected_to_be_substring,
        -: 1853:                                const char* needle_expr,
        -: 1854:                                const char* haystack_expr,
        -: 1855:                                const StringType& needle,
        -: 1856:                                const StringType& haystack) {
    #####: 1857:  if (IsSubstringPred(needle, haystack) == expected_to_be_substring)
    %%%%%: 1857-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1858:    return AssertionSuccess();
    %%%%%: 1858-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1859:
    #####: 1860:  const bool is_wide_string = sizeof(needle[0]) > 1;
    #####: 1861:  const char* const begin_string_quote = is_wide_string ? "L\"" : "\"";
        -: 1862:  return AssertionFailure()
    #####: 1863:         << "Value of: " << needle_expr << "\n"
    %%%%%: 1863-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1863-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1863-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1863-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    $$$$$: 1863-block  4
call   12 never executed
    $$$$$: 1863-block  5
    #####: 1864:         << "  Actual: " << begin_string_quote << needle << "\"\n"
    %%%%%: 1864-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1864-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1864-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1864-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1865:         << "Expected: " << (expected_to_be_substring ? "" : "not ")
    %%%%%: 1865-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1865-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 1865-block  2
    %%%%%: 1865-block  3
    %%%%%: 1865-block  4
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 1865-block  5
call    8 never executed
    $$$$$: 1865-block  6
    #####: 1866:         << "a substring of " << haystack_expr << "\n"
    %%%%%: 1866-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1866-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1866-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1867:         << "Which is: " << begin_string_quote << haystack << "\"";
    %%%%%: 1867-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1867-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1867-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1867-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1867-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
        -: 1868:}
------------------
_ZN7testing12_GLOBAL__N_115IsSubstringImplIPKcEENS_15AssertionResultEbS3_S3_RKT_S7_:
function _ZN7testing12_GLOBAL__N_115IsSubstringImplIPKcEENS_15AssertionResultEbS3_S3_RKT_S7_ called 0 returned 0% blocks executed 0%
    #####: 1852:AssertionResult IsSubstringImpl(bool expected_to_be_substring,
        -: 1853:                                const char* needle_expr,
        -: 1854:                                const char* haystack_expr,
        -: 1855:                                const StringType& needle,
        -: 1856:                                const StringType& haystack) {
    #####: 1857:  if (IsSubstringPred(needle, haystack) == expected_to_be_substring)
    %%%%%: 1857-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1858:    return AssertionSuccess();
    %%%%%: 1858-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1859:
    #####: 1860:  const bool is_wide_string = sizeof(needle[0]) > 1;
    #####: 1861:  const char* const begin_string_quote = is_wide_string ? "L\"" : "\"";
        -: 1862:  return AssertionFailure()
    #####: 1863:         << "Value of: " << needle_expr << "\n"
    %%%%%: 1863-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1863-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1863-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1863-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    $$$$$: 1863-block  4
call   12 never executed
    $$$$$: 1863-block  5
    #####: 1864:         << "  Actual: " << begin_string_quote << needle << "\"\n"
    %%%%%: 1864-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1864-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1864-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1864-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1865:         << "Expected: " << (expected_to_be_substring ? "" : "not ")
    %%%%%: 1865-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1865-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 1865-block  2
    %%%%%: 1865-block  3
    %%%%%: 1865-block  4
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 1865-block  5
call    8 never executed
    $$$$$: 1865-block  6
    #####: 1866:         << "a substring of " << haystack_expr << "\n"
    %%%%%: 1866-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1866-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1866-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1867:         << "Which is: " << begin_string_quote << haystack << "\"";
    %%%%%: 1867-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1867-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1867-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1867-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1867-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
        -: 1868:}
------------------
        -: 1869:
        -: 1870:}  // namespace
        -: 1871:
        -: 1872:// IsSubstring() and IsNotSubstring() check whether needle is a
        -: 1873:// substring of haystack (NULL is considered a substring of itself
        -: 1874:// only), and return an appropriate error message when they fail.
        -: 1875:
function _ZN7testing11IsSubstringEPKcS1_S1_S1_ called 0 returned 0% blocks executed 0%
    #####: 1876:AssertionResult IsSubstring(const char* needle_expr, const char* haystack_expr,
        -: 1877:                            const char* needle, const char* haystack) {
    #####: 1878:  return IsSubstringImpl(true, needle_expr, haystack_expr, needle, haystack);
    %%%%%: 1878-block  0
call    0 never executed
        -: 1879:}
        -: 1880:
function _ZN7testing11IsSubstringEPKcS1_PKwS3_ called 0 returned 0% blocks executed 0%
    #####: 1881:AssertionResult IsSubstring(const char* needle_expr, const char* haystack_expr,
        -: 1882:                            const wchar_t* needle, const wchar_t* haystack) {
    #####: 1883:  return IsSubstringImpl(true, needle_expr, haystack_expr, needle, haystack);
    %%%%%: 1883-block  0
call    0 never executed
        -: 1884:}
        -: 1885:
function _ZN7testing14IsNotSubstringEPKcS1_S1_S1_ called 0 returned 0% blocks executed 0%
    #####: 1886:AssertionResult IsNotSubstring(const char* needle_expr,
        -: 1887:                               const char* haystack_expr, const char* needle,
        -: 1888:                               const char* haystack) {
    #####: 1889:  return IsSubstringImpl(false, needle_expr, haystack_expr, needle, haystack);
    %%%%%: 1889-block  0
call    0 never executed
        -: 1890:}
        -: 1891:
function _ZN7testing14IsNotSubstringEPKcS1_PKwS3_ called 0 returned 0% blocks executed 0%
    #####: 1892:AssertionResult IsNotSubstring(const char* needle_expr,
        -: 1893:                               const char* haystack_expr, const wchar_t* needle,
        -: 1894:                               const wchar_t* haystack) {
    #####: 1895:  return IsSubstringImpl(false, needle_expr, haystack_expr, needle, haystack);
    %%%%%: 1895-block  0
call    0 never executed
        -: 1896:}
        -: 1897:
function _ZN7testing11IsSubstringEPKcS1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_ called 0 returned 0% blocks executed 0%
    #####: 1898:AssertionResult IsSubstring(const char* needle_expr, const char* haystack_expr,
        -: 1899:                            const ::std::string& needle,
        -: 1900:                            const ::std::string& haystack) {
    #####: 1901:  return IsSubstringImpl(true, needle_expr, haystack_expr, needle, haystack);
    %%%%%: 1901-block  0
call    0 never executed
        -: 1902:}
        -: 1903:
function _ZN7testing14IsNotSubstringEPKcS1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_ called 0 returned 0% blocks executed 0%
    #####: 1904:AssertionResult IsNotSubstring(const char* needle_expr,
        -: 1905:                               const char* haystack_expr,
        -: 1906:                               const ::std::string& needle,
        -: 1907:                               const ::std::string& haystack) {
    #####: 1908:  return IsSubstringImpl(false, needle_expr, haystack_expr, needle, haystack);
    %%%%%: 1908-block  0
call    0 never executed
        -: 1909:}
        -: 1910:
        -: 1911:#if GTEST_HAS_STD_WSTRING
function _ZN7testing11IsSubstringEPKcS1_RKNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEES9_ called 0 returned 0% blocks executed 0%
    #####: 1912:AssertionResult IsSubstring(const char* needle_expr, const char* haystack_expr,
        -: 1913:                            const ::std::wstring& needle,
        -: 1914:                            const ::std::wstring& haystack) {
    #####: 1915:  return IsSubstringImpl(true, needle_expr, haystack_expr, needle, haystack);
    %%%%%: 1915-block  0
call    0 never executed
        -: 1916:}
        -: 1917:
function _ZN7testing14IsNotSubstringEPKcS1_RKNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEES9_ called 0 returned 0% blocks executed 0%
    #####: 1918:AssertionResult IsNotSubstring(const char* needle_expr,
        -: 1919:                               const char* haystack_expr,
        -: 1920:                               const ::std::wstring& needle,
        -: 1921:                               const ::std::wstring& haystack) {
    #####: 1922:  return IsSubstringImpl(false, needle_expr, haystack_expr, needle, haystack);
    %%%%%: 1922-block  0
call    0 never executed
        -: 1923:}
        -: 1924:#endif  // GTEST_HAS_STD_WSTRING
        -: 1925:
        -: 1926:namespace internal {
        -: 1927:
        -: 1928:#ifdef GTEST_OS_WINDOWS
        -: 1929:
        -: 1930:namespace {
        -: 1931:
        -: 1932:// Helper function for IsHRESULT{SuccessFailure} predicates
        -: 1933:AssertionResult HRESULTFailureHelper(const char* expr, const char* expected,
        -: 1934:                                     long hr) {  // NOLINT
        -: 1935:#if defined(GTEST_OS_WINDOWS_MOBILE) || defined(GTEST_OS_WINDOWS_TV_TITLE)
        -: 1936:
        -: 1937:  // Windows CE doesn't support FormatMessage.
        -: 1938:  const char error_text[] = "";
        -: 1939:
        -: 1940:#else
        -: 1941:
        -: 1942:  // Looks up the human-readable system message for the HRESULT code
        -: 1943:  // and since we're not passing any params to FormatMessage, we don't
        -: 1944:  // want inserts expanded.
        -: 1945:  const DWORD kFlags =
        -: 1946:      FORMAT_MESSAGE_FROM_SYSTEM | FORMAT_MESSAGE_IGNORE_INSERTS;
        -: 1947:  const DWORD kBufSize = 4096;
        -: 1948:  // Gets the system's human readable message string for this HRESULT.
        -: 1949:  char error_text[kBufSize] = {'\0'};
        -: 1950:  DWORD message_length = ::FormatMessageA(kFlags,
        -: 1951:                                          0,  // no source, we're asking system
        -: 1952:                                          static_cast<DWORD>(hr),  // the error
        -: 1953:                                          0,  // no line width restrictions
        -: 1954:                                          error_text,  // output buffer
        -: 1955:                                          kBufSize,    // buf size
        -: 1956:                                          nullptr);  // no arguments for inserts
        -: 1957:  // Trims tailing white space (FormatMessage leaves a trailing CR-LF)
        -: 1958:  for (; message_length && IsSpace(error_text[message_length - 1]);
        -: 1959:       --message_length) {
        -: 1960:    error_text[message_length - 1] = '\0';
        -: 1961:  }
        -: 1962:
        -: 1963:#endif  // GTEST_OS_WINDOWS_MOBILE
        -: 1964:
        -: 1965:  const std::string error_hex("0x" + String::FormatHexInt(hr));
        -: 1966:  return ::testing::AssertionFailure()
        -: 1967:         << "Expected: " << expr << " " << expected << ".\n"
        -: 1968:         << "  Actual: " << error_hex << " " << error_text << "\n";
        -: 1969:}
        -: 1970:
        -: 1971:}  // namespace
        -: 1972:
        -: 1973:AssertionResult IsHRESULTSuccess(const char* expr, long hr) {  // NOLINT
        -: 1974:  if (SUCCEEDED(hr)) {
        -: 1975:    return AssertionSuccess();
        -: 1976:  }
        -: 1977:  return HRESULTFailureHelper(expr, "succeeds", hr);
        -: 1978:}
        -: 1979:
        -: 1980:AssertionResult IsHRESULTFailure(const char* expr, long hr) {  // NOLINT
        -: 1981:  if (FAILED(hr)) {
        -: 1982:    return AssertionSuccess();
        -: 1983:  }
        -: 1984:  return HRESULTFailureHelper(expr, "fails", hr);
        -: 1985:}
        -: 1986:
        -: 1987:#endif  // GTEST_OS_WINDOWS
        -: 1988:
        -: 1989:// Utility functions for encoding Unicode text (wide strings) in
        -: 1990:// UTF-8.
        -: 1991:
        -: 1992:// A Unicode code-point can have up to 21 bits, and is encoded in UTF-8
        -: 1993:// like this:
        -: 1994://
        -: 1995:// Code-point length   Encoding
        -: 1996://   0 -  7 bits       0xxxxxxx
        -: 1997://   8 - 11 bits       110xxxxx 10xxxxxx
        -: 1998://  12 - 16 bits       1110xxxx 10xxxxxx 10xxxxxx
        -: 1999://  17 - 21 bits       11110xxx 10xxxxxx 10xxxxxx 10xxxxxx
        -: 2000:
        -: 2001:// The maximum code-point a one-byte UTF-8 sequence can represent.
        -: 2002:constexpr uint32_t kMaxCodePoint1 = (static_cast<uint32_t>(1) << 7) - 1;
        -: 2003:
        -: 2004:// The maximum code-point a two-byte UTF-8 sequence can represent.
        -: 2005:constexpr uint32_t kMaxCodePoint2 = (static_cast<uint32_t>(1) << (5 + 6)) - 1;
        -: 2006:
        -: 2007:// The maximum code-point a three-byte UTF-8 sequence can represent.
        -: 2008:constexpr uint32_t kMaxCodePoint3 =
        -: 2009:    (static_cast<uint32_t>(1) << (4 + 2 * 6)) - 1;
        -: 2010:
        -: 2011:// The maximum code-point a four-byte UTF-8 sequence can represent.
        -: 2012:constexpr uint32_t kMaxCodePoint4 =
        -: 2013:    (static_cast<uint32_t>(1) << (3 + 3 * 6)) - 1;
        -: 2014:
        -: 2015:// Chops off the n lowest bits from a bit pattern.  Returns the n
        -: 2016:// lowest bits.  As a side effect, the original bit pattern will be
        -: 2017:// shifted to the right by n bits.
function _ZN7testing8internal11ChopLowBitsEPji called 0 returned 0% blocks executed 0%
    #####: 2018:inline uint32_t ChopLowBits(uint32_t* bits, int n) {
    #####: 2019:  const uint32_t low_bits = *bits & ((static_cast<uint32_t>(1) << n) - 1);
    #####: 2020:  *bits >>= n;
    #####: 2021:  return low_bits;
    %%%%%: 2021-block  0
        -: 2022:}
        -: 2023:
        -: 2024:// Converts a Unicode code point to a narrow string in UTF-8 encoding.
        -: 2025:// code_point parameter is of type uint32_t because wchar_t may not be
        -: 2026:// wide enough to contain a code point.
        -: 2027:// If the code_point is not a valid Unicode code point
        -: 2028:// (i.e. outside of Unicode range U+0 to U+10FFFF) it will be converted
        -: 2029:// to "(Invalid Unicode 0xXXXXXXXX)".
function _ZN7testing8internal15CodePointToUtf8B5cxx11Ej called 0 returned 0% blocks executed 0%
    #####: 2030:std::string CodePointToUtf8(uint32_t code_point) {
    #####: 2031:  if (code_point > kMaxCodePoint4) {
    %%%%%: 2031-block  0
branch  0 never executed
branch  1 never executed
    #####: 2032:    return "(Invalid Unicode 0x" + String::FormatHexUInt32(code_point) + ")";
    %%%%%: 2032-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2032-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2032-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 2032-block  3
call    9 never executed
call   10 never executed
    $$$$$: 2032-block  4
call   11 never executed
    $$$$$: 2032-block  5
call   12 never executed
    $$$$$: 2032-block  6
    $$$$$: 2032-block  7
        -: 2033:  }
        -: 2034:
        -: 2035:  char str[5];  // Big enough for the largest valid code point.
    #####: 2036:  if (code_point <= kMaxCodePoint1) {
    %%%%%: 2036-block  0
branch  0 never executed
branch  1 never executed
    #####: 2037:    str[1] = '\0';
    #####: 2038:    str[0] = static_cast<char>(code_point);  // 0xxxxxxx
    %%%%%: 2038-block  0
    #####: 2039:  } else if (code_point <= kMaxCodePoint2) {
    %%%%%: 2039-block  0
branch  0 never executed
branch  1 never executed
    #####: 2040:    str[2] = '\0';
    #####: 2041:    str[1] = static_cast<char>(0x80 | ChopLowBits(&code_point, 6));  // 10xxxxxx
    %%%%%: 2041-block  0
call    0 never executed
    #####: 2042:    str[0] = static_cast<char>(0xC0 | code_point);                   // 110xxxxx
    #####: 2043:  } else if (code_point <= kMaxCodePoint3) {
    %%%%%: 2043-block  0
branch  0 never executed
branch  1 never executed
    #####: 2044:    str[3] = '\0';
    #####: 2045:    str[2] = static_cast<char>(0x80 | ChopLowBits(&code_point, 6));  // 10xxxxxx
    %%%%%: 2045-block  0
call    0 never executed
    #####: 2046:    str[1] = static_cast<char>(0x80 | ChopLowBits(&code_point, 6));  // 10xxxxxx
call    0 never executed
    #####: 2047:    str[0] = static_cast<char>(0xE0 | code_point);                   // 1110xxxx
        -: 2048:  } else {  // code_point <= kMaxCodePoint4
    #####: 2049:    str[4] = '\0';
    #####: 2050:    str[3] = static_cast<char>(0x80 | ChopLowBits(&code_point, 6));  // 10xxxxxx
    %%%%%: 2050-block  0
call    0 never executed
    #####: 2051:    str[2] = static_cast<char>(0x80 | ChopLowBits(&code_point, 6));  // 10xxxxxx
call    0 never executed
    #####: 2052:    str[1] = static_cast<char>(0x80 | ChopLowBits(&code_point, 6));  // 10xxxxxx
call    0 never executed
    #####: 2053:    str[0] = static_cast<char>(0xF0 | code_point);                   // 11110xxx
        -: 2054:  }
    #####: 2055:  return str;
    %%%%%: 2055-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2055-block  1
call    4 never executed
    $$$$$: 2055-block  2
call    5 never executed
    $$$$$: 2055-block  3
        -: 2056:}
        -: 2057:
        -: 2058:// The following two functions only make sense if the system
        -: 2059:// uses UTF-16 for wide string encoding. All supported systems
        -: 2060:// with 16 bit wchar_t (Windows, Cygwin) do use UTF-16.
        -: 2061:
        -: 2062:// Determines if the arguments constitute UTF-16 surrogate pair
        -: 2063:// and thus should be combined into a single Unicode code point
        -: 2064:// using CreateCodePointFromUtf16SurrogatePair.
function _ZN7testing8internal20IsUtf16SurrogatePairEww called 0 returned 0% blocks executed 0%
    #####: 2065:inline bool IsUtf16SurrogatePair(wchar_t first, wchar_t second) {
        -: 2066:  return sizeof(wchar_t) == 2 && (first & 0xFC00) == 0xD800 &&
    #####: 2067:         (second & 0xFC00) == 0xDC00;
    %%%%%: 2067-block  0
        -: 2068:}
        -: 2069:
        -: 2070:// Creates a Unicode code point from UTF16 surrogate pair.
function _ZN7testing8internal37CreateCodePointFromUtf16SurrogatePairEww called 0 returned 0% blocks executed 0%
    #####: 2071:inline uint32_t CreateCodePointFromUtf16SurrogatePair(wchar_t first,
        -: 2072:                                                      wchar_t second) {
    #####: 2073:  const auto first_u = static_cast<uint32_t>(first);
    #####: 2074:  const auto second_u = static_cast<uint32_t>(second);
    #####: 2075:  const uint32_t mask = (1 << 10) - 1;
        -: 2076:  return (sizeof(wchar_t) == 2)
        -: 2077:             ? (((first_u & mask) << 10) | (second_u & mask)) + 0x10000
        -: 2078:             :
        -: 2079:             // This function should not be called when the condition is
        -: 2080:             // false, but we provide a sensible default in case it is.
    #####: 2081:             first_u;
    %%%%%: 2081-block  0
        -: 2082:}
        -: 2083:
        -: 2084:// Converts a wide string to a narrow string in UTF-8 encoding.
        -: 2085:// The wide string is assumed to have the following encoding:
        -: 2086://   UTF-16 if sizeof(wchar_t) == 2 (on Windows, Cygwin)
        -: 2087://   UTF-32 if sizeof(wchar_t) == 4 (on Linux)
        -: 2088:// Parameter str points to a null-terminated wide string.
        -: 2089:// Parameter num_chars may additionally limit the number
        -: 2090:// of wchar_t characters processed. -1 is used when the entire string
        -: 2091:// should be processed.
        -: 2092:// If the string contains code points that are not valid Unicode code points
        -: 2093:// (i.e. outside of Unicode range U+0 to U+10FFFF) they will be output
        -: 2094:// as '(Invalid Unicode 0xXXXXXXXX)'. If the string is in UTF16 encoding
        -: 2095:// and contains invalid UTF-16 surrogate pairs, values in those pairs
        -: 2096:// will be encoded as individual Unicode characters from Basic Normal Plane.
function _ZN7testing8internal16WideStringToUtf8B5cxx11EPKwi called 0 returned 0% blocks executed 0%
    #####: 2097:std::string WideStringToUtf8(const wchar_t* str, int num_chars) {
    #####: 2098:  if (num_chars == -1) num_chars = static_cast<int>(wcslen(str));
    %%%%%: 2098-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2098-block  1
call    2 never executed
        -: 2099:
    #####: 2100:  ::std::stringstream stream;
    %%%%%: 2100-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2101:  for (int i = 0; i < num_chars; ++i) {
    %%%%%: 2101-block  0
    %%%%%: 2101-block  1
branch  0 never executed
branch  1 never executed
        -: 2102:    uint32_t unicode_code_point;
        -: 2103:
    #####: 2104:    if (str[i] == L'\0') {
    %%%%%: 2104-block  0
branch  0 never executed
branch  1 never executed
    #####: 2105:      break;
    %%%%%: 2105-block  0
    #####: 2106:    } else if (i + 1 < num_chars && IsUtf16SurrogatePair(str[i], str[i + 1])) {
    %%%%%: 2106-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2106-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 2106-block  2
    %%%%%: 2106-block  3
    %%%%%: 2106-block  4
branch  5 never executed
branch  6 never executed
        -: 2107:      unicode_code_point =
    #####: 2108:          CreateCodePointFromUtf16SurrogatePair(str[i], str[i + 1]);
    %%%%%: 2108-block  0
call    0 never executed
    #####: 2109:      i++;
        -: 2110:    } else {
    #####: 2111:      unicode_code_point = static_cast<uint32_t>(str[i]);
    %%%%%: 2111-block  0
        -: 2112:    }
        -: 2113:
    #####: 2114:    stream << CodePointToUtf8(unicode_code_point);
    %%%%%: 2114-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2114-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2114-block  2
call    6 never executed
    $$$$$: 2114-block  3
call    7 never executed
    $$$$$: 2114-block  4
        -: 2115:  }
    #####: 2116:  return StringStreamToString(&stream);
    %%%%%: 2116-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2116-block  1
    #####: 2117:}
    %%%%%: 2117-block  0
call    0 never executed
    $$$$$: 2117-block  1
call    1 never executed
        -: 2118:
        -: 2119:// Converts a wide C string to an std::string using the UTF-8 encoding.
        -: 2120:// NULL will be converted to "(null)".
function _ZN7testing8internal6String15ShowWideCStringB5cxx11EPKw called 0 returned 0% blocks executed 0%
    #####: 2121:std::string String::ShowWideCString(const wchar_t* wide_c_str) {
    #####: 2122:  if (wide_c_str == nullptr) return "(null)";
    %%%%%: 2122-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2122-block  1
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2122-block  2
call    6 never executed
    $$$$$: 2122-block  3
call    7 never executed
        -: 2123:
    #####: 2124:  return internal::WideStringToUtf8(wide_c_str, -1);
    %%%%%: 2124-block  0
call    0 never executed
        -: 2125:}
        -: 2126:
        -: 2127:// Compares two wide C strings.  Returns true if and only if they have the
        -: 2128:// same content.
        -: 2129://
        -: 2130:// Unlike wcscmp(), this function can handle NULL argument(s).  A NULL
        -: 2131:// C string is considered different to any non-NULL C string,
        -: 2132:// including the empty string.
function _ZN7testing8internal6String17WideCStringEqualsEPKwS3_ called 0 returned 0% blocks executed 0%
    #####: 2133:bool String::WideCStringEquals(const wchar_t* lhs, const wchar_t* rhs) {
    #####: 2134:  if (lhs == nullptr) return rhs == nullptr;
    %%%%%: 2134-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2134-block  1
        -: 2135:
    #####: 2136:  if (rhs == nullptr) return false;
    %%%%%: 2136-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2136-block  1
        -: 2137:
    #####: 2138:  return wcscmp(lhs, rhs) == 0;
    %%%%%: 2138-block  0
call    0 never executed
        -: 2139:}
        -: 2140:
        -: 2141:// Helper function for *_STREQ on wide strings.
function _ZN7testing8internal14CmpHelperSTREQEPKcS2_PKwS4_ called 0 returned 0% blocks executed 0%
    #####: 2142:AssertionResult CmpHelperSTREQ(const char* lhs_expression,
        -: 2143:                               const char* rhs_expression, const wchar_t* lhs,
        -: 2144:                               const wchar_t* rhs) {
    #####: 2145:  if (String::WideCStringEquals(lhs, rhs)) {
    %%%%%: 2145-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2146:    return AssertionSuccess();
    %%%%%: 2146-block  0
call    0 never executed
        -: 2147:  }
        -: 2148:
    #####: 2149:  return EqFailure(lhs_expression, rhs_expression, PrintToString(lhs),
    %%%%%: 2149-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2149-block  1
call    3 never executed
    #####: 2150:                   PrintToString(rhs), false);
    %%%%%: 2150-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2150-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2150-block  2
call    6 never executed
call    7 never executed
    $$$$$: 2150-block  3
call    8 never executed
    $$$$$: 2150-block  4
        -: 2151:}
        -: 2152:
        -: 2153:// Helper function for *_STRNE on wide strings.
function _ZN7testing8internal14CmpHelperSTRNEEPKcS2_PKwS4_ called 0 returned 0% blocks executed 0%
    #####: 2154:AssertionResult CmpHelperSTRNE(const char* s1_expression,
        -: 2155:                               const char* s2_expression, const wchar_t* s1,
        -: 2156:                               const wchar_t* s2) {
    #####: 2157:  if (!String::WideCStringEquals(s1, s2)) {
    %%%%%: 2157-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2158:    return AssertionSuccess();
    %%%%%: 2158-block  0
call    0 never executed
        -: 2159:  }
        -: 2160:
    #####: 2161:  return AssertionFailure()
    %%%%%: 2161-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2161-block  1
call    3 never executed
    #####: 2162:         << "Expected: (" << s1_expression << ") != (" << s2_expression
    %%%%%: 2162-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2162-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2162-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 2162-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 2163:         << "), actual: " << PrintToString(s1) << " vs " << PrintToString(s2);
    %%%%%: 2163-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2163-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2163-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 2163-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 2163-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 2163-block  5
call   15 never executed
branch 16 never executed
branch 17 never executed
    %%%%%: 2163-block  6
call   18 never executed
branch 19 never executed
branch 20 never executed
    %%%%%: 2163-block  7
call   21 never executed
call   22 never executed
call   23 never executed
    $$$$$: 2163-block  8
call   24 never executed
    $$$$$: 2163-block  9
    $$$$$: 2163-block 10
call   25 never executed
    $$$$$: 2163-block 11
        -: 2164:}
        -: 2165:
        -: 2166:// Compares two C strings, ignoring case.  Returns true if and only if they have
        -: 2167:// the same content.
        -: 2168://
        -: 2169:// Unlike strcasecmp(), this function can handle NULL argument(s).  A
        -: 2170:// NULL C string is considered different to any non-NULL C string,
        -: 2171:// including the empty string.
function _ZN7testing8internal6String28CaseInsensitiveCStringEqualsEPKcS3_ called 4 returned 100% blocks executed 71%
        4: 2172:bool String::CaseInsensitiveCStringEquals(const char* lhs, const char* rhs) {
       4*: 2173:  if (lhs == nullptr) return rhs == nullptr;
        4: 2173-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 4
    %%%%%: 2173-block  1
       4*: 2174:  if (rhs == nullptr) return false;
        4: 2174-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 4
    %%%%%: 2174-block  1
        4: 2175:  return posix::StrCaseCmp(lhs, rhs) == 0;
        4: 2175-block  0
call    0 returned 4
        -: 2176:}
        -: 2177:
        -: 2178:// Compares two wide C strings, ignoring case.  Returns true if and only if they
        -: 2179:// have the same content.
        -: 2180://
        -: 2181:// Unlike wcscasecmp(), this function can handle NULL argument(s).
        -: 2182:// A NULL C string is considered different to any non-NULL wide C string,
        -: 2183:// including the empty string.
        -: 2184:// NB: The implementations on different platforms slightly differ.
        -: 2185:// On windows, this method uses _wcsicmp which compares according to LC_CTYPE
        -: 2186:// environment variable. On GNU platform this method uses wcscasecmp
        -: 2187:// which compares according to LC_CTYPE category of the current locale.
        -: 2188:// On MacOS X, it uses towlower, which also uses LC_CTYPE category of the
        -: 2189:// current locale.
function _ZN7testing8internal6String32CaseInsensitiveWideCStringEqualsEPKwS3_ called 0 returned 0% blocks executed 0%
    #####: 2190:bool String::CaseInsensitiveWideCStringEquals(const wchar_t* lhs,
        -: 2191:                                              const wchar_t* rhs) {
    #####: 2192:  if (lhs == nullptr) return rhs == nullptr;
    %%%%%: 2192-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2192-block  1
        -: 2193:
    #####: 2194:  if (rhs == nullptr) return false;
    %%%%%: 2194-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2194-block  1
        -: 2195:
        -: 2196:#ifdef GTEST_OS_WINDOWS
        -: 2197:  return _wcsicmp(lhs, rhs) == 0;
        -: 2198:#elif defined(GTEST_OS_LINUX) && !defined(GTEST_OS_LINUX_ANDROID)
        -: 2199:  return wcscasecmp(lhs, rhs) == 0;
        -: 2200:#else
        -: 2201:  // Android, Mac OS X and Cygwin don't define wcscasecmp.
        -: 2202:  // Other unknown OSes may not define it either.
        -: 2203:  wint_t left, right;
        -: 2204:  do {
    #####: 2205:    left = towlower(static_cast<wint_t>(*lhs++));
    %%%%%: 2205-block  0
call    0 never executed
    #####: 2206:    right = towlower(static_cast<wint_t>(*rhs++));
call    0 never executed
    #####: 2207:  } while (left && left == right);
branch  0 never executed
branch  1 never executed
    %%%%%: 2207-block  0
branch  2 never executed
branch  3 never executed
    #####: 2208:  return left == right;
    %%%%%: 2208-block  0
        -: 2209:#endif  // OS selector
        -: 2210:}
        -: 2211:
        -: 2212:// Returns true if and only if str ends with the given suffix, ignoring case.
        -: 2213:// Any string is considered to end with an empty suffix.
function _ZN7testing8internal6String23EndsWithCaseInsensitiveERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_ called 0 returned 0% blocks executed 0%
    #####: 2214:bool String::EndsWithCaseInsensitive(const std::string& str,
        -: 2215:                                     const std::string& suffix) {
    #####: 2216:  const size_t str_len = str.length();
    %%%%%: 2216-block  0
call    0 never executed
    #####: 2217:  const size_t suffix_len = suffix.length();
call    0 never executed
    #####: 2218:  return (str_len >= suffix_len) &&
branch  0 never executed
branch  1 never executed
    %%%%%: 2218-block  0
    %%%%%: 2218-block  1
    #####: 2219:         CaseInsensitiveCStringEquals(str.c_str() + str_len - suffix_len,
    %%%%%: 2219-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 2220:                                      suffix.c_str());
    %%%%%: 2220-block  0
        -: 2221:}
        -: 2222:
        -: 2223:// Formats an int value as "%02d".
function _ZN7testing8internal6String15FormatIntWidth2B5cxx11Ei called 0 returned 0% blocks executed 0%
    #####: 2224:std::string String::FormatIntWidth2(int value) {
    #####: 2225:  return FormatIntWidthN(value, 2);
    %%%%%: 2225-block  0
call    0 never executed
        -: 2226:}
        -: 2227:
        -: 2228:// Formats an int value to given width with leading zeros.
function _ZN7testing8internal6String15FormatIntWidthNB5cxx11Eii called 0 returned 0% blocks executed 0%
    #####: 2229:std::string String::FormatIntWidthN(int value, int width) {
    #####: 2230:  std::stringstream ss;
    %%%%%: 2230-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2231:  ss << std::setfill('0') << std::setw(width) << value;
    %%%%%: 2231-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2231-block  1
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 2232:  return ss.str();
    %%%%%: 2232-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2232-block  1
    #####: 2233:}
    %%%%%: 2233-block  0
call    0 never executed
    $$$$$: 2233-block  1
call    1 never executed
        -: 2234:
        -: 2235:// Formats an int value as "%X".
function _ZN7testing8internal6String15FormatHexUInt32B5cxx11Ej called 0 returned 0% blocks executed 0%
    #####: 2236:std::string String::FormatHexUInt32(uint32_t value) {
    #####: 2237:  std::stringstream ss;
    %%%%%: 2237-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2238:  ss << std::hex << std::uppercase << value;
    %%%%%: 2238-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2238-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2238-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 2239:  return ss.str();
    %%%%%: 2239-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2239-block  1
    #####: 2240:}
    %%%%%: 2240-block  0
call    0 never executed
    $$$$$: 2240-block  1
call    1 never executed
        -: 2241:
        -: 2242:// Formats an int value as "%X".
function _ZN7testing8internal6String12FormatHexIntB5cxx11Ei called 0 returned 0% blocks executed 0%
    #####: 2243:std::string String::FormatHexInt(int value) {
    #####: 2244:  return FormatHexUInt32(static_cast<uint32_t>(value));
    %%%%%: 2244-block  0
call    0 never executed
        -: 2245:}
        -: 2246:
        -: 2247:// Formats a byte as "%02X".
function _ZN7testing8internal6String10FormatByteB5cxx11Eh called 0 returned 0% blocks executed 0%
    #####: 2248:std::string String::FormatByte(unsigned char value) {
    #####: 2249:  std::stringstream ss;
    %%%%%: 2249-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2250:  ss << std::setfill('0') << std::setw(2) << std::hex << std::uppercase
    %%%%%: 2250-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2250-block  1
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 2250-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 2251:     << static_cast<unsigned int>(value);
    %%%%%: 2251-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2252:  return ss.str();
    %%%%%: 2252-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2252-block  1
    #####: 2253:}
    %%%%%: 2253-block  0
call    0 never executed
    $$$$$: 2253-block  1
call    1 never executed
        -: 2254:
        -: 2255:// Converts the buffer in a stringstream to an std::string, converting NUL
        -: 2256:// bytes to "\\0" along the way.
function _ZN7testing8internal20StringStreamToStringEPNSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEEE called 53 returned 100% blocks executed 75%
       53: 2257:std::string StringStreamToString(::std::stringstream* ss) {
       53: 2258:  const ::std::string& str = ss->str();
       53: 2258-block  0
call    0 returned 53
branch  1 taken 53 (fallthrough)
branch  2 taken 0 (throw)
       53: 2259:  const char* const start = str.c_str();
       53: 2259-block  0
call    0 returned 53
       53: 2260:  const char* const end = start + str.length();
call    0 returned 53
        -: 2261:
       53: 2262:  std::string result;
call    0 returned 53
       53: 2263:  result.reserve(static_cast<size_t>(2 * (end - start)));
call    0 returned 53
branch  1 taken 53 (fallthrough)
branch  2 taken 0 (throw)
     1323: 2264:  for (const char* ch = start; ch != end; ++ch) {
       53: 2264-block  0
     1270: 2264-block  1
     1323: 2264-block  2
branch  0 taken 1270
branch  1 taken 53 (fallthrough)
     1270: 2265:    if (*ch == '\0') {
     1270: 2265-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1270
    #####: 2266:      result += "\\0";  // Replaces NUL with "\\0";
    %%%%%: 2266-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2267:    } else {
     1270: 2268:      result += *ch;
     1270: 2268-block  0
call    0 returned 1270
branch  1 taken 1270 (fallthrough)
branch  2 taken 0 (throw)
        -: 2269:    }
        -: 2270:  }
        -: 2271:
      106: 2272:  return result;
       53: 2272-block  0
       53: 2272-block  1
       53: 2273:}
       53: 2273-block  0
call    0 returned 53
    $$$$$: 2273-block  1
call    1 never executed
    $$$$$: 2273-block  2
call    2 never executed
        -: 2274:
        -: 2275:// Appends the user-supplied message to the Google-Test-generated message.
function _ZN7testing8internal17AppendUserMessageERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_7MessageE called 0 returned 0% blocks executed 0%
    #####: 2276:std::string AppendUserMessage(const std::string& gtest_msg,
        -: 2277:                              const Message& user_msg) {
        -: 2278:  // Appends the user message if it's non-empty.
    #####: 2279:  const std::string user_msg_string = user_msg.GetString();
    %%%%%: 2279-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2280:  if (user_msg_string.empty()) {
    %%%%%: 2280-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2281:    return gtest_msg;
    %%%%%: 2281-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2282:  }
    #####: 2283:  if (gtest_msg.empty()) {
    %%%%%: 2283-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2284:    return user_msg_string;
    %%%%%: 2284-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2285:  }
    #####: 2286:  return gtest_msg + "\n" + user_msg_string;
    %%%%%: 2286-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2286-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2286-block  2
call    6 never executed
    $$$$$: 2286-block  3
call    7 never executed
    $$$$$: 2286-block  4
    #####: 2287:}
    %%%%%: 2287-block  0
call    0 never executed
    $$$$$: 2287-block  1
call    1 never executed
        -: 2288:
        -: 2289:}  // namespace internal
        -: 2290:
        -: 2291:// class TestResult
        -: 2292:
        -: 2293:// Creates an empty TestResult.
       3*: 2294:TestResult::TestResult()
       3*: 2295:    : death_test_count_(0), start_timestamp_(0), elapsed_time_(0) {}
------------------
_ZN7testing10TestResultC1Ev:
function _ZN7testing10TestResultC1Ev called 3 returned 100% blocks executed 100%
        3: 2294:TestResult::TestResult()
        3: 2295:    : death_test_count_(0), start_timestamp_(0), elapsed_time_(0) {}
        3: 2295-block  0
call    0 returned 3
call    1 returned 3
call    2 returned 3
------------------
_ZN7testing10TestResultC2Ev:
function _ZN7testing10TestResultC2Ev called 0 returned 0% blocks executed 0%
    #####: 2294:TestResult::TestResult()
    #####: 2295:    : death_test_count_(0), start_timestamp_(0), elapsed_time_(0) {}
    %%%%%: 2295-block  0
call    0 never executed
call    1 never executed
call    2 never executed
------------------
        -: 2296:
        -: 2297:// D'tor.
    #####: 2298:TestResult::~TestResult() = default;
------------------
_ZN7testing10TestResultD1Ev:
function _ZN7testing10TestResultD1Ev called 0 returned 0% blocks executed 0%
    #####: 2298:TestResult::~TestResult() = default;
    %%%%%: 2298-block  0
call    0 never executed
call    1 never executed
call    2 never executed
------------------
_ZN7testing10TestResultD2Ev:
function _ZN7testing10TestResultD2Ev called 0 returned 0% blocks executed 0%
    #####: 2298:TestResult::~TestResult() = default;
    %%%%%: 2298-block  0
call    0 never executed
call    1 never executed
call    2 never executed
------------------
        -: 2299:
        -: 2300:// Returns the i-th test part result among all the results. i can
        -: 2301:// range from 0 to total_part_count() - 1. If i is not in that range,
        -: 2302:// aborts the program.
function _ZNK7testing10TestResult17GetTestPartResultEi called 0 returned 0% blocks executed 0%
    #####: 2303:const TestPartResult& TestResult::GetTestPartResult(int i) const {
    #####: 2304:  if (i < 0 || i >= total_part_count()) internal::posix::Abort();
    %%%%%: 2304-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2304-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 2304-block  2
    %%%%%: 2304-block  3
    %%%%%: 2304-block  4
branch  5 never executed
branch  6 never executed
    %%%%%: 2304-block  5
call    7 never executed
    #####: 2305:  return test_part_results_.at(static_cast<size_t>(i));
    %%%%%: 2305-block  0
call    0 never executed
        -: 2306:}
        -: 2307:
        -: 2308:// Returns the i-th test property. i can range from 0 to
        -: 2309:// test_property_count() - 1. If i is not in that range, aborts the
        -: 2310:// program.
function _ZNK7testing10TestResult15GetTestPropertyEi called 0 returned 0% blocks executed 0%
    #####: 2311:const TestProperty& TestResult::GetTestProperty(int i) const {
    #####: 2312:  if (i < 0 || i >= test_property_count()) internal::posix::Abort();
    %%%%%: 2312-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2312-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 2312-block  2
    %%%%%: 2312-block  3
    %%%%%: 2312-block  4
branch  5 never executed
branch  6 never executed
    %%%%%: 2312-block  5
call    7 never executed
    #####: 2313:  return test_properties_.at(static_cast<size_t>(i));
    %%%%%: 2313-block  0
call    0 never executed
        -: 2314:}
        -: 2315:
        -: 2316:// Clears the test part results.
function _ZN7testing10TestResult20ClearTestPartResultsEv called 0 returned 0% blocks executed 0%
    #####: 2317:void TestResult::ClearTestPartResults() { test_part_results_.clear(); }
    %%%%%: 2317-block  0
call    0 never executed
        -: 2318:
        -: 2319:// Adds a test part result to the list.
function _ZN7testing10TestResult17AddTestPartResultERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 2320:void TestResult::AddTestPartResult(const TestPartResult& test_part_result) {
    #####: 2321:  test_part_results_.push_back(test_part_result);
    %%%%%: 2321-block  0
call    0 never executed
    #####: 2322:}
        -: 2323:
        -: 2324:// Adds a test property to the list. If a property with the same key as the
        -: 2325:// supplied property is already represented, the value of this test_property
        -: 2326:// replaces the old value for that key.
function _ZN7testing10TestResult14RecordPropertyERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_12TestPropertyE called 0 returned 0% blocks executed 0%
    #####: 2327:void TestResult::RecordProperty(const std::string& xml_element,
        -: 2328:                                const TestProperty& test_property) {
    #####: 2329:  if (!ValidateTestProperty(xml_element, test_property)) {
    %%%%%: 2329-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2329-block  1
branch  3 never executed
branch  4 never executed
    #####: 2330:    return;
    %%%%%: 2330-block  0
    %%%%%: 2330-block  1
        -: 2331:  }
    #####: 2332:  internal::MutexLock lock(&test_properties_mutex_);
    %%%%%: 2332-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2333:  const std::vector<TestProperty>::iterator property_with_matching_key =
    #####: 2334:      std::find_if(test_properties_.begin(), test_properties_.end(),
    %%%%%: 2334-block  0
call    0 never executed
call    1 never executed
    %%%%%: 2334-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 2335:                   internal::TestPropertyKeyIs(test_property.key()));
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 2335-block  0
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 2335-block  1
call    8 never executed
call    9 never executed
call   10 never executed
    $$$$$: 2335-block  2
call   11 never executed
    $$$$$: 2335-block  3
call   12 never executed
    $$$$$: 2335-block  4
call   13 never executed
    $$$$$: 2335-block  5
    $$$$$: 2335-block  6
    $$$$$: 2335-block  7
    #####: 2336:  if (property_with_matching_key == test_properties_.end()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2337:    test_properties_.push_back(test_property);
    %%%%%: 2337-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2338:    return;
    %%%%%: 2338-block  0
        -: 2339:  }
    #####: 2340:  property_with_matching_key->SetValue(test_property.value());
    %%%%%: 2340-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2340-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 2340-block  2
call    9 never executed
call   10 never executed
    $$$$$: 2340-block  3
call   11 never executed
    $$$$$: 2340-block  4
call   12 never executed
    $$$$$: 2340-block  5
    $$$$$: 2340-block  6
    #####: 2341:}
    %%%%%: 2341-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2341-block  1
call    3 never executed
        -: 2342:
        -: 2343:// The list of reserved attributes used in the <testsuites> element of XML
        -: 2344:// output.
        -: 2345:static const char* const kReservedTestSuitesAttributes[] = {
        -: 2346:    "disabled",    "errors", "failures", "name",
        -: 2347:    "random_seed", "tests",  "time",     "timestamp"};
        -: 2348:
        -: 2349:// The list of reserved attributes used in the <testsuite> element of XML
        -: 2350:// output.
        -: 2351:static const char* const kReservedTestSuiteAttributes[] = {
        -: 2352:    "disabled", "errors", "failures",  "name",
        -: 2353:    "tests",    "time",   "timestamp", "skipped"};
        -: 2354:
        -: 2355:// The list of reserved attributes used in the <testcase> element of XML output.
        -: 2356:static const char* const kReservedTestCaseAttributes[] = {
        -: 2357:    "classname",  "name",        "status", "time",
        -: 2358:    "type_param", "value_param", "file",   "line"};
        -: 2359:
        -: 2360:// Use a slightly different set for allowed output to ensure existing tests can
        -: 2361:// still RecordProperty("result") or RecordProperty("timestamp")
        -: 2362:static const char* const kReservedOutputTestCaseAttributes[] = {
        -: 2363:    "classname",   "name", "status", "time",   "type_param",
        -: 2364:    "value_param", "file", "line",   "result", "timestamp"};
        -: 2365:
        -: 2366:template <size_t kSize>
    #####: 2367:std::vector<std::string> ArrayAsVector(const char* const (&array)[kSize]) {
    #####: 2368:  return std::vector<std::string>(array, array + kSize);
        -: 2369:}
------------------
_ZN7testing13ArrayAsVectorILm10EEESt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS7_EERAT__KPKc:
function _ZN7testing13ArrayAsVectorILm10EEESt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS7_EERAT__KPKc called 0 returned 0% blocks executed 0%
    #####: 2367:std::vector<std::string> ArrayAsVector(const char* const (&array)[kSize]) {
    #####: 2368:  return std::vector<std::string>(array, array + kSize);
    %%%%%: 2368-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2368-block  1
call    4 never executed
    %%%%%: 2368-block  2
    $$$$$: 2368-block  3
call    5 never executed
        -: 2369:}
------------------
_ZN7testing13ArrayAsVectorILm8EEESt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS7_EERAT__KPKc:
function _ZN7testing13ArrayAsVectorILm8EEESt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS7_EERAT__KPKc called 0 returned 0% blocks executed 0%
    #####: 2367:std::vector<std::string> ArrayAsVector(const char* const (&array)[kSize]) {
    #####: 2368:  return std::vector<std::string>(array, array + kSize);
    %%%%%: 2368-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2368-block  1
call    4 never executed
    %%%%%: 2368-block  2
    $$$$$: 2368-block  3
call    5 never executed
        -: 2369:}
------------------
        -: 2370:
function _ZN7testingL31GetReservedAttributesForElementERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 2371:static std::vector<std::string> GetReservedAttributesForElement(
        -: 2372:    const std::string& xml_element) {
    #####: 2373:  if (xml_element == "testsuites") {
    %%%%%: 2373-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2374:    return ArrayAsVector(kReservedTestSuitesAttributes);
    %%%%%: 2374-block  0
call    0 never executed
    #####: 2375:  } else if (xml_element == "testsuite") {
    %%%%%: 2375-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2376:    return ArrayAsVector(kReservedTestSuiteAttributes);
    %%%%%: 2376-block  0
call    0 never executed
    #####: 2377:  } else if (xml_element == "testcase") {
    %%%%%: 2377-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2378:    return ArrayAsVector(kReservedTestCaseAttributes);
    %%%%%: 2378-block  0
call    0 never executed
        -: 2379:  } else {
    #####: 2380:    GTEST_CHECK_(false) << "Unrecognized xml_element provided: " << xml_element;
    %%%%%: 2380-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2380-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2380-block  2
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 2380-block  3
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 2380-block  4
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%: 2380-block  5
call   16 never executed
    $$$$$: 2380-block  6
call   17 never executed
        -: 2381:  }
        -: 2382:  // This code is unreachable but some compilers may not realizes that.
    #####: 2383:  return std::vector<std::string>();
    %%%%%: 2383-block  0
call    0 never executed
        -: 2384:}
        -: 2385:
        -: 2386:#if GTEST_HAS_FILE_SYSTEM
        -: 2387:// TODO(jdesprez): Merge the two getReserved attributes once skip is improved
        -: 2388:// This function is only used when file systems are enabled.
function _ZN7testingL37GetReservedOutputAttributesForElementERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 2389:static std::vector<std::string> GetReservedOutputAttributesForElement(
        -: 2390:    const std::string& xml_element) {
    #####: 2391:  if (xml_element == "testsuites") {
    %%%%%: 2391-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2392:    return ArrayAsVector(kReservedTestSuitesAttributes);
    %%%%%: 2392-block  0
call    0 never executed
    #####: 2393:  } else if (xml_element == "testsuite") {
    %%%%%: 2393-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2394:    return ArrayAsVector(kReservedTestSuiteAttributes);
    %%%%%: 2394-block  0
call    0 never executed
    #####: 2395:  } else if (xml_element == "testcase") {
    %%%%%: 2395-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2396:    return ArrayAsVector(kReservedOutputTestCaseAttributes);
    %%%%%: 2396-block  0
call    0 never executed
        -: 2397:  } else {
    #####: 2398:    GTEST_CHECK_(false) << "Unrecognized xml_element provided: " << xml_element;
    %%%%%: 2398-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2398-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2398-block  2
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 2398-block  3
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 2398-block  4
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%: 2398-block  5
call   16 never executed
    $$$$$: 2398-block  6
call   17 never executed
        -: 2399:  }
        -: 2400:  // This code is unreachable but some compilers may not realizes that.
    #####: 2401:  return std::vector<std::string>();
    %%%%%: 2401-block  0
call    0 never executed
        -: 2402:}
        -: 2403:#endif
        -: 2404:
function _ZN7testingL14FormatWordListERKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS6_EE called 0 returned 0% blocks executed 0%
    #####: 2405:static std::string FormatWordList(const std::vector<std::string>& words) {
    #####: 2406:  Message word_list;
    %%%%%: 2406-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2407:  for (size_t i = 0; i < words.size(); ++i) {
    %%%%%: 2407-block  0
    %%%%%: 2407-block  1
    %%%%%: 2407-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2408:    if (i > 0 && words.size() > 2) {
    %%%%%: 2408-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2408-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 2408-block  2
    %%%%%: 2408-block  3
    %%%%%: 2408-block  4
branch  5 never executed
branch  6 never executed
    #####: 2409:      word_list << ", ";
    %%%%%: 2409-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2410:    }
    #####: 2411:    if (i == words.size() - 1) {
    %%%%%: 2411-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2412:      word_list << "and ";
    %%%%%: 2412-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2413:    }
    #####: 2414:    word_list << "'" << words[i] << "'";
    %%%%%: 2414-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2414-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 2414-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
        -: 2415:  }
    #####: 2416:  return word_list.GetString();
    %%%%%: 2416-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2416-block  1
    #####: 2417:}
    %%%%%: 2417-block  0
call    0 never executed
    $$$$$: 2417-block  1
call    1 never executed
        -: 2418:
function _ZN7testingL24ValidateTestPropertyNameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6vectorIS5_SaIS5_EE called 0 returned 0% blocks executed 0%
    #####: 2419:static bool ValidateTestPropertyName(
        -: 2420:    const std::string& property_name,
        -: 2421:    const std::vector<std::string>& reserved_names) {
    #####: 2422:  if (std::find(reserved_names.begin(), reserved_names.end(), property_name) !=
    %%%%%: 2422-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    $$$$$: 2422-block  1
call    5 never executed
    #####: 2423:      reserved_names.end()) {
    %%%%%: 2423-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2424:    ADD_FAILURE() << "Reserved key used in RecordProperty(): " << property_name
    %%%%%: 2424-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2424-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2424-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 2424-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 2424-block  4
call   12 never executed
    $$$$$: 2424-block  5
call   13 never executed
    $$$$$: 2424-block  6
    $$$$$: 2424-block  7
call   14 never executed
    #####: 2425:                  << " (" << FormatWordList(reserved_names)
    %%%%%: 2425-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2425-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2425-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
    $$$$$: 2425-block  3
call   11 never executed
    $$$$$: 2425-block  4
    #####: 2426:                  << " are reserved by " << GTEST_NAME_ << ")";
    %%%%%: 2426-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2426-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2426-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 2426-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 2427:    return false;
        -: 2428:  }
    #####: 2429:  return true;
    %%%%%: 2429-block  0
        -: 2430:}
        -: 2431:
        -: 2432:// Adds a failure if the key is a reserved attribute of the element named
        -: 2433:// xml_element.  Returns true if the property is valid.
function _ZN7testing10TestResult20ValidateTestPropertyERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_12TestPropertyE called 0 returned 0% blocks executed 0%
    #####: 2434:bool TestResult::ValidateTestProperty(const std::string& xml_element,
        -: 2435:                                      const TestProperty& test_property) {
    #####: 2436:  return ValidateTestPropertyName(test_property.key(),
    %%%%%: 2436-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 2436-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
    $$$$$: 2436-block  2
call    9 never executed
    $$$$$: 2436-block  3
call   10 never executed
    $$$$$: 2436-block  4
    #####: 2437:                                  GetReservedAttributesForElement(xml_element));
    %%%%%: 2437-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2437-block  1
    %%%%%: 2437-block  2
call    3 never executed
call    4 never executed
    %%%%%: 2437-block  3
    $$$$$: 2437-block  4
call    5 never executed
    $$$$$: 2437-block  5
        -: 2438:}
        -: 2439:
        -: 2440:// Clears the object.
function _ZN7testing10TestResult5ClearEv called 2 returned 100% blocks executed 100%
        2: 2441:void TestResult::Clear() {
        2: 2442:  test_part_results_.clear();
        2: 2442-block  0
call    0 returned 2
        2: 2443:  test_properties_.clear();
call    0 returned 2
        2: 2444:  death_test_count_ = 0;
        2: 2445:  elapsed_time_ = 0;
        2: 2446:}
        -: 2447:
        -: 2448:// Returns true off the test part was skipped.
function _ZN7testingL15TestPartSkippedERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 2449:static bool TestPartSkipped(const TestPartResult& result) {
    #####: 2450:  return result.skipped();
    %%%%%: 2450-block  0
call    0 never executed
        -: 2451:}
        -: 2452:
        -: 2453:// Returns true if and only if the test was skipped.
function _ZNK7testing10TestResult7SkippedEv called 0 returned 0% blocks executed 0%
    #####: 2454:bool TestResult::Skipped() const {
    #####: 2455:  return !Failed() && CountIf(test_part_results_, TestPartSkipped) > 0;
    %%%%%: 2455-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2455-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2455-block  2
    %%%%%: 2455-block  3
    %%%%%: 2455-block  4
        -: 2456:}
        -: 2457:
        -: 2458:// Returns true if and only if the test failed.
function _ZNK7testing10TestResult6FailedEv called 2 returned 100% blocks executed 50%
        2: 2459:bool TestResult::Failed() const {
       2*: 2460:  for (int i = 0; i < total_part_count(); ++i) {
        2: 2460-block  0
    %%%%%: 2460-block  1
        2: 2460-block  2
call    0 returned 2
branch  1 taken 0
branch  2 taken 2 (fallthrough)
    #####: 2461:    if (GetTestPartResult(i).failed()) return true;
    %%%%%: 2461-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2461-block  1
        -: 2462:  }
        2: 2463:  return false;
        2: 2463-block  0
        -: 2464:}
        -: 2465:
        -: 2466:// Returns true if and only if the test part fatally failed.
function _ZN7testingL21TestPartFatallyFailedERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 2467:static bool TestPartFatallyFailed(const TestPartResult& result) {
    #####: 2468:  return result.fatally_failed();
    %%%%%: 2468-block  0
call    0 never executed
        -: 2469:}
        -: 2470:
        -: 2471:// Returns true if and only if the test fatally failed.
function _ZNK7testing10TestResult15HasFatalFailureEv called 0 returned 0% blocks executed 0%
    #####: 2472:bool TestResult::HasFatalFailure() const {
    #####: 2473:  return CountIf(test_part_results_, TestPartFatallyFailed) > 0;
    %%%%%: 2473-block  0
call    0 never executed
        -: 2474:}
        -: 2475:
        -: 2476:// Returns true if and only if the test part non-fatally failed.
function _ZN7testingL24TestPartNonfatallyFailedERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 2477:static bool TestPartNonfatallyFailed(const TestPartResult& result) {
    #####: 2478:  return result.nonfatally_failed();
    %%%%%: 2478-block  0
call    0 never executed
        -: 2479:}
        -: 2480:
        -: 2481:// Returns true if and only if the test has a non-fatal failure.
function _ZNK7testing10TestResult18HasNonfatalFailureEv called 0 returned 0% blocks executed 0%
    #####: 2482:bool TestResult::HasNonfatalFailure() const {
    #####: 2483:  return CountIf(test_part_results_, TestPartNonfatallyFailed) > 0;
    %%%%%: 2483-block  0
call    0 never executed
        -: 2484:}
        -: 2485:
        -: 2486:// Gets the number of all test parts.  This is the sum of the number
        -: 2487:// of successful test parts and the number of failed test parts.
function _ZNK7testing10TestResult16total_part_countEv called 2 returned 100% blocks executed 100%
        2: 2488:int TestResult::total_part_count() const {
        2: 2489:  return static_cast<int>(test_part_results_.size());
        2: 2489-block  0
call    0 returned 2
        -: 2490:}
        -: 2491:
        -: 2492:// Returns the number of the test properties.
function _ZNK7testing10TestResult19test_property_countEv called 0 returned 0% blocks executed 0%
    #####: 2493:int TestResult::test_property_count() const {
    #####: 2494:  return static_cast<int>(test_properties_.size());
    %%%%%: 2494-block  0
call    0 never executed
        -: 2495:}
        -: 2496:
        -: 2497:// class Test
        -: 2498:
        -: 2499:// Creates a Test object.
        -: 2500:
        -: 2501:// The c'tor saves the states of all flags.
    #####: 2502:Test::Test() : gtest_flag_saver_(new GTEST_FLAG_SAVER_) {}
------------------
_ZN7testing4TestC1Ev:
function _ZN7testing4TestC1Ev called 0 returned 0% blocks executed 0%
    #####: 2502:Test::Test() : gtest_flag_saver_(new GTEST_FLAG_SAVER_) {}
    %%%%%: 2502-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2502-block  1
call    4 never executed
    $$$$$: 2502-block  2
branch  5 never executed
branch  6 never executed
    $$$$$: 2502-block  3
call    7 never executed
------------------
_ZN7testing4TestC2Ev:
function _ZN7testing4TestC2Ev called 0 returned 0% blocks executed 0%
    #####: 2502:Test::Test() : gtest_flag_saver_(new GTEST_FLAG_SAVER_) {}
    %%%%%: 2502-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2502-block  1
call    4 never executed
    $$$$$: 2502-block  2
branch  5 never executed
branch  6 never executed
    $$$$$: 2502-block  3
call    7 never executed
------------------
        -: 2503:
        -: 2504:// The d'tor restores the states of all flags.  The actual work is
        -: 2505:// done by the d'tor of the gtest_flag_saver_ field, and thus not
        -: 2506:// visible here.
    #####: 2507:Test::~Test() = default;
------------------
_ZN7testing4TestD0Ev:
function _ZN7testing4TestD0Ev called 0 returned 0% blocks executed 0%
    #####: 2507:Test::~Test() = default;
    %%%%%: 2507-block  0
call    0 never executed
call    1 never executed
------------------
_ZN7testing4TestD1Ev:
function _ZN7testing4TestD1Ev called 0 returned 0% blocks executed 0%
    #####: 2507:Test::~Test() = default;
    %%%%%: 2507-block  0
call    0 never executed
------------------
_ZN7testing4TestD2Ev:
function _ZN7testing4TestD2Ev called 0 returned 0% blocks executed 0%
    #####: 2507:Test::~Test() = default;
    %%%%%: 2507-block  0
call    0 never executed
------------------
        -: 2508:
        -: 2509:// Sets up the test fixture.
        -: 2510://
        -: 2511:// A sub-class may override this.
function _ZN7testing4Test5SetUpEv called 0 returned 0% blocks executed 0%
    #####: 2512:void Test::SetUp() {}
        -: 2513:
        -: 2514:// Tears down the test fixture.
        -: 2515://
        -: 2516:// A sub-class may override this.
function _ZN7testing4Test8TearDownEv called 0 returned 0% blocks executed 0%
    #####: 2517:void Test::TearDown() {}
        -: 2518:
        -: 2519:// Allows user supplied key value pairs to be recorded for later output.
function _ZN7testing4Test14RecordPropertyERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_ called 0 returned 0% blocks executed 0%
    #####: 2520:void Test::RecordProperty(const std::string& key, const std::string& value) {
    #####: 2521:  UnitTest::GetInstance()->RecordProperty(key, value);
    %%%%%: 2521-block  0
call    0 never executed
call    1 never executed
    #####: 2522:}
        -: 2523:
        -: 2524:namespace internal {
        -: 2525:
function _ZN7testing8internal30ReportFailureInUnknownLocationENS_14TestPartResult4TypeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 2526:void ReportFailureInUnknownLocation(TestPartResult::Type result_type,
        -: 2527:                                    const std::string& message) {
        -: 2528:  // This function is a friend of UnitTest and as such has access to
        -: 2529:  // AddTestPartResult.
    #####: 2530:  UnitTest::GetInstance()->AddTestPartResult(
    %%%%%: 2530-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 2530-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 2530-block  2
call    8 never executed
call    9 never executed
    $$$$$: 2530-block  3
call   10 never executed
    $$$$$: 2530-block  4
call   11 never executed
    $$$$$: 2530-block  5
        -: 2531:      result_type,
        -: 2532:      nullptr,  // No info about the source file where the exception occurred.
        -: 2533:      -1,       // We have no info on which line caused the exception.
        -: 2534:      message,
        -: 2535:      "");  // No stack trace, either.
    #####: 2536:}
        -: 2537:
        -: 2538:}  // namespace internal
        -: 2539:
        -: 2540:// Google Test requires all tests in the same test suite to use the same test
        -: 2541:// fixture class.  This function checks if the current test has the
        -: 2542:// same fixture class as the first test in the current test suite.  If
        -: 2543:// yes, it returns true; otherwise it generates a Google Test failure and
        -: 2544:// returns false.
function _ZN7testing4Test19HasSameFixtureClassEv called 0 returned 0% blocks executed 0%
    #####: 2545:bool Test::HasSameFixtureClass() {
    #####: 2546:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
    %%%%%: 2546-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2547:  const TestSuite* const test_suite = impl->current_test_suite();
    %%%%%: 2547-block  0
call    0 never executed
        -: 2548:
        -: 2549:  // Info about the first test in the current test suite.
    #####: 2550:  const TestInfo* const first_test_info = test_suite->test_info_list()[0];
call    0 never executed
call    1 never executed
    #####: 2551:  const internal::TypeId first_fixture_id = first_test_info->fixture_class_id_;
    #####: 2552:  const char* const first_test_name = first_test_info->name();
call    0 never executed
        -: 2553:
        -: 2554:  // Info about the current test.
    #####: 2555:  const TestInfo* const this_test_info = impl->current_test_info();
call    0 never executed
    #####: 2556:  const internal::TypeId this_fixture_id = this_test_info->fixture_class_id_;
    #####: 2557:  const char* const this_test_name = this_test_info->name();
call    0 never executed
        -: 2558:
    #####: 2559:  if (this_fixture_id != first_fixture_id) {
branch  0 never executed
branch  1 never executed
        -: 2560:    // Is the first test defined using TEST?
    #####: 2561:    const bool first_is_TEST = first_fixture_id == internal::GetTestTypeId();
    %%%%%: 2561-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2562:    // Is this test defined using TEST?
    #####: 2563:    const bool this_is_TEST = this_fixture_id == internal::GetTestTypeId();
    %%%%%: 2563-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2564:
    #####: 2565:    if (first_is_TEST || this_is_TEST) {
    %%%%%: 2565-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2565-block  1
branch  2 never executed
branch  3 never executed
        -: 2566:      // Both TEST and TEST_F appear in same test suite, which is incorrect.
        -: 2567:      // Tell the user how to fix this.
        -: 2568:
        -: 2569:      // Gets the name of the TEST and the name of the TEST_F.  Note
        -: 2570:      // that first_is_TEST and this_is_TEST cannot both be true, as
        -: 2571:      // the fixture IDs are different for the two tests.
    #####: 2572:      const char* const TEST_name =
    %%%%%: 2572-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2572-block  1
    %%%%%: 2572-block  2
        -: 2573:          first_is_TEST ? first_test_name : this_test_name;
    #####: 2574:      const char* const TEST_F_name =
    %%%%%: 2574-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2574-block  1
    %%%%%: 2574-block  2
        -: 2575:          first_is_TEST ? this_test_name : first_test_name;
        -: 2576:
    #####: 2577:      ADD_FAILURE()
    %%%%%: 2577-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2577-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2577-block  2
call    6 never executed
    $$$$$: 2577-block  3
call    7 never executed
    $$$$$: 2577-block  4
    $$$$$: 2577-block  5
call    8 never executed
    $$$$$: 2577-block  6
    #####: 2578:          << "All tests in the same test suite must use the same test fixture\n"
    %%%%%: 2578-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2579:          << "class, so mixing TEST_F and TEST in the same test suite is\n"
    %%%%%: 2579-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2580:          << "illegal.  In test suite " << this_test_info->test_suite_name()
    %%%%%: 2580-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2580-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
    $$$$$: 2580-block  2
    #####: 2581:          << ",\n"
    %%%%%: 2581-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2582:          << "test " << TEST_F_name << " is defined using TEST_F but\n"
    %%%%%: 2582-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2582-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2582-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 2583:          << "test " << TEST_name << " is defined using TEST.  You probably\n"
    %%%%%: 2583-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2583-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2583-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 2584:          << "want to change the TEST to TEST_F or move it to another test\n"
    %%%%%: 2584-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2585:          << "case.";
    %%%%%: 2585-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2585-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 2586:    } else {
        -: 2587:      // Two fixture classes with the same name appear in two different
        -: 2588:      // namespaces, which is not allowed. Tell the user how to fix this.
    #####: 2589:      ADD_FAILURE()
    %%%%%: 2589-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2589-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2589-block  2
call    6 never executed
    $$$$$: 2589-block  3
call    7 never executed
    $$$$$: 2589-block  4
    $$$$$: 2589-block  5
call    8 never executed
    $$$$$: 2589-block  6
    #####: 2590:          << "All tests in the same test suite must use the same test fixture\n"
    %%%%%: 2590-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2591:          << "class.  However, in test suite "
    %%%%%: 2591-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2592:          << this_test_info->test_suite_name() << ",\n"
    %%%%%: 2592-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2592-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
    $$$$$: 2592-block  2
    #####: 2593:          << "you defined test " << first_test_name << " and test "
    %%%%%: 2593-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2593-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2593-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 2594:          << this_test_name << "\n"
    %%%%%: 2594-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2594-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 2595:          << "using two different test fixture classes.  This can happen if\n"
    %%%%%: 2595-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2596:          << "the two classes are from different namespaces or translation\n"
    %%%%%: 2596-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2597:          << "units and have the same name.  You should probably rename one\n"
    %%%%%: 2597-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2598:          << "of the classes to put the tests into different test suites.";
    %%%%%: 2598-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2598-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 2599:    }
    #####: 2600:    return false;
    %%%%%: 2600-block  0
        -: 2601:  }
        -: 2602:
    #####: 2603:  return true;
    %%%%%: 2603-block  0
        -: 2604:}
        -: 2605:
        -: 2606:namespace internal {
        -: 2607:
        -: 2608:#if GTEST_HAS_EXCEPTIONS
        -: 2609:
        -: 2610:// Adds an "exception thrown" fatal failure to the current test.
function _ZN7testing8internalL25FormatCxxExceptionMessageEPKcS2_ called 0 returned 0% blocks executed 0%
    #####: 2611:static std::string FormatCxxExceptionMessage(const char* description,
        -: 2612:                                             const char* location) {
    #####: 2613:  Message message;
    %%%%%: 2613-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2614:  if (description != nullptr) {
    %%%%%: 2614-block  0
branch  0 never executed
branch  1 never executed
    #####: 2615:    message << "C++ exception with description \"" << description << "\"";
    %%%%%: 2615-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2615-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2615-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
        -: 2616:  } else {
    #####: 2617:    message << "Unknown C++ exception";
    %%%%%: 2617-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2618:  }
    #####: 2619:  message << " thrown in " << location << ".";
    %%%%%: 2619-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2619-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2619-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
        -: 2620:
    #####: 2621:  return message.GetString();
    %%%%%: 2621-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2621-block  1
    #####: 2622:}
    %%%%%: 2622-block  0
call    0 never executed
    $$$$$: 2622-block  1
call    1 never executed
        -: 2623:
        -: 2624:static std::string PrintTestPartResultToString(
        -: 2625:    const TestPartResult& test_part_result);
        -: 2626:
    #####: 2627:GoogleTestFailureException::GoogleTestFailureException(
    #####: 2628:    const TestPartResult& failure)
    #####: 2629:    : ::std::runtime_error(PrintTestPartResultToString(failure).c_str()) {}
------------------
_ZN7testing8internal26GoogleTestFailureExceptionC1ERKNS_14TestPartResultE:
function _ZN7testing8internal26GoogleTestFailureExceptionC1ERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 2627:GoogleTestFailureException::GoogleTestFailureException(
    #####: 2628:    const TestPartResult& failure)
    #####: 2629:    : ::std::runtime_error(PrintTestPartResultToString(failure).c_str()) {}
    %%%%%: 2629-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2629-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 2629-block  2
call    7 never executed
    $$$$$: 2629-block  3
call    8 never executed
------------------
_ZN7testing8internal26GoogleTestFailureExceptionC2ERKNS_14TestPartResultE:
function _ZN7testing8internal26GoogleTestFailureExceptionC2ERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 2627:GoogleTestFailureException::GoogleTestFailureException(
    #####: 2628:    const TestPartResult& failure)
    #####: 2629:    : ::std::runtime_error(PrintTestPartResultToString(failure).c_str()) {}
    %%%%%: 2629-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2629-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 2629-block  2
call    7 never executed
    $$$$$: 2629-block  3
call    8 never executed
------------------
        -: 2630:
        -: 2631:#endif  // GTEST_HAS_EXCEPTIONS
        -: 2632:
        -: 2633:// We put these helper functions in the internal namespace as IBM's xlC
        -: 2634:// compiler rejects the code if they were declared static.
        -: 2635:
        -: 2636:// Runs the given method and handles SEH exceptions it throws, when
        -: 2637:// SEH is supported; returns the 0-value for type Result in case of an
        -: 2638:// SEH exception.  (Microsoft compilers cannot handle SEH and C++
        -: 2639:// exceptions in the same function.  Therefore, we provide a separate
        -: 2640:// wrapper function for handling SEH exceptions.)
        -: 2641:template <class T, typename Result>
       1*: 2642:Result HandleSehExceptionsInMethodIfSupported(T* object, Result (T::*method)(),
        -: 2643:                                              const char* location) {
        -: 2644:#if GTEST_HAS_SEH
        -: 2645:  __try {
        -: 2646:    return (object->*method)();
        -: 2647:  } __except (internal::UnitTestOptions::GTestProcessSEH(  // NOLINT
        -: 2648:      GetExceptionCode(), location)) {
        -: 2649:    return static_cast<Result>(0);
        -: 2650:  }
        -: 2651:#else
        -: 2652:  (void)location;
       1*: 2653:  return (object->*method)();
        -: 2654:#endif  // GTEST_HAS_SEH
        -: 2655:}
------------------
_ZN7testing8internal38HandleSehExceptionsInMethodIfSupportedINS0_12UnitTestImplEbEET0_PT_MS4_FS3_vEPKc:
function _ZN7testing8internal38HandleSehExceptionsInMethodIfSupportedINS0_12UnitTestImplEbEET0_PT_MS4_FS3_vEPKc called 1 returned 100% blocks executed 83%
        1: 2642:Result HandleSehExceptionsInMethodIfSupported(T* object, Result (T::*method)(),
        -: 2643:                                              const char* location) {
        -: 2644:#if GTEST_HAS_SEH
        -: 2645:  __try {
        -: 2646:    return (object->*method)();
        -: 2647:  } __except (internal::UnitTestOptions::GTestProcessSEH(  // NOLINT
        -: 2648:      GetExceptionCode(), location)) {
        -: 2649:    return static_cast<Result>(0);
        -: 2650:  }
        -: 2651:#else
        -: 2652:  (void)location;
       1*: 2653:  return (object->*method)();
        1: 2653-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 2653-block  1
        1: 2653-block  2
        1: 2653-block  3
call    2 returned 1
        -: 2654:#endif  // GTEST_HAS_SEH
        -: 2655:}
------------------
_ZN7testing8internal38HandleSehExceptionsInMethodIfSupportedINS_9TestSuiteEvEET0_PT_MS4_FS3_vEPKc:
function _ZN7testing8internal38HandleSehExceptionsInMethodIfSupportedINS_9TestSuiteEvEET0_PT_MS4_FS3_vEPKc called 0 returned 0% blocks executed 0%
    #####: 2642:Result HandleSehExceptionsInMethodIfSupported(T* object, Result (T::*method)(),
        -: 2643:                                              const char* location) {
        -: 2644:#if GTEST_HAS_SEH
        -: 2645:  __try {
        -: 2646:    return (object->*method)();
        -: 2647:  } __except (internal::UnitTestOptions::GTestProcessSEH(  // NOLINT
        -: 2648:      GetExceptionCode(), location)) {
        -: 2649:    return static_cast<Result>(0);
        -: 2650:  }
        -: 2651:#else
        -: 2652:  (void)location;
    #####: 2653:  return (object->*method)();
    %%%%%: 2653-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2653-block  1
    %%%%%: 2653-block  2
    %%%%%: 2653-block  3
call    2 never executed
        -: 2654:#endif  // GTEST_HAS_SEH
        -: 2655:}
------------------
_ZN7testing8internal38HandleSehExceptionsInMethodIfSupportedINS0_15TestFactoryBaseEPNS_4TestEEET0_PT_MS6_FS5_vEPKc:
function _ZN7testing8internal38HandleSehExceptionsInMethodIfSupportedINS0_15TestFactoryBaseEPNS_4TestEEET0_PT_MS6_FS5_vEPKc called 0 returned 0% blocks executed 0%
    #####: 2642:Result HandleSehExceptionsInMethodIfSupported(T* object, Result (T::*method)(),
        -: 2643:                                              const char* location) {
        -: 2644:#if GTEST_HAS_SEH
        -: 2645:  __try {
        -: 2646:    return (object->*method)();
        -: 2647:  } __except (internal::UnitTestOptions::GTestProcessSEH(  // NOLINT
        -: 2648:      GetExceptionCode(), location)) {
        -: 2649:    return static_cast<Result>(0);
        -: 2650:  }
        -: 2651:#else
        -: 2652:  (void)location;
    #####: 2653:  return (object->*method)();
    %%%%%: 2653-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2653-block  1
    %%%%%: 2653-block  2
    %%%%%: 2653-block  3
call    2 never executed
        -: 2654:#endif  // GTEST_HAS_SEH
        -: 2655:}
------------------
_ZN7testing8internal38HandleSehExceptionsInMethodIfSupportedINS_4TestEvEET0_PT_MS4_FS3_vEPKc:
function _ZN7testing8internal38HandleSehExceptionsInMethodIfSupportedINS_4TestEvEET0_PT_MS4_FS3_vEPKc called 0 returned 0% blocks executed 0%
    #####: 2642:Result HandleSehExceptionsInMethodIfSupported(T* object, Result (T::*method)(),
        -: 2643:                                              const char* location) {
        -: 2644:#if GTEST_HAS_SEH
        -: 2645:  __try {
        -: 2646:    return (object->*method)();
        -: 2647:  } __except (internal::UnitTestOptions::GTestProcessSEH(  // NOLINT
        -: 2648:      GetExceptionCode(), location)) {
        -: 2649:    return static_cast<Result>(0);
        -: 2650:  }
        -: 2651:#else
        -: 2652:  (void)location;
    #####: 2653:  return (object->*method)();
    %%%%%: 2653-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2653-block  1
    %%%%%: 2653-block  2
    %%%%%: 2653-block  3
call    2 never executed
        -: 2654:#endif  // GTEST_HAS_SEH
        -: 2655:}
------------------
        -: 2656:
        -: 2657:// Runs the given method and catches and reports C++ and/or SEH-style
        -: 2658:// exceptions, if they are supported; returns the 0-value for type
        -: 2659:// Result in case of an SEH exception.
        -: 2660:template <class T, typename Result>
       1*: 2661:Result HandleExceptionsInMethodIfSupported(T* object, Result (T::*method)(),
        -: 2662:                                           const char* location) {
        -: 2663:  // NOTE: The user code can affect the way in which Google Test handles
        -: 2664:  // exceptions by setting GTEST_FLAG(catch_exceptions), but only before
        -: 2665:  // RUN_ALL_TESTS() starts. It is technically possible to check the flag
        -: 2666:  // after the exception is caught and either report or re-throw the
        -: 2667:  // exception based on the flag's value:
        -: 2668:  //
        -: 2669:  // try {
        -: 2670:  //   // Perform the test method.
        -: 2671:  // } catch (...) {
        -: 2672:  //   if (GTEST_FLAG_GET(catch_exceptions))
        -: 2673:  //     // Report the exception as failure.
        -: 2674:  //   else
        -: 2675:  //     throw;  // Re-throws the original exception.
        -: 2676:  // }
        -: 2677:  //
        -: 2678:  // However, the purpose of this flag is to allow the program to drop into
        -: 2679:  // the debugger when the exception is thrown. On most platforms, once the
        -: 2680:  // control enters the catch block, the exception origin information is
        -: 2681:  // lost and the debugger will stop the program at the point of the
        -: 2682:  // re-throw in this function -- instead of at the point of the original
        -: 2683:  // throw statement in the code under test.  For this reason, we perform
        -: 2684:  // the check early, sacrificing the ability to affect Google Test's
        -: 2685:  // exception handling in the method where the exception is thrown.
       1*: 2686:  if (internal::GetUnitTestImpl()->catch_exceptions()) {
        -: 2687:#if GTEST_HAS_EXCEPTIONS
        -: 2688:    try {
       1*: 2689:      return HandleSehExceptionsInMethodIfSupported(object, method, location);
    =====: 2690:    } catch (const AssertionException&) {  // NOLINT
        -: 2691:      // This failure was reported already.
    =====: 2692:    } catch (const internal::GoogleTestFailureException&) {  // NOLINT
        -: 2693:      // This exception type can only be thrown by a failed Google
        -: 2694:      // Test assertion with the intention of letting another testing
        -: 2695:      // framework catch it.  Therefore we just re-throw it.
    =====: 2696:      throw;
    =====: 2697:    } catch (const std::exception& e) {  // NOLINT
    =====: 2698:      internal::ReportFailureInUnknownLocation(
        -: 2699:          TestPartResult::kFatalFailure,
    =====: 2700:          FormatCxxExceptionMessage(e.what(), location));
    =====: 2701:    } catch (...) {  // NOLINT
    =====: 2702:      internal::ReportFailureInUnknownLocation(
        -: 2703:          TestPartResult::kFatalFailure,
        -: 2704:          FormatCxxExceptionMessage(nullptr, location));
        -: 2705:    }
    =====: 2706:    return static_cast<Result>(0);
        -: 2707:#else
        -: 2708:    return HandleSehExceptionsInMethodIfSupported(object, method, location);
        -: 2709:#endif  // GTEST_HAS_EXCEPTIONS
        -: 2710:  } else {
    #####: 2711:    return (object->*method)();
        -: 2712:  }
        -: 2713:}
------------------
_ZN7testing8internal35HandleExceptionsInMethodIfSupportedINS0_12UnitTestImplEbEET0_PT_MS4_FS3_vEPKc:
function _ZN7testing8internal35HandleExceptionsInMethodIfSupportedINS0_12UnitTestImplEbEET0_PT_MS4_FS3_vEPKc called 1 returned 100% blocks executed 18%
        1: 2661:Result HandleExceptionsInMethodIfSupported(T* object, Result (T::*method)(),
        -: 2662:                                           const char* location) {
        -: 2663:  // NOTE: The user code can affect the way in which Google Test handles
        -: 2664:  // exceptions by setting GTEST_FLAG(catch_exceptions), but only before
        -: 2665:  // RUN_ALL_TESTS() starts. It is technically possible to check the flag
        -: 2666:  // after the exception is caught and either report or re-throw the
        -: 2667:  // exception based on the flag's value:
        -: 2668:  //
        -: 2669:  // try {
        -: 2670:  //   // Perform the test method.
        -: 2671:  // } catch (...) {
        -: 2672:  //   if (GTEST_FLAG_GET(catch_exceptions))
        -: 2673:  //     // Report the exception as failure.
        -: 2674:  //   else
        -: 2675:  //     throw;  // Re-throws the original exception.
        -: 2676:  // }
        -: 2677:  //
        -: 2678:  // However, the purpose of this flag is to allow the program to drop into
        -: 2679:  // the debugger when the exception is thrown. On most platforms, once the
        -: 2680:  // control enters the catch block, the exception origin information is
        -: 2681:  // lost and the debugger will stop the program at the point of the
        -: 2682:  // re-throw in this function -- instead of at the point of the original
        -: 2683:  // throw statement in the code under test.  For this reason, we perform
        -: 2684:  // the check early, sacrificing the ability to affect Google Test's
        -: 2685:  // exception handling in the method where the exception is thrown.
        1: 2686:  if (internal::GetUnitTestImpl()->catch_exceptions()) {
        1: 2686-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0
        -: 2687:#if GTEST_HAS_EXCEPTIONS
        -: 2688:    try {
        1: 2689:      return HandleSehExceptionsInMethodIfSupported(object, method, location);
        1: 2689-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 2689-block  1
    =====: 2690:    } catch (const AssertionException&) {  // NOLINT
    $$$$$: 2690-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 2690-block  1
call    4 never executed
call    5 never executed
        -: 2691:      // This failure was reported already.
    =====: 2692:    } catch (const internal::GoogleTestFailureException&) {  // NOLINT
    $$$$$: 2692-block  0
call    0 never executed
    $$$$$: 2692-block  1
call    1 never executed
        -: 2693:      // This exception type can only be thrown by a failed Google
        -: 2694:      // Test assertion with the intention of letting another testing
        -: 2695:      // framework catch it.  Therefore we just re-throw it.
    =====: 2696:      throw;
call    0 never executed
    =====: 2697:    } catch (const std::exception& e) {  // NOLINT
    $$$$$: 2697-block  0
call    0 never executed
    $$$$$: 2697-block  1
call    1 never executed
    =====: 2698:      internal::ReportFailureInUnknownLocation(
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2698-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 2698-block  1
call    6 never executed
call    7 never executed
    $$$$$: 2698-block  2
call    8 never executed
    $$$$$: 2698-block  3
        -: 2699:          TestPartResult::kFatalFailure,
    =====: 2700:          FormatCxxExceptionMessage(e.what(), location));
call    0 never executed
    =====: 2701:    } catch (...) {  // NOLINT
    $$$$$: 2701-block  0
call    0 never executed
    $$$$$: 2701-block  1
call    1 never executed
    =====: 2702:      internal::ReportFailureInUnknownLocation(
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2702-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 2702-block  1
call    6 never executed
call    7 never executed
    $$$$$: 2702-block  2
call    8 never executed
    $$$$$: 2702-block  3
        -: 2703:          TestPartResult::kFatalFailure,
        -: 2704:          FormatCxxExceptionMessage(nullptr, location));
        -: 2705:    }
    =====: 2706:    return static_cast<Result>(0);
    $$$$$: 2706-block  0
        -: 2707:#else
        -: 2708:    return HandleSehExceptionsInMethodIfSupported(object, method, location);
        -: 2709:#endif  // GTEST_HAS_EXCEPTIONS
        -: 2710:  } else {
    #####: 2711:    return (object->*method)();
    %%%%%: 2711-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2711-block  1
    %%%%%: 2711-block  2
    %%%%%: 2711-block  3
call    2 never executed
        -: 2712:  }
        -: 2713:}
------------------
_ZN7testing8internal35HandleExceptionsInMethodIfSupportedINS_9TestSuiteEvEET0_PT_MS4_FS3_vEPKc:
function _ZN7testing8internal35HandleExceptionsInMethodIfSupportedINS_9TestSuiteEvEET0_PT_MS4_FS3_vEPKc called 0 returned 0% blocks executed 0%
    #####: 2661:Result HandleExceptionsInMethodIfSupported(T* object, Result (T::*method)(),
        -: 2662:                                           const char* location) {
        -: 2663:  // NOTE: The user code can affect the way in which Google Test handles
        -: 2664:  // exceptions by setting GTEST_FLAG(catch_exceptions), but only before
        -: 2665:  // RUN_ALL_TESTS() starts. It is technically possible to check the flag
        -: 2666:  // after the exception is caught and either report or re-throw the
        -: 2667:  // exception based on the flag's value:
        -: 2668:  //
        -: 2669:  // try {
        -: 2670:  //   // Perform the test method.
        -: 2671:  // } catch (...) {
        -: 2672:  //   if (GTEST_FLAG_GET(catch_exceptions))
        -: 2673:  //     // Report the exception as failure.
        -: 2674:  //   else
        -: 2675:  //     throw;  // Re-throws the original exception.
        -: 2676:  // }
        -: 2677:  //
        -: 2678:  // However, the purpose of this flag is to allow the program to drop into
        -: 2679:  // the debugger when the exception is thrown. On most platforms, once the
        -: 2680:  // control enters the catch block, the exception origin information is
        -: 2681:  // lost and the debugger will stop the program at the point of the
        -: 2682:  // re-throw in this function -- instead of at the point of the original
        -: 2683:  // throw statement in the code under test.  For this reason, we perform
        -: 2684:  // the check early, sacrificing the ability to affect Google Test's
        -: 2685:  // exception handling in the method where the exception is thrown.
    #####: 2686:  if (internal::GetUnitTestImpl()->catch_exceptions()) {
    %%%%%: 2686-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 2687:#if GTEST_HAS_EXCEPTIONS
        -: 2688:    try {
    #####: 2689:      return HandleSehExceptionsInMethodIfSupported(object, method, location);
    %%%%%: 2689-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2689-block  1
    =====: 2690:    } catch (const AssertionException&) {  // NOLINT
    $$$$$: 2690-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 2690-block  1
call    4 never executed
call    5 never executed
        -: 2691:      // This failure was reported already.
    =====: 2692:    } catch (const internal::GoogleTestFailureException&) {  // NOLINT
    $$$$$: 2692-block  0
call    0 never executed
    $$$$$: 2692-block  1
call    1 never executed
        -: 2693:      // This exception type can only be thrown by a failed Google
        -: 2694:      // Test assertion with the intention of letting another testing
        -: 2695:      // framework catch it.  Therefore we just re-throw it.
    =====: 2696:      throw;
call    0 never executed
    =====: 2697:    } catch (const std::exception& e) {  // NOLINT
    $$$$$: 2697-block  0
call    0 never executed
    $$$$$: 2697-block  1
call    1 never executed
    =====: 2698:      internal::ReportFailureInUnknownLocation(
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2698-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 2698-block  1
call    6 never executed
call    7 never executed
    $$$$$: 2698-block  2
call    8 never executed
    $$$$$: 2698-block  3
        -: 2699:          TestPartResult::kFatalFailure,
    =====: 2700:          FormatCxxExceptionMessage(e.what(), location));
call    0 never executed
    =====: 2701:    } catch (...) {  // NOLINT
    $$$$$: 2701-block  0
call    0 never executed
    $$$$$: 2701-block  1
call    1 never executed
    =====: 2702:      internal::ReportFailureInUnknownLocation(
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2702-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 2702-block  1
call    6 never executed
call    7 never executed
    $$$$$: 2702-block  2
call    8 never executed
    $$$$$: 2702-block  3
        -: 2703:          TestPartResult::kFatalFailure,
        -: 2704:          FormatCxxExceptionMessage(nullptr, location));
        -: 2705:    }
    =====: 2706:    return static_cast<Result>(0);
    $$$$$: 2706-block  0
        -: 2707:#else
        -: 2708:    return HandleSehExceptionsInMethodIfSupported(object, method, location);
        -: 2709:#endif  // GTEST_HAS_EXCEPTIONS
        -: 2710:  } else {
    #####: 2711:    return (object->*method)();
    %%%%%: 2711-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2711-block  1
    %%%%%: 2711-block  2
    %%%%%: 2711-block  3
call    2 never executed
        -: 2712:  }
        -: 2713:}
------------------
_ZN7testing8internal35HandleExceptionsInMethodIfSupportedINS0_15TestFactoryBaseEPNS_4TestEEET0_PT_MS6_FS5_vEPKc:
function _ZN7testing8internal35HandleExceptionsInMethodIfSupportedINS0_15TestFactoryBaseEPNS_4TestEEET0_PT_MS6_FS5_vEPKc called 0 returned 0% blocks executed 0%
    #####: 2661:Result HandleExceptionsInMethodIfSupported(T* object, Result (T::*method)(),
        -: 2662:                                           const char* location) {
        -: 2663:  // NOTE: The user code can affect the way in which Google Test handles
        -: 2664:  // exceptions by setting GTEST_FLAG(catch_exceptions), but only before
        -: 2665:  // RUN_ALL_TESTS() starts. It is technically possible to check the flag
        -: 2666:  // after the exception is caught and either report or re-throw the
        -: 2667:  // exception based on the flag's value:
        -: 2668:  //
        -: 2669:  // try {
        -: 2670:  //   // Perform the test method.
        -: 2671:  // } catch (...) {
        -: 2672:  //   if (GTEST_FLAG_GET(catch_exceptions))
        -: 2673:  //     // Report the exception as failure.
        -: 2674:  //   else
        -: 2675:  //     throw;  // Re-throws the original exception.
        -: 2676:  // }
        -: 2677:  //
        -: 2678:  // However, the purpose of this flag is to allow the program to drop into
        -: 2679:  // the debugger when the exception is thrown. On most platforms, once the
        -: 2680:  // control enters the catch block, the exception origin information is
        -: 2681:  // lost and the debugger will stop the program at the point of the
        -: 2682:  // re-throw in this function -- instead of at the point of the original
        -: 2683:  // throw statement in the code under test.  For this reason, we perform
        -: 2684:  // the check early, sacrificing the ability to affect Google Test's
        -: 2685:  // exception handling in the method where the exception is thrown.
    #####: 2686:  if (internal::GetUnitTestImpl()->catch_exceptions()) {
    %%%%%: 2686-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 2687:#if GTEST_HAS_EXCEPTIONS
        -: 2688:    try {
    #####: 2689:      return HandleSehExceptionsInMethodIfSupported(object, method, location);
    %%%%%: 2689-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2689-block  1
    =====: 2690:    } catch (const AssertionException&) {  // NOLINT
    $$$$$: 2690-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 2690-block  1
call    4 never executed
call    5 never executed
        -: 2691:      // This failure was reported already.
    =====: 2692:    } catch (const internal::GoogleTestFailureException&) {  // NOLINT
    $$$$$: 2692-block  0
call    0 never executed
    $$$$$: 2692-block  1
call    1 never executed
        -: 2693:      // This exception type can only be thrown by a failed Google
        -: 2694:      // Test assertion with the intention of letting another testing
        -: 2695:      // framework catch it.  Therefore we just re-throw it.
    =====: 2696:      throw;
call    0 never executed
    =====: 2697:    } catch (const std::exception& e) {  // NOLINT
    $$$$$: 2697-block  0
call    0 never executed
    $$$$$: 2697-block  1
call    1 never executed
    =====: 2698:      internal::ReportFailureInUnknownLocation(
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2698-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 2698-block  1
call    6 never executed
call    7 never executed
    $$$$$: 2698-block  2
call    8 never executed
    $$$$$: 2698-block  3
        -: 2699:          TestPartResult::kFatalFailure,
    =====: 2700:          FormatCxxExceptionMessage(e.what(), location));
call    0 never executed
    =====: 2701:    } catch (...) {  // NOLINT
    $$$$$: 2701-block  0
call    0 never executed
    $$$$$: 2701-block  1
call    1 never executed
    =====: 2702:      internal::ReportFailureInUnknownLocation(
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2702-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 2702-block  1
call    6 never executed
call    7 never executed
    $$$$$: 2702-block  2
call    8 never executed
    $$$$$: 2702-block  3
        -: 2703:          TestPartResult::kFatalFailure,
        -: 2704:          FormatCxxExceptionMessage(nullptr, location));
        -: 2705:    }
    =====: 2706:    return static_cast<Result>(0);
    $$$$$: 2706-block  0
        -: 2707:#else
        -: 2708:    return HandleSehExceptionsInMethodIfSupported(object, method, location);
        -: 2709:#endif  // GTEST_HAS_EXCEPTIONS
        -: 2710:  } else {
    #####: 2711:    return (object->*method)();
    %%%%%: 2711-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2711-block  1
    %%%%%: 2711-block  2
    %%%%%: 2711-block  3
call    2 never executed
        -: 2712:  }
        -: 2713:}
------------------
_ZN7testing8internal35HandleExceptionsInMethodIfSupportedINS_4TestEvEET0_PT_MS4_FS3_vEPKc:
function _ZN7testing8internal35HandleExceptionsInMethodIfSupportedINS_4TestEvEET0_PT_MS4_FS3_vEPKc called 0 returned 0% blocks executed 0%
    #####: 2661:Result HandleExceptionsInMethodIfSupported(T* object, Result (T::*method)(),
        -: 2662:                                           const char* location) {
        -: 2663:  // NOTE: The user code can affect the way in which Google Test handles
        -: 2664:  // exceptions by setting GTEST_FLAG(catch_exceptions), but only before
        -: 2665:  // RUN_ALL_TESTS() starts. It is technically possible to check the flag
        -: 2666:  // after the exception is caught and either report or re-throw the
        -: 2667:  // exception based on the flag's value:
        -: 2668:  //
        -: 2669:  // try {
        -: 2670:  //   // Perform the test method.
        -: 2671:  // } catch (...) {
        -: 2672:  //   if (GTEST_FLAG_GET(catch_exceptions))
        -: 2673:  //     // Report the exception as failure.
        -: 2674:  //   else
        -: 2675:  //     throw;  // Re-throws the original exception.
        -: 2676:  // }
        -: 2677:  //
        -: 2678:  // However, the purpose of this flag is to allow the program to drop into
        -: 2679:  // the debugger when the exception is thrown. On most platforms, once the
        -: 2680:  // control enters the catch block, the exception origin information is
        -: 2681:  // lost and the debugger will stop the program at the point of the
        -: 2682:  // re-throw in this function -- instead of at the point of the original
        -: 2683:  // throw statement in the code under test.  For this reason, we perform
        -: 2684:  // the check early, sacrificing the ability to affect Google Test's
        -: 2685:  // exception handling in the method where the exception is thrown.
    #####: 2686:  if (internal::GetUnitTestImpl()->catch_exceptions()) {
    %%%%%: 2686-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 2687:#if GTEST_HAS_EXCEPTIONS
        -: 2688:    try {
    #####: 2689:      return HandleSehExceptionsInMethodIfSupported(object, method, location);
    %%%%%: 2689-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2689-block  1
    =====: 2690:    } catch (const AssertionException&) {  // NOLINT
    $$$$$: 2690-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 2690-block  1
call    4 never executed
call    5 never executed
        -: 2691:      // This failure was reported already.
    =====: 2692:    } catch (const internal::GoogleTestFailureException&) {  // NOLINT
    $$$$$: 2692-block  0
call    0 never executed
    $$$$$: 2692-block  1
call    1 never executed
        -: 2693:      // This exception type can only be thrown by a failed Google
        -: 2694:      // Test assertion with the intention of letting another testing
        -: 2695:      // framework catch it.  Therefore we just re-throw it.
    =====: 2696:      throw;
call    0 never executed
    =====: 2697:    } catch (const std::exception& e) {  // NOLINT
    $$$$$: 2697-block  0
call    0 never executed
    $$$$$: 2697-block  1
call    1 never executed
    =====: 2698:      internal::ReportFailureInUnknownLocation(
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2698-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 2698-block  1
call    6 never executed
call    7 never executed
    $$$$$: 2698-block  2
call    8 never executed
    $$$$$: 2698-block  3
        -: 2699:          TestPartResult::kFatalFailure,
    =====: 2700:          FormatCxxExceptionMessage(e.what(), location));
call    0 never executed
    =====: 2701:    } catch (...) {  // NOLINT
    $$$$$: 2701-block  0
call    0 never executed
    $$$$$: 2701-block  1
call    1 never executed
    =====: 2702:      internal::ReportFailureInUnknownLocation(
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2702-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 2702-block  1
call    6 never executed
call    7 never executed
    $$$$$: 2702-block  2
call    8 never executed
    $$$$$: 2702-block  3
        -: 2703:          TestPartResult::kFatalFailure,
        -: 2704:          FormatCxxExceptionMessage(nullptr, location));
        -: 2705:    }
    =====: 2706:    return static_cast<Result>(0);
    $$$$$: 2706-block  0
        -: 2707:#else
        -: 2708:    return HandleSehExceptionsInMethodIfSupported(object, method, location);
        -: 2709:#endif  // GTEST_HAS_EXCEPTIONS
        -: 2710:  } else {
    #####: 2711:    return (object->*method)();
    %%%%%: 2711-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2711-block  1
    %%%%%: 2711-block  2
    %%%%%: 2711-block  3
call    2 never executed
        -: 2712:  }
        -: 2713:}
------------------
        -: 2714:
        -: 2715:}  // namespace internal
        -: 2716:
        -: 2717:// Runs the test and updates the test result.
function _ZN7testing4Test3RunEv called 0 returned 0% blocks executed 0%
    #####: 2718:void Test::Run() {
    #####: 2719:  if (!HasSameFixtureClass()) return;
    %%%%%: 2719-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2719-block  1
        -: 2720:
    #####: 2721:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
    %%%%%: 2721-block  0
call    0 never executed
    #####: 2722:  impl->os_stack_trace_getter()->UponLeavingGTest();
call    0 never executed
call    1 never executed
    #####: 2723:  internal::HandleExceptionsInMethodIfSupported(this, &Test::SetUp, "SetUp()");
call    0 never executed
        -: 2724:  // We will run the test only if SetUp() was successful and didn't call
        -: 2725:  // GTEST_SKIP().
    #####: 2726:  if (!HasFatalFailure() && !IsSkipped()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2726-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2726-block  1
    %%%%%: 2726-block  2
    %%%%%: 2726-block  3
branch  6 never executed
branch  7 never executed
    #####: 2727:    impl->os_stack_trace_getter()->UponLeavingGTest();
    %%%%%: 2727-block  0
call    0 never executed
call    1 never executed
    #####: 2728:    internal::HandleExceptionsInMethodIfSupported(this, &Test::TestBody,
call    0 never executed
        -: 2729:                                                  "the test body");
        -: 2730:  }
        -: 2731:
        -: 2732:  // However, we want to clean up as much as possible.  Hence we will
        -: 2733:  // always call TearDown(), even if SetUp() or the test body has
        -: 2734:  // failed.
    #####: 2735:  impl->os_stack_trace_getter()->UponLeavingGTest();
    %%%%%: 2735-block  0
call    0 never executed
call    1 never executed
    #####: 2736:  internal::HandleExceptionsInMethodIfSupported(this, &Test::TearDown,
call    0 never executed
        -: 2737:                                                "TearDown()");
        -: 2738:}
        -: 2739:
        -: 2740:// Returns true if and only if the current test has a fatal failure.
function _ZN7testing4Test15HasFatalFailureEv called 0 returned 0% blocks executed 0%
    #####: 2741:bool Test::HasFatalFailure() {
    #####: 2742:  return internal::GetUnitTestImpl()->current_test_result()->HasFatalFailure();
    %%%%%: 2742-block  0
call    0 never executed
call    1 never executed
call    2 never executed
        -: 2743:}
        -: 2744:
        -: 2745:// Returns true if and only if the current test has a non-fatal failure.
function _ZN7testing4Test18HasNonfatalFailureEv called 0 returned 0% blocks executed 0%
    #####: 2746:bool Test::HasNonfatalFailure() {
        -: 2747:  return internal::GetUnitTestImpl()
        -: 2748:      ->current_test_result()
    #####: 2749:      ->HasNonfatalFailure();
    %%%%%: 2749-block  0
call    0 never executed
call    1 never executed
call    2 never executed
        -: 2750:}
        -: 2751:
        -: 2752:// Returns true if and only if the current test was skipped.
function _ZN7testing4Test9IsSkippedEv called 0 returned 0% blocks executed 0%
    #####: 2753:bool Test::IsSkipped() {
    #####: 2754:  return internal::GetUnitTestImpl()->current_test_result()->Skipped();
    %%%%%: 2754-block  0
call    0 never executed
call    1 never executed
call    2 never executed
        -: 2755:}
        -: 2756:
        -: 2757:// class TestInfo
        -: 2758:
        -: 2759:// Constructs a TestInfo object. It assumes ownership of the test factory
        -: 2760:// object.
       1*: 2761:TestInfo::TestInfo(std::string a_test_suite_name, std::string a_name,
        -: 2762:                   const char* a_type_param, const char* a_value_param,
        -: 2763:                   internal::CodeLocation a_code_location,
        -: 2764:                   internal::TypeId fixture_class_id,
       1*: 2765:                   internal::TestFactoryBase* factory)
       1*: 2766:    : test_suite_name_(std::move(a_test_suite_name)),
       1*: 2767:      name_(std::move(a_name)),
       1*: 2768:      type_param_(a_type_param ? new std::string(a_type_param) : nullptr),
       1*: 2769:      value_param_(a_value_param ? new std::string(a_value_param) : nullptr),
       1*: 2770:      location_(std::move(a_code_location)),
       1*: 2771:      fixture_class_id_(fixture_class_id),
       1*: 2772:      should_run_(false),
       1*: 2773:      is_disabled_(false),
       1*: 2774:      matches_filter_(false),
       1*: 2775:      is_in_another_shard_(false),
       1*: 2776:      factory_(factory),
       1*: 2777:      result_() {}
------------------
_ZN7testing8TestInfoC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_PKcS8_NS_8internal12CodeLocationEPKvPNS9_15TestFactoryBaseE:
function _ZN7testing8TestInfoC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_PKcS8_NS_8internal12CodeLocationEPKvPNS9_15TestFactoryBaseE called 1 returned 100% blocks executed 33%
        1: 2761:TestInfo::TestInfo(std::string a_test_suite_name, std::string a_name,
        -: 2762:                   const char* a_type_param, const char* a_value_param,
        -: 2763:                   internal::CodeLocation a_code_location,
        -: 2764:                   internal::TypeId fixture_class_id,
        1: 2765:                   internal::TestFactoryBase* factory)
        1: 2766:    : test_suite_name_(std::move(a_test_suite_name)),
        1: 2766-block  0
call    0 returned 1
call    1 returned 1
        1: 2767:      name_(std::move(a_name)),
call    0 returned 1
call    1 returned 1
       1*: 2768:      type_param_(a_type_param ? new std::string(a_type_param) : nullptr),
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 2768-block  0
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 2768-block  1
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 2768-block  2
        1: 2768-block  3
        1: 2768-block  4
call    9 returned 1
branch 10 taken 0 (fallthrough)
branch 11 taken 1
    %%%%%: 2768-block  5
call   12 never executed
    $$$$$: 2768-block  6
branch 13 never executed
branch 14 never executed
    $$$$$: 2768-block  7
call   15 never executed
    $$$$$: 2768-block  8
    $$$$$: 2768-block  9
branch 16 never executed
branch 17 never executed
    $$$$$: 2768-block 10
branch 18 never executed
branch 19 never executed
    $$$$$: 2768-block 11
call   20 never executed
       1*: 2769:      value_param_(a_value_param ? new std::string(a_value_param) : nullptr),
        1: 2769-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 2769-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 2769-block  2
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 2769-block  3
        1: 2769-block  4
        1: 2769-block  5
call    9 returned 1
branch 10 taken 0 (fallthrough)
branch 11 taken 1
    %%%%%: 2769-block  6
call   12 never executed
    $$$$$: 2769-block  7
branch 13 never executed
branch 14 never executed
    $$$$$: 2769-block  8
call   15 never executed
    $$$$$: 2769-block  9
    $$$$$: 2769-block 10
branch 16 never executed
branch 17 never executed
    $$$$$: 2769-block 11
branch 18 never executed
branch 19 never executed
    $$$$$: 2769-block 12
call   20 never executed
        1: 2770:      location_(std::move(a_code_location)),
        1: 2770-block  0
call    0 returned 1
call    1 returned 1
        1: 2771:      fixture_class_id_(fixture_class_id),
        1: 2772:      should_run_(false),
        1: 2773:      is_disabled_(false),
        1: 2774:      matches_filter_(false),
        1: 2775:      is_in_another_shard_(false),
        1: 2776:      factory_(factory),
        1: 2777:      result_() {}
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 2777-block  0
    $$$$$: 2777-block  1
call    3 never executed
    $$$$$: 2777-block  2
call    4 never executed
    $$$$$: 2777-block  3
call    5 never executed
    $$$$$: 2777-block  4
call    6 never executed
    $$$$$: 2777-block  5
call    7 never executed
------------------
_ZN7testing8TestInfoC2ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_PKcS8_NS_8internal12CodeLocationEPKvPNS9_15TestFactoryBaseE:
function _ZN7testing8TestInfoC2ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_PKcS8_NS_8internal12CodeLocationEPKvPNS9_15TestFactoryBaseE called 0 returned 0% blocks executed 0%
    #####: 2761:TestInfo::TestInfo(std::string a_test_suite_name, std::string a_name,
        -: 2762:                   const char* a_type_param, const char* a_value_param,
        -: 2763:                   internal::CodeLocation a_code_location,
        -: 2764:                   internal::TypeId fixture_class_id,
    #####: 2765:                   internal::TestFactoryBase* factory)
    #####: 2766:    : test_suite_name_(std::move(a_test_suite_name)),
    %%%%%: 2766-block  0
call    0 never executed
call    1 never executed
    #####: 2767:      name_(std::move(a_name)),
call    0 never executed
call    1 never executed
    #####: 2768:      type_param_(a_type_param ? new std::string(a_type_param) : nullptr),
branch  0 never executed
branch  1 never executed
    %%%%%: 2768-block  0
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 2768-block  1
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 2768-block  2
    %%%%%: 2768-block  3
    %%%%%: 2768-block  4
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 2768-block  5
call   12 never executed
    $$$$$: 2768-block  6
branch 13 never executed
branch 14 never executed
    $$$$$: 2768-block  7
call   15 never executed
    $$$$$: 2768-block  8
    $$$$$: 2768-block  9
branch 16 never executed
branch 17 never executed
    $$$$$: 2768-block 10
branch 18 never executed
branch 19 never executed
    $$$$$: 2768-block 11
call   20 never executed
    #####: 2769:      value_param_(a_value_param ? new std::string(a_value_param) : nullptr),
    %%%%%: 2769-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2769-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 2769-block  2
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 2769-block  3
    %%%%%: 2769-block  4
    %%%%%: 2769-block  5
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 2769-block  6
call   12 never executed
    $$$$$: 2769-block  7
branch 13 never executed
branch 14 never executed
    $$$$$: 2769-block  8
call   15 never executed
    $$$$$: 2769-block  9
    $$$$$: 2769-block 10
branch 16 never executed
branch 17 never executed
    $$$$$: 2769-block 11
branch 18 never executed
branch 19 never executed
    $$$$$: 2769-block 12
call   20 never executed
    #####: 2770:      location_(std::move(a_code_location)),
    %%%%%: 2770-block  0
call    0 never executed
call    1 never executed
    #####: 2771:      fixture_class_id_(fixture_class_id),
    #####: 2772:      should_run_(false),
    #####: 2773:      is_disabled_(false),
    #####: 2774:      matches_filter_(false),
    #####: 2775:      is_in_another_shard_(false),
    #####: 2776:      factory_(factory),
    #####: 2777:      result_() {}
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2777-block  0
    $$$$$: 2777-block  1
call    3 never executed
    $$$$$: 2777-block  2
call    4 never executed
    $$$$$: 2777-block  3
call    5 never executed
    $$$$$: 2777-block  4
call    6 never executed
    $$$$$: 2777-block  5
call    7 never executed
------------------
        -: 2778:
        -: 2779:// Destructs a TestInfo object.
    #####: 2780:TestInfo::~TestInfo() { delete factory_; }
------------------
_ZN7testing8TestInfoD1Ev:
function _ZN7testing8TestInfoD1Ev called 0 returned 0% blocks executed 0%
    #####: 2780:TestInfo::~TestInfo() { delete factory_; }
    %%%%%: 2780-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2780-block  1
call    2 never executed
    %%%%%: 2780-block  2
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
------------------
_ZN7testing8TestInfoD2Ev:
function _ZN7testing8TestInfoD2Ev called 0 returned 0% blocks executed 0%
    #####: 2780:TestInfo::~TestInfo() { delete factory_; }
    %%%%%: 2780-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2780-block  1
call    2 never executed
    %%%%%: 2780-block  2
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
------------------
        -: 2781:
        -: 2782:namespace internal {
        -: 2783:
        -: 2784:// Creates a new TestInfo object and registers it with Google Test;
        -: 2785:// returns the created object.
        -: 2786://
        -: 2787:// Arguments:
        -: 2788://
        -: 2789://   test_suite_name:  name of the test suite
        -: 2790://   name:             name of the test
        -: 2791://   type_param:       the name of the test's type parameter, or NULL if
        -: 2792://                     this is not a typed or a type-parameterized test.
        -: 2793://   value_param:      text representation of the test's value parameter,
        -: 2794://                     or NULL if this is not a value-parameterized test.
        -: 2795://   code_location:    code location where the test is defined
        -: 2796://   fixture_class_id: ID of the test fixture class
        -: 2797://   set_up_tc:        pointer to the function that sets up the test suite
        -: 2798://   tear_down_tc:     pointer to the function that tears down the test suite
        -: 2799://   factory:          pointer to the factory that creates a test object.
        -: 2800://                     The newly created TestInfo instance will assume
        -: 2801://                     ownership of the factory object.
function _ZN7testing8internal23MakeAndRegisterTestInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKcS8_S8_NS0_12CodeLocationEPKvPFvvESD_PNS0_15TestFactoryBaseE called 1 returned 100% blocks executed 55%
        1: 2802:TestInfo* MakeAndRegisterTestInfo(
        -: 2803:    std::string test_suite_name, const char* name, const char* type_param,
        -: 2804:    const char* value_param, CodeLocation code_location,
        -: 2805:    TypeId fixture_class_id, SetUpTestSuiteFunc set_up_tc,
        -: 2806:    TearDownTestSuiteFunc tear_down_tc, TestFactoryBase* factory) {
        -: 2807:  TestInfo* const test_info =
        1: 2808:      new TestInfo(std::move(test_suite_name), name, type_param, value_param,
        1: 2809:                   std::move(code_location), fixture_class_id, factory);
        1: 2809-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1: 2809-block  1
call    7 returned 1
call    8 returned 1
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
        1: 2809-block  2
call   12 returned 1
call   13 returned 1
call   14 returned 1
call   15 returned 1
    $$$$$: 2809-block  3
call   16 never executed
    $$$$$: 2809-block  4
    $$$$$: 2809-block  5
call   17 never executed
    $$$$$: 2809-block  6
call   18 never executed
    $$$$$: 2809-block  7
    $$$$$: 2809-block  8
    $$$$$: 2809-block  9
call   19 never executed
    $$$$$: 2809-block 10
    $$$$$: 2809-block 11
branch 20 never executed
branch 21 never executed
    $$$$$: 2809-block 12
call   22 never executed
        1: 2810:  GetUnitTestImpl()->AddTestInfo(set_up_tc, tear_down_tc, test_info);
call    0 returned 1
call    1 returned 1
        1: 2811:  return test_info;
        1: 2811-block  0
        -: 2812:}
        -: 2813:
function _ZN7testing8internal26ReportInvalidTestSuiteTypeEPKcRKNS0_12CodeLocationE called 0 returned 0% blocks executed 0%
    #####: 2814:void ReportInvalidTestSuiteType(const char* test_suite_name,
        -: 2815:                                const CodeLocation& code_location) {
    #####: 2816:  Message errors;
    %%%%%: 2816-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2817:  errors
    #####: 2818:      << "Attempted redefinition of test suite " << test_suite_name << ".\n"
    %%%%%: 2818-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2818-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2818-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 2819:      << "All tests in the same test suite must use the same test fixture\n"
    %%%%%: 2819-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2820:      << "class.  However, in test suite " << test_suite_name << ", you tried\n"
    %%%%%: 2820-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2820-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2820-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 2821:      << "to define a test using a fixture class different from the one\n"
    %%%%%: 2821-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2822:      << "used earlier. This can happen if the two fixture classes are\n"
    %%%%%: 2822-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2823:      << "from different namespaces and have the same name. You should\n"
    %%%%%: 2823-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2824:      << "probably rename one of the classes to put the tests into different\n"
    %%%%%: 2824-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2825:      << "test suites.";
    %%%%%: 2825-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2826:
    #####: 2827:  GTEST_LOG_(ERROR) << FormatFileLocation(code_location.file.c_str(),
    %%%%%: 2827-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2827-block  1
call    3 never executed
call    4 never executed
call    5 never executed
    $$$$$: 2827-block  2
call    6 never executed
    $$$$$: 2827-block  3
    $$$$$: 2827-block  4
call    7 never executed
    $$$$$: 2827-block  5
    #####: 2828:                                          code_location.line)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2829:                    << " " << errors.GetString();
    %%%%%: 2829-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2829-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2829-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 2829-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 2829-block  4
call   12 never executed
call   13 never executed
    $$$$$: 2829-block  5
call   14 never executed
    $$$$$: 2829-block  6
    #####: 2830:}
call    0 never executed
    $$$$$: 2830-block  0
call    1 never executed
        -: 2831:
        -: 2832:// This method expands all parameterized tests registered with macros TEST_P
        -: 2833:// and INSTANTIATE_TEST_SUITE_P into regular tests and registers those.
        -: 2834:// This will be done just once during the program runtime.
function _ZN7testing8internal12UnitTestImpl26RegisterParameterizedTestsEv called 1 returned 100% blocks executed 100%
        1: 2835:void UnitTestImpl::RegisterParameterizedTests() {
        1: 2836:  if (!parameterized_tests_registered_) {
        1: 2836-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 2837:    parameterized_test_registry_.RegisterTests();
        1: 2837-block  0
call    0 returned 1
        1: 2838:    type_parameterized_test_registry_.CheckForInstantiations();
call    0 returned 1
        1: 2839:    parameterized_tests_registered_ = true;
        -: 2840:  }
        1: 2841:}
        -: 2842:
        -: 2843:}  // namespace internal
        -: 2844:
        -: 2845:// Creates the test object, runs it, records its result, and then
        -: 2846:// deletes it.
function _ZN7testing8TestInfo3RunEv called 0 returned 0% blocks executed 0%
    #####: 2847:void TestInfo::Run() {
    #####: 2848:  TestEventListener* repeater = UnitTest::GetInstance()->listeners().repeater();
    %%%%%: 2848-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2848-block  1
call    3 never executed
call    4 never executed
    #####: 2849:  if (!should_run_) {
branch  0 never executed
branch  1 never executed
    #####: 2850:    if (is_disabled_ && matches_filter_) repeater->OnTestDisabled(*this);
    %%%%%: 2850-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2850-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 2850-block  2
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####: 2851:    return;
    %%%%%: 2851-block  0
        -: 2852:  }
        -: 2853:
        -: 2854:  // Tells UnitTest where to store test result.
    #####: 2855:  UnitTest::GetInstance()->set_current_test_info(this);
    %%%%%: 2855-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2855-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 2856:
        -: 2857:  // Notifies the unit test event listeners that a test is about to start.
    #####: 2858:  repeater->OnTestStart(*this);
    %%%%%: 2858-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2859:  result_.set_start_timestamp(internal::GetTimeInMillis());
    %%%%%: 2859-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2859-block  1
call    3 never executed
    #####: 2860:  internal::Timer timer;
call    0 never executed
    #####: 2861:  UnitTest::GetInstance()->UponLeavingGTest();
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2861-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 2862:
        -: 2863:  // Creates the test object.
    #####: 2864:  Test* const test = internal::HandleExceptionsInMethodIfSupported(
    #####: 2865:      factory_, &internal::TestFactoryBase::CreateTest,
    %%%%%: 2865-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2866:      "the test fixture's constructor");
        -: 2867:
        -: 2868:  // Runs the test if the constructor didn't generate a fatal failure or invoke
        -: 2869:  // GTEST_SKIP().
        -: 2870:  // Note that the object will not be null
    #####: 2871:  if (!Test::HasFatalFailure() && !Test::IsSkipped()) {
    %%%%%: 2871-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2871-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 2871-block  2
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 2871-block  3
branch  8 never executed
branch  9 never executed
    %%%%%: 2871-block  4
    %%%%%: 2871-block  5
    %%%%%: 2871-block  6
branch 10 never executed
branch 11 never executed
        -: 2872:    // This doesn't throw as all user code that can throw are wrapped into
        -: 2873:    // exception handling code.
    #####: 2874:    test->Run();
    %%%%%: 2874-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2875:  }
        -: 2876:
    #####: 2877:  if (test != nullptr) {
    %%%%%: 2877-block  0
branch  0 never executed
branch  1 never executed
        -: 2878:    // Deletes the test object.
    #####: 2879:    UnitTest::GetInstance()->UponLeavingGTest();
    %%%%%: 2879-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2879-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 2880:    internal::HandleExceptionsInMethodIfSupported(
    %%%%%: 2880-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2881:        test, &Test::DeleteSelf_, "the test fixture's destructor");
        -: 2882:  }
        -: 2883:
    #####: 2884:  result_.set_elapsed_time(timer.Elapsed());
    %%%%%: 2884-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2884-block  1
call    3 never executed
        -: 2885:
        -: 2886:  // Notifies the unit test event listener that a test has just finished.
    #####: 2887:  repeater->OnTestEnd(*this);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2888:
        -: 2889:  // Tells UnitTest to stop associating assertion results to this
        -: 2890:  // test.
    #####: 2891:  UnitTest::GetInstance()->set_current_test_info(nullptr);
    %%%%%: 2891-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2891-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 2892:}
        -: 2893:
        -: 2894:// Skip and records a skipped test result for this object.
function _ZN7testing8TestInfo4SkipEv called 0 returned 0% blocks executed 0%
    #####: 2895:void TestInfo::Skip() {
    #####: 2896:  if (!should_run_) return;
    %%%%%: 2896-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2896-block  1
        -: 2897:
    #####: 2898:  UnitTest::GetInstance()->set_current_test_info(this);
    %%%%%: 2898-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2898-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 2899:
    #####: 2900:  TestEventListener* repeater = UnitTest::GetInstance()->listeners().repeater();
    %%%%%: 2900-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2900-block  1
call    3 never executed
call    4 never executed
        -: 2901:
        -: 2902:  // Notifies the unit test event listeners that a test is about to start.
    #####: 2903:  repeater->OnTestStart(*this);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2904:
        -: 2905:  const TestPartResult test_part_result =
    #####: 2906:      TestPartResult(TestPartResult::kSkip, this->file(), this->line(), "");
    %%%%%: 2906-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -: 2907:  internal::GetUnitTestImpl()
    #####: 2908:      ->GetTestPartResultReporterForCurrentThread()
    %%%%%: 2908-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2908-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 2909:      ->ReportTestPartResult(test_part_result);
    %%%%%: 2909-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2910:
        -: 2911:  // Notifies the unit test event listener that a test has just finished.
    #####: 2912:  repeater->OnTestEnd(*this);
    %%%%%: 2912-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2913:  UnitTest::GetInstance()->set_current_test_info(nullptr);
    %%%%%: 2913-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2913-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 2914:}
    %%%%%: 2914-block  0
call    0 never executed
    $$$$$: 2914-block  1
call    1 never executed
        -: 2915:
        -: 2916:// class TestSuite
        -: 2917:
        -: 2918:// Gets the number of successful tests in this test suite.
function _ZNK7testing9TestSuite21successful_test_countEv called 1 returned 100% blocks executed 100%
        1: 2919:int TestSuite::successful_test_count() const {
        1: 2920:  return CountIf(test_info_list_, TestPassed);
        1: 2920-block  0
call    0 returned 1
        -: 2921:}
        -: 2922:
        -: 2923:// Gets the number of successful tests in this test suite.
function _ZNK7testing9TestSuite18skipped_test_countEv called 1 returned 100% blocks executed 100%
        1: 2924:int TestSuite::skipped_test_count() const {
        1: 2925:  return CountIf(test_info_list_, TestSkipped);
        1: 2925-block  0
call    0 returned 1
        -: 2926:}
        -: 2927:
        -: 2928:// Gets the number of failed tests in this test suite.
function _ZNK7testing9TestSuite17failed_test_countEv called 0 returned 0% blocks executed 0%
    #####: 2929:int TestSuite::failed_test_count() const {
    #####: 2930:  return CountIf(test_info_list_, TestFailed);
    %%%%%: 2930-block  0
call    0 never executed
        -: 2931:}
        -: 2932:
        -: 2933:// Gets the number of disabled tests that will be reported in the XML report.
function _ZNK7testing9TestSuite30reportable_disabled_test_countEv called 1 returned 100% blocks executed 100%
        1: 2934:int TestSuite::reportable_disabled_test_count() const {
        1: 2935:  return CountIf(test_info_list_, TestReportableDisabled);
        1: 2935-block  0
call    0 returned 1
        -: 2936:}
        -: 2937:
        -: 2938:// Gets the number of disabled tests in this test suite.
function _ZNK7testing9TestSuite19disabled_test_countEv called 0 returned 0% blocks executed 0%
    #####: 2939:int TestSuite::disabled_test_count() const {
    #####: 2940:  return CountIf(test_info_list_, TestDisabled);
    %%%%%: 2940-block  0
call    0 never executed
        -: 2941:}
        -: 2942:
        -: 2943:// Gets the number of tests to be printed in the XML report.
function _ZNK7testing9TestSuite21reportable_test_countEv called 0 returned 0% blocks executed 0%
    #####: 2944:int TestSuite::reportable_test_count() const {
    #####: 2945:  return CountIf(test_info_list_, TestReportable);
    %%%%%: 2945-block  0
call    0 never executed
        -: 2946:}
        -: 2947:
        -: 2948:// Get the number of tests in this test suite that should run.
function _ZNK7testing9TestSuite17test_to_run_countEv called 2 returned 100% blocks executed 100%
        2: 2949:int TestSuite::test_to_run_count() const {
        2: 2950:  return CountIf(test_info_list_, ShouldRunTest);
        2: 2950-block  0
call    0 returned 2
        -: 2951:}
        -: 2952:
        -: 2953:// Gets the number of all tests.
function _ZNK7testing9TestSuite16total_test_countEv called 0 returned 0% blocks executed 0%
    #####: 2954:int TestSuite::total_test_count() const {
    #####: 2955:  return static_cast<int>(test_info_list_.size());
    %%%%%: 2955-block  0
call    0 never executed
        -: 2956:}
        -: 2957:
        -: 2958:// Creates a TestSuite with the given name.
        -: 2959://
        -: 2960:// Arguments:
        -: 2961://
        -: 2962://   a_name:       name of the test suite
        -: 2963://   a_type_param: the name of the test suite's type parameter, or NULL if
        -: 2964://                 this is not a typed or a type-parameterized test suite.
        -: 2965://   set_up_tc:    pointer to the function that sets up the test suite
        -: 2966://   tear_down_tc: pointer to the function that tears down the test suite
       1*: 2967:TestSuite::TestSuite(const std::string& a_name, const char* a_type_param,
        -: 2968:                     internal::SetUpTestSuiteFunc set_up_tc,
       1*: 2969:                     internal::TearDownTestSuiteFunc tear_down_tc)
       1*: 2970:    : name_(a_name),
       1*: 2971:      type_param_(a_type_param ? new std::string(a_type_param) : nullptr),
       1*: 2972:      set_up_tc_(set_up_tc),
       1*: 2973:      tear_down_tc_(tear_down_tc),
       1*: 2974:      should_run_(false),
       1*: 2975:      start_timestamp_(0),
       2*: 2976:      elapsed_time_(0) {}
------------------
_ZN7testing9TestSuiteC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKcPFvvESC_:
function _ZN7testing9TestSuiteC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKcPFvvESC_ called 1 returned 100% blocks executed 33%
        1: 2967:TestSuite::TestSuite(const std::string& a_name, const char* a_type_param,
        -: 2968:                     internal::SetUpTestSuiteFunc set_up_tc,
        1: 2969:                     internal::TearDownTestSuiteFunc tear_down_tc)
        1: 2970:    : name_(a_name),
       1*: 2971:      type_param_(a_type_param ? new std::string(a_type_param) : nullptr),
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 2971-block  0
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 2971-block  1
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 2971-block  2
        1: 2971-block  3
        1: 2971-block  4
call    9 returned 1
branch 10 taken 0 (fallthrough)
branch 11 taken 1
    %%%%%: 2971-block  5
call   12 never executed
    $$$$$: 2971-block  6
branch 13 never executed
branch 14 never executed
    $$$$$: 2971-block  7
call   15 never executed
    $$$$$: 2971-block  8
    $$$$$: 2971-block  9
branch 16 never executed
branch 17 never executed
    $$$$$: 2971-block 10
branch 18 never executed
branch 19 never executed
    $$$$$: 2971-block 11
call   20 never executed
        1: 2972:      set_up_tc_(set_up_tc),
        1: 2973:      tear_down_tc_(tear_down_tc),
        1: 2974:      should_run_(false),
        1: 2975:      start_timestamp_(0),
        2: 2976:      elapsed_time_(0) {}
        1: 2976-block  0
call    0 returned 1
        1: 2976-block  1
call    1 returned 1
call    2 returned 1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 2976-block  2
    $$$$$: 2976-block  3
call    6 never executed
    $$$$$: 2976-block  4
call    7 never executed
    $$$$$: 2976-block  5
call    8 never executed
    $$$$$: 2976-block  6
call    9 never executed
------------------
_ZN7testing9TestSuiteC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKcPFvvESC_:
function _ZN7testing9TestSuiteC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKcPFvvESC_ called 0 returned 0% blocks executed 0%
    #####: 2967:TestSuite::TestSuite(const std::string& a_name, const char* a_type_param,
        -: 2968:                     internal::SetUpTestSuiteFunc set_up_tc,
    #####: 2969:                     internal::TearDownTestSuiteFunc tear_down_tc)
    #####: 2970:    : name_(a_name),
    #####: 2971:      type_param_(a_type_param ? new std::string(a_type_param) : nullptr),
branch  0 never executed
branch  1 never executed
    %%%%%: 2971-block  0
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 2971-block  1
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 2971-block  2
    %%%%%: 2971-block  3
    %%%%%: 2971-block  4
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 2971-block  5
call   12 never executed
    $$$$$: 2971-block  6
branch 13 never executed
branch 14 never executed
    $$$$$: 2971-block  7
call   15 never executed
    $$$$$: 2971-block  8
    $$$$$: 2971-block  9
branch 16 never executed
branch 17 never executed
    $$$$$: 2971-block 10
branch 18 never executed
branch 19 never executed
    $$$$$: 2971-block 11
call   20 never executed
    #####: 2972:      set_up_tc_(set_up_tc),
    #####: 2973:      tear_down_tc_(tear_down_tc),
    #####: 2974:      should_run_(false),
    #####: 2975:      start_timestamp_(0),
    #####: 2976:      elapsed_time_(0) {}
    %%%%%: 2976-block  0
call    0 never executed
    %%%%%: 2976-block  1
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2976-block  2
    $$$$$: 2976-block  3
call    6 never executed
    $$$$$: 2976-block  4
call    7 never executed
    $$$$$: 2976-block  5
call    8 never executed
    $$$$$: 2976-block  6
call    9 never executed
------------------
        -: 2977:
        -: 2978:// Destructor of TestSuite.
    #####: 2979:TestSuite::~TestSuite() {
        -: 2980:  // Deletes every Test in the collection.
    #####: 2981:  ForEach(test_info_list_, internal::Delete<TestInfo>);
    #####: 2982:}
------------------
_ZN7testing9TestSuiteD0Ev:
function _ZN7testing9TestSuiteD0Ev called 0 returned 0% blocks executed 0%
    #####: 2979:TestSuite::~TestSuite() {
        -: 2980:  // Deletes every Test in the collection.
        -: 2981:  ForEach(test_info_list_, internal::Delete<TestInfo>);
    #####: 2982:}
    %%%%%: 2982-block  0
call    0 never executed
call    1 never executed
------------------
_ZN7testing9TestSuiteD1Ev:
function _ZN7testing9TestSuiteD1Ev called 0 returned 0% blocks executed 0%
    #####: 2979:TestSuite::~TestSuite() {
        -: 2980:  // Deletes every Test in the collection.
    #####: 2981:  ForEach(test_info_list_, internal::Delete<TestInfo>);
    %%%%%: 2981-block  0
call    0 never executed
    #####: 2982:}
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
------------------
_ZN7testing9TestSuiteD2Ev:
function _ZN7testing9TestSuiteD2Ev called 0 returned 0% blocks executed 0%
    #####: 2979:TestSuite::~TestSuite() {
        -: 2980:  // Deletes every Test in the collection.
    #####: 2981:  ForEach(test_info_list_, internal::Delete<TestInfo>);
    %%%%%: 2981-block  0
call    0 never executed
    #####: 2982:}
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
------------------
        -: 2983:
        -: 2984:// Returns the i-th test among all the tests. i can range from 0 to
        -: 2985:// total_test_count() - 1. If i is not in that range, returns NULL.
function _ZNK7testing9TestSuite11GetTestInfoEi called 0 returned 0% blocks executed 0%
    #####: 2986:const TestInfo* TestSuite::GetTestInfo(int i) const {
    #####: 2987:  const int index = GetElementOr(test_indices_, i, -1);
    %%%%%: 2987-block  0
call    0 never executed
    #####: 2988:  return index < 0 ? nullptr : test_info_list_[static_cast<size_t>(index)];
branch  0 never executed
branch  1 never executed
    %%%%%: 2988-block  0
call    2 never executed
    %%%%%: 2988-block  1
    %%%%%: 2988-block  2
        -: 2989:}
        -: 2990:
        -: 2991:// Returns the i-th test among all the tests. i can range from 0 to
        -: 2992:// total_test_count() - 1. If i is not in that range, returns NULL.
function _ZN7testing9TestSuite18GetMutableTestInfoEi called 0 returned 0% blocks executed 0%
    #####: 2993:TestInfo* TestSuite::GetMutableTestInfo(int i) {
    #####: 2994:  const int index = GetElementOr(test_indices_, i, -1);
    %%%%%: 2994-block  0
call    0 never executed
    #####: 2995:  return index < 0 ? nullptr : test_info_list_[static_cast<size_t>(index)];
branch  0 never executed
branch  1 never executed
    %%%%%: 2995-block  0
call    2 never executed
    %%%%%: 2995-block  1
    %%%%%: 2995-block  2
        -: 2996:}
        -: 2997:
        -: 2998:// Adds a test to this test suite.  Will delete the test upon
        -: 2999:// destruction of the TestSuite object.
function _ZN7testing9TestSuite11AddTestInfoEPNS_8TestInfoE called 1 returned 100% blocks executed 100%
        1: 3000:void TestSuite::AddTestInfo(TestInfo* test_info) {
        1: 3001:  test_info_list_.push_back(test_info);
        1: 3001-block  0
call    0 returned 1
        1: 3002:  test_indices_.push_back(static_cast<int>(test_indices_.size()));
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 3003:}
        1: 3003-block  0
        -: 3004:
        -: 3005:// Runs every test in this TestSuite.
function _ZN7testing9TestSuite3RunEv called 0 returned 0% blocks executed 0%
    #####: 3006:void TestSuite::Run() {
    #####: 3007:  if (!should_run_) return;
    %%%%%: 3007-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 3007-block  1
        -: 3008:
    #####: 3009:  UnitTest::GetInstance()->set_current_test_suite(this);
    %%%%%: 3009-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3009-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 3010:
    #####: 3011:  TestEventListener* repeater = UnitTest::GetInstance()->listeners().repeater();
    %%%%%: 3011-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3011-block  1
call    3 never executed
call    4 never executed
        -: 3012:
        -: 3013:  // Ensure our tests are in a deterministic order.
        -: 3014:  //
        -: 3015:  // We do this by sorting lexicographically on (file, line number), providing
        -: 3016:  // an order matching what the user can see in the source code.
        -: 3017:  //
        -: 3018:  // In the common case the line number comparison shouldn't be necessary,
        -: 3019:  // because the registrations made by the TEST macro are executed in order
        -: 3020:  // within a translation unit. But this is not true of the manual registration
        -: 3021:  // API, and in more exotic scenarios a single file may be part of multiple
        -: 3022:  // translation units.
    #####: 3023:  std::stable_sort(test_info_list_.begin(), test_info_list_.end(),
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
function _ZZN7testing9TestSuite3RunEvENKUlPKNS_8TestInfoES3_E_clES3_S3_ called 0 returned 0% blocks executed 0%
    #####: 3024:                   [](const TestInfo* const a, const TestInfo* const b) {
    #####: 3025:                     if (const int result = std::strcmp(a->file(), b->file())) {
    %%%%%: 3025-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3026:                       return result < 0;
    %%%%%: 3026-block  0
        -: 3027:                     }
        -: 3028:
    #####: 3029:                     return a->line() < b->line();
    %%%%%: 3029-block  0
call    0 never executed
call    1 never executed
        -: 3030:                   });
        -: 3031:
        -: 3032:  // Call both legacy and the new API
    #####: 3033:  repeater->OnTestSuiteStart(*this);
    %%%%%: 3033-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3034://  Legacy API is deprecated but still available
        -: 3035:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
    #####: 3036:  repeater->OnTestCaseStart(*this);
    %%%%%: 3036-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3037:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3038:
    #####: 3039:  UnitTest::GetInstance()->UponLeavingGTest();
    %%%%%: 3039-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3039-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 3040:  internal::HandleExceptionsInMethodIfSupported(
    %%%%%: 3040-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3041:      this, &TestSuite::RunSetUpTestSuite, "SetUpTestSuite()");
        -: 3042:
        -: 3043:  const bool skip_all =
    #####: 3044:      ad_hoc_test_result().Failed() || ad_hoc_test_result().Skipped();
    %%%%%: 3044-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 3044-block  1
branch  4 never executed
branch  5 never executed
    %%%%%: 3044-block  2
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 3044-block  3
branch 10 never executed
branch 11 never executed
    %%%%%: 3044-block  4
    %%%%%: 3044-block  5
        -: 3045:
    #####: 3046:  start_timestamp_ = internal::GetTimeInMillis();
    %%%%%: 3046-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3047:  internal::Timer timer;
    %%%%%: 3047-block  0
call    0 never executed
    #####: 3048:  for (int i = 0; i < total_test_count(); i++) {
    %%%%%: 3048-block  0
    %%%%%: 3048-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3049:    if (skip_all) {
    %%%%%: 3049-block  0
branch  0 never executed
branch  1 never executed
    #####: 3050:      GetMutableTestInfo(i)->Skip();
    %%%%%: 3050-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3050-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 3051:    } else {
    #####: 3052:      GetMutableTestInfo(i)->Run();
    %%%%%: 3052-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3052-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 3053:    }
    #####: 3054:    if (GTEST_FLAG_GET(fail_fast) &&
    %%%%%: 3054-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 3054-block  1
    %%%%%: 3054-block  2
    %%%%%: 3054-block  3
branch  2 never executed
branch  3 never executed
    #####: 3055:        GetMutableTestInfo(i)->result()->Failed()) {
    %%%%%: 3055-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3055-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 3055-block  2
branch  7 never executed
branch  8 never executed
    #####: 3056:      for (int j = i + 1; j < total_test_count(); j++) {
    %%%%%: 3056-block  0
    %%%%%: 3056-block  1
    %%%%%: 3056-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3057:        GetMutableTestInfo(j)->Skip();
    %%%%%: 3057-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3057-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 3058:      }
    #####: 3059:      break;
    %%%%%: 3059-block  0
        -: 3060:    }
        -: 3061:  }
    #####: 3062:  elapsed_time_ = timer.Elapsed();
    %%%%%: 3062-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3063:
    #####: 3064:  UnitTest::GetInstance()->UponLeavingGTest();
    %%%%%: 3064-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3064-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 3065:  internal::HandleExceptionsInMethodIfSupported(
    %%%%%: 3065-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3066:      this, &TestSuite::RunTearDownTestSuite, "TearDownTestSuite()");
        -: 3067:
        -: 3068:  // Call both legacy and the new API
    #####: 3069:  repeater->OnTestSuiteEnd(*this);
    %%%%%: 3069-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3070://  Legacy API is deprecated but still available
        -: 3071:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
    #####: 3072:  repeater->OnTestCaseEnd(*this);
    %%%%%: 3072-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3073:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3074:
    #####: 3075:  UnitTest::GetInstance()->set_current_test_suite(nullptr);
    %%%%%: 3075-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3075-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 3076:}
        -: 3077:
        -: 3078:// Skips all tests under this TestSuite.
function _ZN7testing9TestSuite4SkipEv called 0 returned 0% blocks executed 0%
    #####: 3079:void TestSuite::Skip() {
    #####: 3080:  if (!should_run_) return;
    %%%%%: 3080-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 3080-block  1
        -: 3081:
    #####: 3082:  UnitTest::GetInstance()->set_current_test_suite(this);
    %%%%%: 3082-block  0
call    0 never executed
call    1 never executed
        -: 3083:
    #####: 3084:  TestEventListener* repeater = UnitTest::GetInstance()->listeners().repeater();
call    0 never executed
call    1 never executed
call    2 never executed
        -: 3085:
        -: 3086:  // Call both legacy and the new API
    #####: 3087:  repeater->OnTestSuiteStart(*this);
call    0 never executed
        -: 3088://  Legacy API is deprecated but still available
        -: 3089:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
    #####: 3090:  repeater->OnTestCaseStart(*this);
call    0 never executed
        -: 3091:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3092:
    #####: 3093:  for (int i = 0; i < total_test_count(); i++) {
    %%%%%: 3093-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3094:    GetMutableTestInfo(i)->Skip();
    %%%%%: 3094-block  0
call    0 never executed
call    1 never executed
        -: 3095:  }
        -: 3096:
        -: 3097:  // Call both legacy and the new API
    #####: 3098:  repeater->OnTestSuiteEnd(*this);
    %%%%%: 3098-block  0
call    0 never executed
        -: 3099:  // Legacy API is deprecated but still available
        -: 3100:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
    #####: 3101:  repeater->OnTestCaseEnd(*this);
call    0 never executed
        -: 3102:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3103:
    #####: 3104:  UnitTest::GetInstance()->set_current_test_suite(nullptr);
call    0 never executed
call    1 never executed
        -: 3105:}
        -: 3106:
        -: 3107:// Clears the results of all tests in this test suite.
function _ZN7testing9TestSuite11ClearResultEv called 1 returned 100% blocks executed 100%
        1: 3108:void TestSuite::ClearResult() {
        1: 3109:  ad_hoc_test_result_.Clear();
        1: 3109-block  0
call    0 returned 1
        1: 3110:  ForEach(test_info_list_, TestInfo::ClearTestResult);
call    0 returned 1
        1: 3111:}
        -: 3112:
        -: 3113:// Shuffles the tests in this test suite.
function _ZN7testing9TestSuite12ShuffleTestsEPNS_8internal6RandomE called 0 returned 0% blocks executed 0%
    #####: 3114:void TestSuite::ShuffleTests(internal::Random* random) {
    #####: 3115:  Shuffle(random, &test_indices_);
    %%%%%: 3115-block  0
call    0 never executed
    #####: 3116:}
        -: 3117:
        -: 3118:// Restores the test order to before the first shuffle.
function _ZN7testing9TestSuite14UnshuffleTestsEv called 1 returned 100% blocks executed 100%
        1: 3119:void TestSuite::UnshuffleTests() {
        2: 3120:  for (size_t i = 0; i < test_indices_.size(); i++) {
        1: 3120-block  0
        2: 3120-block  1
call    0 returned 2
branch  1 taken 1
branch  2 taken 1 (fallthrough)
        1: 3121:    test_indices_[i] = static_cast<int>(i);
        1: 3121-block  0
call    0 returned 1
        -: 3122:  }
        1: 3123:}
        -: 3124:
        -: 3125:// Formats a countable noun.  Depending on its quantity, either the
        -: 3126:// singular form or the plural form is used. e.g.
        -: 3127://
        -: 3128:// FormatCountableNoun(1, "formula", "formuli") returns "1 formula".
        -: 3129:// FormatCountableNoun(5, "book", "books") returns "5 books".
function _ZN7testingL19FormatCountableNounEiPKcS1_ called 5 returned 100% blocks executed 65%
        5: 3130:static std::string FormatCountableNoun(int count, const char* singular_form,
        -: 3131:                                       const char* plural_form) {
       10: 3132:  return internal::StreamableToString(count) + " " +
        5: 3132-block  0
call    0 returned 5
branch  1 taken 5 (fallthrough)
branch  2 taken 0 (throw)
        5: 3132-block  1
call    3 returned 5
branch  4 taken 5 (fallthrough)
branch  5 taken 0 (throw)
        5: 3132-block  2
call    6 returned 5
call    7 returned 5
    $$$$$: 3132-block  3
call    8 never executed
    $$$$$: 3132-block  4
call    9 never executed
    $$$$$: 3132-block  5
      10*: 3133:         (count == 1 ? singular_form : plural_form);
        5: 3133-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 5
    %%%%%: 3133-block  1
        5: 3133-block  2
        5: 3133-block  3
call    2 returned 5
branch  3 taken 5 (fallthrough)
branch  4 taken 0 (throw)
        5: 3133-block  4
        -: 3134:}
        -: 3135:
        -: 3136:// Formats the count of tests.
function _ZN7testingL15FormatTestCountEi called 3 returned 100% blocks executed 100%
        3: 3137:static std::string FormatTestCount(int test_count) {
        3: 3138:  return FormatCountableNoun(test_count, "test", "tests");
        3: 3138-block  0
call    0 returned 3
        -: 3139:}
        -: 3140:
        -: 3141:// Formats the count of test suites.
function _ZN7testingL20FormatTestSuiteCountEi called 2 returned 100% blocks executed 100%
        2: 3142:static std::string FormatTestSuiteCount(int test_suite_count) {
        2: 3143:  return FormatCountableNoun(test_suite_count, "test suite", "test suites");
        2: 3143-block  0
call    0 returned 2
        -: 3144:}
        -: 3145:
        -: 3146:// Converts a TestPartResult::Type enum to human-friendly string
        -: 3147:// representation.  Both kNonFatalFailure and kFatalFailure are translated
        -: 3148:// to "Failure", as the user usually doesn't care about the difference
        -: 3149:// between the two when viewing the test result.
function _ZN7testingL26TestPartResultTypeToStringENS_14TestPartResult4TypeE called 0 returned 0% blocks executed 0%
    #####: 3150:static const char* TestPartResultTypeToString(TestPartResult::Type type) {
    #####: 3151:  switch (type) {
    %%%%%: 3151-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3152:    case TestPartResult::kSkip:
    #####: 3153:      return "Skipped\n";
    %%%%%: 3153-block  0
    #####: 3154:    case TestPartResult::kSuccess:
    #####: 3155:      return "Success";
    %%%%%: 3155-block  0
        -: 3156:
    #####: 3157:    case TestPartResult::kNonFatalFailure:
        -: 3158:    case TestPartResult::kFatalFailure:
        -: 3159:#ifdef _MSC_VER
        -: 3160:      return "error: ";
        -: 3161:#else
    #####: 3162:      return "Failure\n";
    %%%%%: 3162-block  0
        -: 3163:#endif
    #####: 3164:    default:
    #####: 3165:      return "Unknown result type";
    %%%%%: 3165-block  0
        -: 3166:  }
        -: 3167:}
        -: 3168:
        -: 3169:namespace internal {
        -: 3170:namespace {
        -: 3171:enum class GTestColor { kDefault, kRed, kGreen, kYellow };
        -: 3172:}  // namespace
        -: 3173:
        -: 3174:// Prints a TestPartResult to an std::string.
function _ZN7testing8internalL27PrintTestPartResultToStringERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 3175:static std::string PrintTestPartResultToString(
        -: 3176:    const TestPartResult& test_part_result) {
    #####: 3177:  return (Message() << internal::FormatFileLocation(
    %%%%%: 3177-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3177-block  1
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
    $$$$$: 3177-block  2
call    9 never executed
    $$$$$: 3177-block  3
    $$$$$: 3177-block  4
call   10 never executed
        -: 3178:                           test_part_result.file_name(),
    #####: 3179:                           test_part_result.line_number())
    %%%%%: 3179-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3180:                    << " "
    %%%%%: 3180-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3181:                    << TestPartResultTypeToString(test_part_result.type())
    %%%%%: 3181-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    $$$$$: 3181-block  1
    #####: 3182:                    << test_part_result.message())
    %%%%%: 3182-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 3182-block  1
call    4 never executed
    $$$$$: 3182-block  2
    #####: 3183:      .GetString();
    %%%%%: 3183-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3183-block  1
        -: 3184:}
        -: 3185:
        -: 3186:// Prints a TestPartResult.
function _ZN7testing8internalL19PrintTestPartResultERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 3187:static void PrintTestPartResult(const TestPartResult& test_part_result) {
    #####: 3188:  const std::string& result = PrintTestPartResultToString(test_part_result);
    %%%%%: 3188-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3189:  printf("%s\n", result.c_str());
    %%%%%: 3189-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3190:  fflush(stdout);
    %%%%%: 3190-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3191:  // If the test program runs in Visual Studio or a debugger, the
        -: 3192:  // following statements add the test part result message to the Output
        -: 3193:  // window such that the user can double-click on it to jump to the
        -: 3194:  // corresponding source code location; otherwise they do nothing.
        -: 3195:#if defined(GTEST_OS_WINDOWS) && !defined(GTEST_OS_WINDOWS_MOBILE)
        -: 3196:  // We don't call OutputDebugString*() on Windows Mobile, as printing
        -: 3197:  // to stdout is done by OutputDebugString() there already - we don't
        -: 3198:  // want the same message printed twice.
        -: 3199:  ::OutputDebugStringA(result.c_str());
        -: 3200:  ::OutputDebugStringA("\n");
        -: 3201:#endif
    #####: 3202:}
    %%%%%: 3202-block  0
call    0 never executed
    $$$$$: 3202-block  1
call    1 never executed
        -: 3203:
        -: 3204:// class PrettyUnitTestResultPrinter
        -: 3205:#if defined(GTEST_OS_WINDOWS) && !defined(GTEST_OS_WINDOWS_MOBILE) &&       \
        -: 3206:    !defined(GTEST_OS_WINDOWS_GAMES) && !defined(GTEST_OS_WINDOWS_PHONE) && \
        -: 3207:    !defined(GTEST_OS_WINDOWS_RT) && !defined(GTEST_OS_WINDOWS_MINGW)
        -: 3208:
        -: 3209:// Returns the character attribute for the given color.
        -: 3210:static WORD GetColorAttribute(GTestColor color) {
        -: 3211:  switch (color) {
        -: 3212:    case GTestColor::kRed:
        -: 3213:      return FOREGROUND_RED;
        -: 3214:    case GTestColor::kGreen:
        -: 3215:      return FOREGROUND_GREEN;
        -: 3216:    case GTestColor::kYellow:
        -: 3217:      return FOREGROUND_RED | FOREGROUND_GREEN;
        -: 3218:    default:
        -: 3219:      return 0;
        -: 3220:  }
        -: 3221:}
        -: 3222:
        -: 3223:static int GetBitOffset(WORD color_mask) {
        -: 3224:  if (color_mask == 0) return 0;
        -: 3225:
        -: 3226:  int bitOffset = 0;
        -: 3227:  while ((color_mask & 1) == 0) {
        -: 3228:    color_mask >>= 1;
        -: 3229:    ++bitOffset;
        -: 3230:  }
        -: 3231:  return bitOffset;
        -: 3232:}
        -: 3233:
        -: 3234:static WORD GetNewColor(GTestColor color, WORD old_color_attrs) {
        -: 3235:  // Let's reuse the BG
        -: 3236:  static const WORD background_mask = BACKGROUND_BLUE | BACKGROUND_GREEN |
        -: 3237:                                      BACKGROUND_RED | BACKGROUND_INTENSITY;
        -: 3238:  static const WORD foreground_mask = FOREGROUND_BLUE | FOREGROUND_GREEN |
        -: 3239:                                      FOREGROUND_RED | FOREGROUND_INTENSITY;
        -: 3240:  const WORD existing_bg = old_color_attrs & background_mask;
        -: 3241:
        -: 3242:  WORD new_color =
        -: 3243:      GetColorAttribute(color) | existing_bg | FOREGROUND_INTENSITY;
        -: 3244:  static const int bg_bitOffset = GetBitOffset(background_mask);
        -: 3245:  static const int fg_bitOffset = GetBitOffset(foreground_mask);
        -: 3246:
        -: 3247:  if (((new_color & background_mask) >> bg_bitOffset) ==
        -: 3248:      ((new_color & foreground_mask) >> fg_bitOffset)) {
        -: 3249:    new_color ^= FOREGROUND_INTENSITY;  // invert intensity
        -: 3250:  }
        -: 3251:  return new_color;
        -: 3252:}
        -: 3253:
        -: 3254:#else
        -: 3255:
        -: 3256:// Returns the ANSI color code for the given color. GTestColor::kDefault is
        -: 3257:// an invalid input.
function _ZN7testing8internalL16GetAnsiColorCodeENS0_12_GLOBAL__N_110GTestColorE called 0 returned 0% blocks executed 0%
    #####: 3258:static const char* GetAnsiColorCode(GTestColor color) {
    #####: 3259:  switch (color) {
    %%%%%: 3259-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3260:    case GTestColor::kRed:
    #####: 3261:      return "1";
    %%%%%: 3261-block  0
    #####: 3262:    case GTestColor::kGreen:
    #####: 3263:      return "2";
    %%%%%: 3263-block  0
    #####: 3264:    case GTestColor::kYellow:
    #####: 3265:      return "3";
    %%%%%: 3265-block  0
    #####: 3266:    default:
    #####: 3267:      assert(false);
    %%%%%: 3267-block  0
call    0 never executed
        -: 3268:      return "9";
        -: 3269:  }
        -: 3270:}
        -: 3271:
        -: 3272:#endif  // GTEST_OS_WINDOWS && !GTEST_OS_WINDOWS_MOBILE
        -: 3273:
        -: 3274:// Returns true if and only if Google Test should use colors in the output.
function _ZN7testing8internal14ShouldUseColorEb called 1 returned 100% blocks executed 23%
        1: 3275:bool ShouldUseColor(bool stdout_is_tty) {
        1: 3276:  std::string c = GTEST_FLAG_GET(color);
        1: 3276-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3277:  const char* const gtest_color = c.c_str();
        1: 3277-block  0
call    0 returned 1
        -: 3278:
        1: 3279:  if (String::CaseInsensitiveCStringEquals(gtest_color, "auto")) {
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3279-block  0
branch  3 taken 0 (fallthrough)
branch  4 taken 1
        -: 3280:#if defined(GTEST_OS_WINDOWS) && !defined(GTEST_OS_WINDOWS_MINGW)
        -: 3281:    // On Windows the TERM variable is usually not set, but the
        -: 3282:    // console there does support colors.
        -: 3283:    return stdout_is_tty;
        -: 3284:#else
        -: 3285:    // On non-Windows platforms, we rely on the TERM variable.
    #####: 3286:    const char* const term = posix::GetEnv("TERM");
    %%%%%: 3286-block  0
call    0 never executed
        -: 3287:    const bool term_supports_color =
    #####: 3288:        term != nullptr && (String::CStringEquals(term, "xterm") ||
branch  0 never executed
branch  1 never executed
    %%%%%: 3288-block  0
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 3288-block  1
    %%%%%: 3288-block  2
    #####: 3289:                            String::CStringEquals(term, "xterm-color") ||
    %%%%%: 3289-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3290:                            String::CStringEquals(term, "xterm-kitty") ||
    %%%%%: 3290-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3291:                            String::CStringEquals(term, "alacritty") ||
    %%%%%: 3291-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3292:                            String::CStringEquals(term, "screen") ||
    %%%%%: 3292-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3293:                            String::CStringEquals(term, "tmux") ||
    %%%%%: 3293-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3294:                            String::CStringEquals(term, "rxvt-unicode") ||
    %%%%%: 3294-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3295:                            String::CStringEquals(term, "linux") ||
    %%%%%: 3295-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3296:                            String::CStringEquals(term, "cygwin") ||
    %%%%%: 3296-block  0
call    0 never executed
    #####: 3297:                            String::EndsWithCaseInsensitive(term, "-256color"));
    %%%%%: 3297-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 3297-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 3297-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 3297-block  3
branch 11 never executed
branch 12 never executed
    %%%%%: 3297-block  4
branch 13 never executed
branch 14 never executed
    %%%%%: 3297-block  5
call   15 never executed
    %%%%%: 3297-block  6
branch 16 never executed
branch 17 never executed
    %%%%%: 3297-block  7
call   18 never executed
    %%%%%: 3297-block  8
branch 19 never executed
branch 20 never executed
    %%%%%: 3297-block  9
call   21 never executed
    %%%%%: 3297-block 10
branch 22 never executed
branch 23 never executed
    %%%%%: 3297-block 11
call   24 never executed
    $$$$$: 3297-block 12
branch 25 never executed
branch 26 never executed
    $$$$$: 3297-block 13
call   27 never executed
    $$$$$: 3297-block 14
    $$$$$: 3297-block 15
branch 28 never executed
branch 29 never executed
    $$$$$: 3297-block 16
call   30 never executed
    $$$$$: 3297-block 17
    $$$$$: 3297-block 18
branch 31 never executed
branch 32 never executed
    $$$$$: 3297-block 19
call   33 never executed
    $$$$$: 3297-block 20
    $$$$$: 3297-block 21
branch 34 never executed
branch 35 never executed
    $$$$$: 3297-block 22
call   36 never executed
    $$$$$: 3297-block 23
    #####: 3298:    return stdout_is_tty && term_supports_color;
    %%%%%: 3298-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 3298-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 3298-block  2
    %%%%%: 3298-block  3
    %%%%%: 3298-block  4
        -: 3299:#endif  // GTEST_OS_WINDOWS
        -: 3300:  }
        -: 3301:
        1: 3302:  return String::CaseInsensitiveCStringEquals(gtest_color, "yes") ||
        1: 3302-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3303:         String::CaseInsensitiveCStringEquals(gtest_color, "true") ||
        1: 3303-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3303-block  1
branch  3 taken 1 (fallthrough)
branch  4 taken 0
       3*: 3304:         String::CaseInsensitiveCStringEquals(gtest_color, "t") ||
        1: 3304-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 3304-block  1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
        1: 3304-block  2
branch  5 taken 1 (fallthrough)
branch  6 taken 0
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%: 3304-block  3
        1: 3304-block  4
        2: 3305:         String::CStringEquals(gtest_color, "1");
        1: 3305-block  0
call    0 returned 1
        1: 3305-block  1
        -: 3306:  // We take "yes", "true", "t", and "1" as meaning "yes".  If the
        -: 3307:  // value is neither one of these nor "auto", we treat it as "no" to
        -: 3308:  // be conservative.
        1: 3309:}
        1: 3309-block  0
call    0 returned 1
    $$$$$: 3309-block  1
call    1 never executed
        -: 3310:
        -: 3311:// Helpers for printing colored strings to stdout. Note that on Windows, we
        -: 3312:// cannot simply emit special characters and have the terminal change colors.
        -: 3313:// This routine must actually emit the characters rather than return a string
        -: 3314:// that would be colored when printed, as can be done on Linux.
        -: 3315:
        -: 3316:GTEST_ATTRIBUTE_PRINTF_(2, 3)
function _ZN7testing8internalL13ColoredPrintfENS0_12_GLOBAL__N_110GTestColorEPKcz called 4 returned 100% blocks executed 58%
        4: 3317:static void ColoredPrintf(GTestColor color, const char* fmt, ...) {
        -: 3318:  va_list args;
        4: 3319:  va_start(args, fmt);
        -: 3320:
        -: 3321:  static const bool in_color_mode =
        -: 3322:      // We don't condition this on GTEST_HAS_FILE_SYSTEM because we still need
        -: 3323:      // to be able to detect terminal I/O regardless.
        4: 3324:      ShouldUseColor(posix::IsATTY(posix::FileNo(stdout)) != 0);
        4: 3324-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 3
        1: 3324-block  1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0
        1: 3324-block  2
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
        1: 3324-block  3
call    8 returned 1
branch  9 taken 1 (fallthrough)
branch 10 taken 0 (throw)
        1: 3324-block  4
call   11 returned 1
branch 12 taken 1 (fallthrough)
branch 13 taken 0 (throw)
        1: 3324-block  5
call   14 returned 1
    $$$$$: 3324-block  6
branch 15 never executed
branch 16 never executed
    $$$$$: 3324-block  7
call   17 never executed
        -: 3325:
       4*: 3326:  const bool use_color = in_color_mode && (color != GTestColor::kDefault);
        4: 3326-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 4
    %%%%%: 3326-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 3326-block  2
        4: 3326-block  3
        -: 3327:
        4: 3328:  if (!use_color) {
        4: 3328-block  0
branch  0 taken 4 (fallthrough)
branch  1 taken 0
        4: 3329:    vprintf(fmt, args);
        4: 3329-block  0
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0 (throw)
        4: 3330:    va_end(args);
        4: 3331:    return;
        4: 3331-block  0
        -: 3332:  }
        -: 3333:
        -: 3334:#if defined(GTEST_OS_WINDOWS) && !defined(GTEST_OS_WINDOWS_MOBILE) &&       \
        -: 3335:    !defined(GTEST_OS_WINDOWS_GAMES) && !defined(GTEST_OS_WINDOWS_PHONE) && \
        -: 3336:    !defined(GTEST_OS_WINDOWS_RT) && !defined(GTEST_OS_WINDOWS_MINGW)
        -: 3337:  const HANDLE stdout_handle = GetStdHandle(STD_OUTPUT_HANDLE);
        -: 3338:
        -: 3339:  // Gets the current text color.
        -: 3340:  CONSOLE_SCREEN_BUFFER_INFO buffer_info;
        -: 3341:  GetConsoleScreenBufferInfo(stdout_handle, &buffer_info);
        -: 3342:  const WORD old_color_attrs = buffer_info.wAttributes;
        -: 3343:  const WORD new_color = GetNewColor(color, old_color_attrs);
        -: 3344:
        -: 3345:  // We need to flush the stream buffers into the console before each
        -: 3346:  // SetConsoleTextAttribute call lest it affect the text that is already
        -: 3347:  // printed but has not yet reached the console.
        -: 3348:  fflush(stdout);
        -: 3349:  SetConsoleTextAttribute(stdout_handle, new_color);
        -: 3350:
        -: 3351:  vprintf(fmt, args);
        -: 3352:
        -: 3353:  fflush(stdout);
        -: 3354:  // Restores the text color.
        -: 3355:  SetConsoleTextAttribute(stdout_handle, old_color_attrs);
        -: 3356:#else
    #####: 3357:  printf("\033[0;3%sm", GetAnsiColorCode(color));
    %%%%%: 3357-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3357-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 3358:  vprintf(fmt, args);
    %%%%%: 3358-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3359:  printf("\033[m");  // Resets the terminal to default.
    %%%%%: 3359-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3360:#endif  // GTEST_OS_WINDOWS && !GTEST_OS_WINDOWS_MOBILE
    #####: 3361:  va_end(args);
    %%%%%: 3361-block  0
        -: 3362:}
        -: 3363:
        -: 3364:// Text printed in Google Test's text output and --gtest_list_tests
        -: 3365:// output to label the type parameter and value parameter for a test.
        -: 3366:static const char kTypeParamLabel[] = "TypeParam";
        -: 3367:static const char kValueParamLabel[] = "GetParam()";
        -: 3368:
function _ZN7testing8internalL29PrintFullTestCommentIfPresentERKNS_8TestInfoE called 0 returned 0% blocks executed 0%
    #####: 3369:static void PrintFullTestCommentIfPresent(const TestInfo& test_info) {
    #####: 3370:  const char* const type_param = test_info.type_param();
    %%%%%: 3370-block  0
call    0 never executed
    #####: 3371:  const char* const value_param = test_info.value_param();
call    0 never executed
        -: 3372:
    #####: 3373:  if (type_param != nullptr || value_param != nullptr) {
branch  0 never executed
branch  1 never executed
    %%%%%: 3373-block  0
branch  2 never executed
branch  3 never executed
    #####: 3374:    printf(", where ");
    %%%%%: 3374-block  0
call    0 never executed
    #####: 3375:    if (type_param != nullptr) {
branch  0 never executed
branch  1 never executed
    #####: 3376:      printf("%s = %s", kTypeParamLabel, type_param);
    %%%%%: 3376-block  0
call    0 never executed
    #####: 3377:      if (value_param != nullptr) printf(" and ");
branch  0 never executed
branch  1 never executed
    %%%%%: 3377-block  0
call    2 never executed
        -: 3378:    }
    #####: 3379:    if (value_param != nullptr) {
    %%%%%: 3379-block  0
branch  0 never executed
branch  1 never executed
    #####: 3380:      printf("%s = %s", kValueParamLabel, value_param);
    %%%%%: 3380-block  0
call    0 never executed
        -: 3381:    }
        -: 3382:  }
    #####: 3383:}
        -: 3384:
        -: 3385:// This class implements the TestEventListener interface.
        -: 3386://
        -: 3387:// Class PrettyUnitTestResultPrinter is copyable.
        -: 3388:class PrettyUnitTestResultPrinter : public TestEventListener {
        -: 3389: public:
function _ZN7testing8internal27PrettyUnitTestResultPrinterC1Ev called 1 returned 100% blocks executed 100%
        1: 3390:  PrettyUnitTestResultPrinter() = default;
        1: 3390-block  0
call    0 returned 1
function _ZN7testing8internal27PrettyUnitTestResultPrinter13PrintTestNameEPKcS3_ called 0 returned 0% blocks executed 0%
    #####: 3391:  static void PrintTestName(const char* test_suite, const char* test) {
    #####: 3392:    printf("%s.%s", test_suite, test);
    %%%%%: 3392-block  0
call    0 never executed
    #####: 3393:  }
        -: 3394:
        -: 3395:  // The following methods override what's in the TestEventListener class.
function _ZN7testing8internal27PrettyUnitTestResultPrinter18OnTestProgramStartERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        1: 3396:  void OnTestProgramStart(const UnitTest& /*unit_test*/) override {}
        -: 3397:  void OnTestIterationStart(const UnitTest& unit_test, int iteration) override;
        -: 3398:  void OnEnvironmentsSetUpStart(const UnitTest& unit_test) override;
function _ZN7testing8internal27PrettyUnitTestResultPrinter22OnEnvironmentsSetUpEndERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3399:  void OnEnvironmentsSetUpEnd(const UnitTest& /*unit_test*/) override {}
        -: 3400:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3401:  void OnTestCaseStart(const TestCase& test_case) override;
        -: 3402:#else
        -: 3403:  void OnTestSuiteStart(const TestSuite& test_suite) override;
        -: 3404:#endif  // OnTestCaseStart
        -: 3405:
        -: 3406:  void OnTestStart(const TestInfo& test_info) override;
        -: 3407:  void OnTestDisabled(const TestInfo& test_info) override;
        -: 3408:
        -: 3409:  void OnTestPartResult(const TestPartResult& result) override;
        -: 3410:  void OnTestEnd(const TestInfo& test_info) override;
        -: 3411:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3412:  void OnTestCaseEnd(const TestCase& test_case) override;
        -: 3413:#else
        -: 3414:  void OnTestSuiteEnd(const TestSuite& test_suite) override;
        -: 3415:#endif  // GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3416:
        -: 3417:  void OnEnvironmentsTearDownStart(const UnitTest& unit_test) override;
function _ZN7testing8internal27PrettyUnitTestResultPrinter25OnEnvironmentsTearDownEndERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3418:  void OnEnvironmentsTearDownEnd(const UnitTest& /*unit_test*/) override {}
        -: 3419:  void OnTestIterationEnd(const UnitTest& unit_test, int iteration) override;
function _ZN7testing8internal27PrettyUnitTestResultPrinter16OnTestProgramEndERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        1: 3420:  void OnTestProgramEnd(const UnitTest& /*unit_test*/) override {}
        -: 3421:
        -: 3422: private:
        -: 3423:  static void PrintFailedTests(const UnitTest& unit_test);
        -: 3424:  static void PrintFailedTestSuites(const UnitTest& unit_test);
        -: 3425:  static void PrintSkippedTests(const UnitTest& unit_test);
        -: 3426:};
        -: 3427:
        -: 3428:// Fired before each iteration of tests starts.
function _ZN7testing8internal27PrettyUnitTestResultPrinter20OnTestIterationStartERKNS_8UnitTestEi called 1 returned 100% blocks executed 62%
        1: 3429:void PrettyUnitTestResultPrinter::OnTestIterationStart(
        -: 3430:    const UnitTest& unit_test, int iteration) {
        1: 3431:  if (GTEST_FLAG_GET(repeat) != 1)
        1: 3431-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 3432:    printf("\nRepeating all tests (iteration %d) . . .\n\n", iteration + 1);
    %%%%%: 3432-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3433:
        1: 3434:  std::string f = GTEST_FLAG_GET(filter);
        1: 3434-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3435:  const char* const filter = f.c_str();
        1: 3435-block  0
call    0 returned 1
        -: 3436:
        -: 3437:  // Prints the filter if it's not *.  This reminds the user that some
        -: 3438:  // tests may be skipped.
        1: 3439:  if (!String::CStringEquals(filter, kUniversalFilter)) {
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1: 3440:    ColoredPrintf(GTestColor::kYellow, "Note: %s filter = %s\n", GTEST_NAME_,
        1: 3440-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 3441:                  filter);
        -: 3442:  }
        -: 3443:
        1: 3444:  if (internal::ShouldShard(kTestTotalShards, kTestShardIndex, false)) {
        1: 3444-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3444-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    #####: 3445:    const int32_t shard_index = Int32FromEnvOrDie(kTestShardIndex, -1);
    %%%%%: 3445-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3446:    ColoredPrintf(GTestColor::kYellow, "Note: This is test shard %d of %s.\n",
    %%%%%: 3446-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 3447:                  static_cast<int>(shard_index) + 1,
        -: 3448:                  internal::posix::GetEnv(kTestTotalShards));
        -: 3449:  }
        -: 3450:
        1: 3451:  if (GTEST_FLAG_GET(shuffle)) {
        1: 3451-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 3452:    ColoredPrintf(GTestColor::kYellow,
    %%%%%: 3452-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 3453:                  "Note: Randomizing tests' orders with a seed of %d .\n",
        -: 3454:                  unit_test.random_seed());
        -: 3455:  }
        -: 3456:
        1: 3457:  ColoredPrintf(GTestColor::kGreen, "[==========] ");
        1: 3457-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        2: 3458:  printf("Running %s from %s.\n",
        1: 3458-block  0
call    0 returned 1
        1: 3458-block  1
call    1 returned 1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
        1: 3459:         FormatTestCount(unit_test.test_to_run_count()).c_str(),
        1: 3459-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3459-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
    $$$$$: 3459-block  2
call    6 never executed
    $$$$$: 3459-block  3
        2: 3460:         FormatTestSuiteCount(unit_test.test_suite_to_run_count()).c_str());
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3460-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 3460-block  1
call    6 returned 1
call    7 returned 1
    $$$$$: 3460-block  2
call    8 never executed
    $$$$$: 3460-block  3
        1: 3461:  fflush(stdout);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3462:}
        1: 3462-block  0
call    0 returned 1
    $$$$$: 3462-block  1
call    1 never executed
        -: 3463:
function _ZN7testing8internal27PrettyUnitTestResultPrinter24OnEnvironmentsSetUpStartERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3464:void PrettyUnitTestResultPrinter::OnEnvironmentsSetUpStart(
        -: 3465:    const UnitTest& /*unit_test*/) {
    #####: 3466:  ColoredPrintf(GTestColor::kGreen, "[----------] ");
    %%%%%: 3466-block  0
call    0 never executed
    #####: 3467:  printf("Global test environment set-up.\n");
call    0 never executed
    #####: 3468:  fflush(stdout);
call    0 never executed
    #####: 3469:}
        -: 3470:
        -: 3471:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZN7testing8internal27PrettyUnitTestResultPrinter15OnTestCaseStartERKNS_9TestSuiteE called 0 returned 0% blocks executed 0%
    #####: 3472:void PrettyUnitTestResultPrinter::OnTestCaseStart(const TestCase& test_case) {
        -: 3473:  const std::string counts =
    #####: 3474:      FormatCountableNoun(test_case.test_to_run_count(), "test", "tests");
    %%%%%: 3474-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3474-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 3475:  ColoredPrintf(GTestColor::kGreen, "[----------] ");
    %%%%%: 3475-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3476:  printf("%s from %s", counts.c_str(), test_case.name());
    %%%%%: 3476-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 3477:  if (test_case.type_param() == nullptr) {
    %%%%%: 3477-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3478:    printf("\n");
    %%%%%: 3478-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3479:  } else {
    #####: 3480:    printf(", where %s = %s\n", kTypeParamLabel, test_case.type_param());
    %%%%%: 3480-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 3481:  }
    #####: 3482:  fflush(stdout);
    %%%%%: 3482-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3483:}
    %%%%%: 3483-block  0
call    0 never executed
    $$$$$: 3483-block  1
call    1 never executed
        -: 3484:#else
        -: 3485:void PrettyUnitTestResultPrinter::OnTestSuiteStart(
        -: 3486:    const TestSuite& test_suite) {
        -: 3487:  const std::string counts =
        -: 3488:      FormatCountableNoun(test_suite.test_to_run_count(), "test", "tests");
        -: 3489:  ColoredPrintf(GTestColor::kGreen, "[----------] ");
        -: 3490:  printf("%s from %s", counts.c_str(), test_suite.name());
        -: 3491:  if (test_suite.type_param() == nullptr) {
        -: 3492:    printf("\n");
        -: 3493:  } else {
        -: 3494:    printf(", where %s = %s\n", kTypeParamLabel, test_suite.type_param());
        -: 3495:  }
        -: 3496:  fflush(stdout);
        -: 3497:}
        -: 3498:#endif  // GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3499:
function _ZN7testing8internal27PrettyUnitTestResultPrinter11OnTestStartERKNS_8TestInfoE called 0 returned 0% blocks executed 0%
    #####: 3500:void PrettyUnitTestResultPrinter::OnTestStart(const TestInfo& test_info) {
    #####: 3501:  ColoredPrintf(GTestColor::kGreen, "[ RUN      ] ");
    %%%%%: 3501-block  0
call    0 never executed
    #####: 3502:  PrintTestName(test_info.test_suite_name(), test_info.name());
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 3503:  printf("\n");
call    0 never executed
    #####: 3504:  fflush(stdout);
call    0 never executed
    #####: 3505:}
        -: 3506:
function _ZN7testing8internal27PrettyUnitTestResultPrinter14OnTestDisabledERKNS_8TestInfoE called 0 returned 0% blocks executed 0%
    #####: 3507:void PrettyUnitTestResultPrinter::OnTestDisabled(const TestInfo& test_info) {
    #####: 3508:  ColoredPrintf(GTestColor::kYellow, "[ DISABLED ] ");
    %%%%%: 3508-block  0
call    0 never executed
    #####: 3509:  PrintTestName(test_info.test_suite_name(), test_info.name());
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 3510:  printf("\n");
call    0 never executed
    #####: 3511:  fflush(stdout);
call    0 never executed
    #####: 3512:}
        -: 3513:
        -: 3514:// Called after an assertion failure.
function _ZN7testing8internal27PrettyUnitTestResultPrinter16OnTestPartResultERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 3515:void PrettyUnitTestResultPrinter::OnTestPartResult(
        -: 3516:    const TestPartResult& result) {
    #####: 3517:  switch (result.type()) {
    %%%%%: 3517-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3518:    // If the test part succeeded, we don't need to do anything.
    #####: 3519:    case TestPartResult::kSuccess:
    #####: 3520:      return;
    %%%%%: 3520-block  0
    #####: 3521:    default:
        -: 3522:      // Print failure message from the assertion
        -: 3523:      // (e.g. expected this and got that).
    #####: 3524:      PrintTestPartResult(result);
    %%%%%: 3524-block  0
call    0 never executed
    #####: 3525:      fflush(stdout);
call    0 never executed
        -: 3526:  }
        -: 3527:}
        -: 3528:
function _ZN7testing8internal27PrettyUnitTestResultPrinter9OnTestEndERKNS_8TestInfoE called 0 returned 0% blocks executed 0%
    #####: 3529:void PrettyUnitTestResultPrinter::OnTestEnd(const TestInfo& test_info) {
    #####: 3530:  if (test_info.result()->Passed()) {
    %%%%%: 3530-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3531:    ColoredPrintf(GTestColor::kGreen, "[       OK ] ");
    %%%%%: 3531-block  0
call    0 never executed
    #####: 3532:  } else if (test_info.result()->Skipped()) {
    %%%%%: 3532-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3533:    ColoredPrintf(GTestColor::kGreen, "[  SKIPPED ] ");
    %%%%%: 3533-block  0
call    0 never executed
        -: 3534:  } else {
    #####: 3535:    ColoredPrintf(GTestColor::kRed, "[  FAILED  ] ");
    %%%%%: 3535-block  0
call    0 never executed
        -: 3536:  }
    #####: 3537:  PrintTestName(test_info.test_suite_name(), test_info.name());
    %%%%%: 3537-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 3538:  if (test_info.result()->Failed()) PrintFullTestCommentIfPresent(test_info);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 3538-block  0
call    4 never executed
        -: 3539:
    #####: 3540:  if (GTEST_FLAG_GET(print_time)) {
    %%%%%: 3540-block  0
branch  0 never executed
branch  1 never executed
    #####: 3541:    printf(" (%s ms)\n",
    %%%%%: 3541-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3542:           internal::StreamableToString(test_info.result()->elapsed_time())
    %%%%%: 3542-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 3542-block  1
call    5 never executed
    $$$$$: 3542-block  2
call    6 never executed
    $$$$$: 3542-block  3
        -: 3543:               .c_str());
        -: 3544:  } else {
    #####: 3545:    printf("\n");
    %%%%%: 3545-block  0
call    0 never executed
        -: 3546:  }
    #####: 3547:  fflush(stdout);
    %%%%%: 3547-block  0
call    0 never executed
    #####: 3548:}
        -: 3549:
        -: 3550:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZN7testing8internal27PrettyUnitTestResultPrinter13OnTestCaseEndERKNS_9TestSuiteE called 0 returned 0% blocks executed 0%
    #####: 3551:void PrettyUnitTestResultPrinter::OnTestCaseEnd(const TestCase& test_case) {
    #####: 3552:  if (!GTEST_FLAG_GET(print_time)) return;
    %%%%%: 3552-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 3552-block  1
        -: 3553:
        -: 3554:  const std::string counts =
    #####: 3555:      FormatCountableNoun(test_case.test_to_run_count(), "test", "tests");
    %%%%%: 3555-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3555-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 3556:  ColoredPrintf(GTestColor::kGreen, "[----------] ");
    %%%%%: 3556-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3557:  printf("%s from %s (%s ms total)\n\n", counts.c_str(), test_case.name(),
    %%%%%: 3557-block  0
call    0 never executed
call    1 never executed
    %%%%%: 3557-block  1
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 3558:         internal::StreamableToString(test_case.elapsed_time()).c_str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 3558-block  0
call    4 never executed
    $$$$$: 3558-block  1
call    5 never executed
    $$$$$: 3558-block  2
    $$$$$: 3558-block  3
    #####: 3559:  fflush(stdout);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3560:}
    %%%%%: 3560-block  0
call    0 never executed
    $$$$$: 3560-block  1
call    1 never executed
        -: 3561:#else
        -: 3562:void PrettyUnitTestResultPrinter::OnTestSuiteEnd(const TestSuite& test_suite) {
        -: 3563:  if (!GTEST_FLAG_GET(print_time)) return;
        -: 3564:
        -: 3565:  const std::string counts =
        -: 3566:      FormatCountableNoun(test_suite.test_to_run_count(), "test", "tests");
        -: 3567:  ColoredPrintf(GTestColor::kGreen, "[----------] ");
        -: 3568:  printf("%s from %s (%s ms total)\n\n", counts.c_str(), test_suite.name(),
        -: 3569:         internal::StreamableToString(test_suite.elapsed_time()).c_str());
        -: 3570:  fflush(stdout);
        -: 3571:}
        -: 3572:#endif  // GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3573:
function _ZN7testing8internal27PrettyUnitTestResultPrinter27OnEnvironmentsTearDownStartERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3574:void PrettyUnitTestResultPrinter::OnEnvironmentsTearDownStart(
        -: 3575:    const UnitTest& /*unit_test*/) {
    #####: 3576:  ColoredPrintf(GTestColor::kGreen, "[----------] ");
    %%%%%: 3576-block  0
call    0 never executed
    #####: 3577:  printf("Global test environment tear-down\n");
call    0 never executed
    #####: 3578:  fflush(stdout);
call    0 never executed
    #####: 3579:}
        -: 3580:
        -: 3581:// Internal helper for printing the list of failed tests.
function _ZN7testing8internal27PrettyUnitTestResultPrinter16PrintFailedTestsERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3582:void PrettyUnitTestResultPrinter::PrintFailedTests(const UnitTest& unit_test) {
    #####: 3583:  const int failed_test_count = unit_test.failed_test_count();
    %%%%%: 3583-block  0
call    0 never executed
    #####: 3584:  ColoredPrintf(GTestColor::kRed, "[  FAILED  ] ");
call    0 never executed
    #####: 3585:  printf("%s, listed below:\n", FormatTestCount(failed_test_count).c_str());
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3585-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 3585-block  1
call    7 never executed
    $$$$$: 3585-block  2
call    8 never executed
        -: 3586:
    #####: 3587:  for (int i = 0; i < unit_test.total_test_suite_count(); ++i) {
    %%%%%: 3587-block  0
    %%%%%: 3587-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3588:    const TestSuite& test_suite = *unit_test.GetTestSuite(i);
    %%%%%: 3588-block  0
call    0 never executed
    #####: 3589:    if (!test_suite.should_run() || (test_suite.failed_test_count() == 0)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3589-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 3589-block  1
    %%%%%: 3589-block  2
    %%%%%: 3589-block  3
branch  6 never executed
branch  7 never executed
    #####: 3590:      continue;
    %%%%%: 3590-block  0
        -: 3591:    }
    #####: 3592:    for (int j = 0; j < test_suite.total_test_count(); ++j) {
    %%%%%: 3592-block  0
    %%%%%: 3592-block  1
    %%%%%: 3592-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3593:      const TestInfo& test_info = *test_suite.GetTestInfo(j);
    %%%%%: 3593-block  0
call    0 never executed
    #####: 3594:      if (!test_info.should_run() || !test_info.result()->Failed()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3594-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 3594-block  1
    %%%%%: 3594-block  2
    %%%%%: 3594-block  3
branch  7 never executed
branch  8 never executed
    #####: 3595:        continue;
    %%%%%: 3595-block  0
        -: 3596:      }
    #####: 3597:      ColoredPrintf(GTestColor::kRed, "[  FAILED  ] ");
    %%%%%: 3597-block  0
call    0 never executed
    #####: 3598:      printf("%s.%s", test_suite.name(), test_info.name());
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 3599:      PrintFullTestCommentIfPresent(test_info);
call    0 never executed
    #####: 3600:      printf("\n");
call    0 never executed
        -: 3601:    }
        -: 3602:  }
    #####: 3603:  printf("\n%2d FAILED %s\n", failed_test_count,
    %%%%%: 3603-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 3603-block  1
    %%%%%: 3603-block  2
    %%%%%: 3603-block  3
call    2 never executed
        -: 3604:         failed_test_count == 1 ? "TEST" : "TESTS");
    #####: 3605:}
        -: 3606:
        -: 3607:// Internal helper for printing the list of test suite failures not covered by
        -: 3608:// PrintFailedTests.
function _ZN7testing8internal27PrettyUnitTestResultPrinter21PrintFailedTestSuitesERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3609:void PrettyUnitTestResultPrinter::PrintFailedTestSuites(
        -: 3610:    const UnitTest& unit_test) {
    #####: 3611:  int suite_failure_count = 0;
    #####: 3612:  for (int i = 0; i < unit_test.total_test_suite_count(); ++i) {
    %%%%%: 3612-block  0
    %%%%%: 3612-block  1
    %%%%%: 3612-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3613:    const TestSuite& test_suite = *unit_test.GetTestSuite(i);
    %%%%%: 3613-block  0
call    0 never executed
    #####: 3614:    if (!test_suite.should_run()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3615:      continue;
    %%%%%: 3615-block  0
        -: 3616:    }
    #####: 3617:    if (test_suite.ad_hoc_test_result().Failed()) {
    %%%%%: 3617-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3618:      ColoredPrintf(GTestColor::kRed, "[  FAILED  ] ");
    %%%%%: 3618-block  0
call    0 never executed
    #####: 3619:      printf("%s: SetUpTestSuite or TearDownTestSuite\n", test_suite.name());
call    0 never executed
call    1 never executed
    #####: 3620:      ++suite_failure_count;
        -: 3621:    }
        -: 3622:  }
    #####: 3623:  if (suite_failure_count > 0) {
    %%%%%: 3623-block  0
branch  0 never executed
branch  1 never executed
    #####: 3624:    printf("\n%2d FAILED TEST %s\n", suite_failure_count,
    %%%%%: 3624-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 3624-block  1
    %%%%%: 3624-block  2
    %%%%%: 3624-block  3
call    2 never executed
        -: 3625:           suite_failure_count == 1 ? "SUITE" : "SUITES");
        -: 3626:  }
    #####: 3627:}
        -: 3628:
        -: 3629:// Internal helper for printing the list of skipped tests.
function _ZN7testing8internal27PrettyUnitTestResultPrinter17PrintSkippedTestsERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3630:void PrettyUnitTestResultPrinter::PrintSkippedTests(const UnitTest& unit_test) {
    #####: 3631:  const int skipped_test_count = unit_test.skipped_test_count();
    %%%%%: 3631-block  0
call    0 never executed
    #####: 3632:  if (skipped_test_count == 0) {
branch  0 never executed
branch  1 never executed
    #####: 3633:    return;
    %%%%%: 3633-block  0
        -: 3634:  }
        -: 3635:
    #####: 3636:  for (int i = 0; i < unit_test.total_test_suite_count(); ++i) {
    %%%%%: 3636-block  0
    %%%%%: 3636-block  1
    %%%%%: 3636-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3637:    const TestSuite& test_suite = *unit_test.GetTestSuite(i);
    %%%%%: 3637-block  0
call    0 never executed
    #####: 3638:    if (!test_suite.should_run() || (test_suite.skipped_test_count() == 0)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3638-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 3638-block  1
    %%%%%: 3638-block  2
    %%%%%: 3638-block  3
branch  6 never executed
branch  7 never executed
    #####: 3639:      continue;
    %%%%%: 3639-block  0
        -: 3640:    }
    #####: 3641:    for (int j = 0; j < test_suite.total_test_count(); ++j) {
    %%%%%: 3641-block  0
    %%%%%: 3641-block  1
    %%%%%: 3641-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3642:      const TestInfo& test_info = *test_suite.GetTestInfo(j);
    %%%%%: 3642-block  0
call    0 never executed
    #####: 3643:      if (!test_info.should_run() || !test_info.result()->Skipped()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3643-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 3643-block  1
    %%%%%: 3643-block  2
    %%%%%: 3643-block  3
branch  7 never executed
branch  8 never executed
    #####: 3644:        continue;
    %%%%%: 3644-block  0
        -: 3645:      }
    #####: 3646:      ColoredPrintf(GTestColor::kGreen, "[  SKIPPED ] ");
    %%%%%: 3646-block  0
call    0 never executed
    #####: 3647:      printf("%s.%s", test_suite.name(), test_info.name());
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 3648:      printf("\n");
call    0 never executed
        -: 3649:    }
        -: 3650:  }
        -: 3651:}
        -: 3652:
function _ZN7testing8internal27PrettyUnitTestResultPrinter18OnTestIterationEndERKNS_8UnitTestEi called 1 returned 100% blocks executed 52%
        1: 3653:void PrettyUnitTestResultPrinter::OnTestIterationEnd(const UnitTest& unit_test,
        -: 3654:                                                     int /*iteration*/) {
        1: 3655:  ColoredPrintf(GTestColor::kGreen, "[==========] ");
        1: 3655-block  0
call    0 returned 1
        2: 3656:  printf("%s from %s ran.",
        1: 3656-block  0
call    0 returned 1
        1: 3656-block  1
call    1 returned 1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
        1: 3657:         FormatTestCount(unit_test.test_to_run_count()).c_str(),
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3657-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
    $$$$$: 3657-block  1
call    6 never executed
    $$$$$: 3657-block  2
call    7 never executed
        2: 3658:         FormatTestSuiteCount(unit_test.test_suite_to_run_count()).c_str());
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3658-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 3658-block  1
call    6 returned 1
call    7 returned 1
    $$$$$: 3658-block  2
call    8 never executed
    $$$$$: 3658-block  3
        1: 3659:  if (GTEST_FLAG_GET(print_time)) {
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 3660:    printf(" (%s ms total)",
        1: 3660-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        2: 3661:           internal::StreamableToString(unit_test.elapsed_time()).c_str());
        1: 3661-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 3661-block  1
call    4 returned 1
    $$$$$: 3661-block  2
call    5 never executed
    $$$$$: 3661-block  3
    $$$$$: 3661-block  4
call    6 never executed
        -: 3662:  }
        1: 3663:  printf("\n");
        1: 3663-block  0
call    0 returned 1
        1: 3664:  ColoredPrintf(GTestColor::kGreen, "[  PASSED  ] ");
call    0 returned 1
        1: 3665:  printf("%s.\n", FormatTestCount(unit_test.successful_test_count()).c_str());
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3665-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 3665-block  1
call    6 returned 1
call    7 returned 1
branch  8 taken 1 (fallthrough)
branch  9 taken 0 (throw)
        1: 3665-block  2
call   10 returned 1
    $$$$$: 3665-block  3
call   11 never executed
    $$$$$: 3665-block  4
call   12 never executed
        -: 3666:
        1: 3667:  const int skipped_test_count = unit_test.skipped_test_count();
call    0 returned 1
        1: 3668:  if (skipped_test_count > 0) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 3669:    ColoredPrintf(GTestColor::kGreen, "[  SKIPPED ] ");
    %%%%%: 3669-block  0
call    0 never executed
    #####: 3670:    printf("%s, listed below:\n", FormatTestCount(skipped_test_count).c_str());
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3670-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 3670-block  1
call    7 never executed
    $$$$$: 3670-block  2
call    8 never executed
    #####: 3671:    PrintSkippedTests(unit_test);
call    0 never executed
        -: 3672:  }
        -: 3673:
        1: 3674:  if (!unit_test.Passed()) {
        1: 3674-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####: 3675:    PrintFailedTests(unit_test);
    %%%%%: 3675-block  0
call    0 never executed
    #####: 3676:    PrintFailedTestSuites(unit_test);
call    0 never executed
        -: 3677:  }
        -: 3678:
        1: 3679:  int num_disabled = unit_test.reportable_disabled_test_count();
        1: 3679-block  0
call    0 returned 1
       1*: 3680:  if (num_disabled && !GTEST_FLAG_GET(also_run_disabled_tests)) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 3680-block  0
branch  2 never executed
branch  3 never executed
    #####: 3681:    if (unit_test.Passed()) {
    %%%%%: 3681-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3682:      printf("\n");  // Add a spacer if no FAILURE banner is displayed.
    %%%%%: 3682-block  0
call    0 never executed
        -: 3683:    }
    #####: 3684:    ColoredPrintf(GTestColor::kYellow, "  YOU HAVE %d DISABLED %s\n\n",
    %%%%%: 3684-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 3684-block  1
    %%%%%: 3684-block  2
    %%%%%: 3684-block  3
call    2 never executed
        -: 3685:                  num_disabled, num_disabled == 1 ? "TEST" : "TESTS");
        -: 3686:  }
        -: 3687:  // Ensure that Google Test output is printed before, e.g., heapchecker output.
        1: 3688:  fflush(stdout);
        1: 3688-block  0
call    0 returned 1
        1: 3689:}
        -: 3690:
        -: 3691:// End PrettyUnitTestResultPrinter
        -: 3692:
        -: 3693:// This class implements the TestEventListener interface.
        -: 3694://
        -: 3695:// Class BriefUnitTestResultPrinter is copyable.
        -: 3696:class BriefUnitTestResultPrinter : public TestEventListener {
        -: 3697: public:
function _ZN7testing8internal26BriefUnitTestResultPrinterC1Ev called 0 returned 0% blocks executed 0%
    #####: 3698:  BriefUnitTestResultPrinter() = default;
    %%%%%: 3698-block  0
call    0 never executed
function _ZN7testing8internal26BriefUnitTestResultPrinter13PrintTestNameEPKcS3_ called 0 returned 0% blocks executed 0%
    #####: 3699:  static void PrintTestName(const char* test_suite, const char* test) {
    #####: 3700:    printf("%s.%s", test_suite, test);
    %%%%%: 3700-block  0
call    0 never executed
    #####: 3701:  }
        -: 3702:
        -: 3703:  // The following methods override what's in the TestEventListener class.
function _ZN7testing8internal26BriefUnitTestResultPrinter18OnTestProgramStartERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3704:  void OnTestProgramStart(const UnitTest& /*unit_test*/) override {}
function _ZN7testing8internal26BriefUnitTestResultPrinter20OnTestIterationStartERKNS_8UnitTestEi called 0 returned 0% blocks executed 0%
    #####: 3705:  void OnTestIterationStart(const UnitTest& /*unit_test*/,
    #####: 3706:                            int /*iteration*/) override {}
function _ZN7testing8internal26BriefUnitTestResultPrinter24OnEnvironmentsSetUpStartERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3707:  void OnEnvironmentsSetUpStart(const UnitTest& /*unit_test*/) override {}
function _ZN7testing8internal26BriefUnitTestResultPrinter22OnEnvironmentsSetUpEndERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3708:  void OnEnvironmentsSetUpEnd(const UnitTest& /*unit_test*/) override {}
        -: 3709:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZN7testing8internal26BriefUnitTestResultPrinter15OnTestCaseStartERKNS_9TestSuiteE called 0 returned 0% blocks executed 0%
    #####: 3710:  void OnTestCaseStart(const TestCase& /*test_case*/) override {}
        -: 3711:#else
        -: 3712:  void OnTestSuiteStart(const TestSuite& /*test_suite*/) override {}
        -: 3713:#endif  // OnTestCaseStart
        -: 3714:
function _ZN7testing8internal26BriefUnitTestResultPrinter11OnTestStartERKNS_8TestInfoE called 0 returned 0% blocks executed 0%
    #####: 3715:  void OnTestStart(const TestInfo& /*test_info*/) override {}
function _ZN7testing8internal26BriefUnitTestResultPrinter14OnTestDisabledERKNS_8TestInfoE called 0 returned 0% blocks executed 0%
    #####: 3716:  void OnTestDisabled(const TestInfo& /*test_info*/) override {}
        -: 3717:
        -: 3718:  void OnTestPartResult(const TestPartResult& result) override;
        -: 3719:  void OnTestEnd(const TestInfo& test_info) override;
        -: 3720:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZN7testing8internal26BriefUnitTestResultPrinter13OnTestCaseEndERKNS_9TestSuiteE called 0 returned 0% blocks executed 0%
    #####: 3721:  void OnTestCaseEnd(const TestCase& /*test_case*/) override {}
        -: 3722:#else
        -: 3723:  void OnTestSuiteEnd(const TestSuite& /*test_suite*/) override {}
        -: 3724:#endif  // GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3725:
function _ZN7testing8internal26BriefUnitTestResultPrinter27OnEnvironmentsTearDownStartERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3726:  void OnEnvironmentsTearDownStart(const UnitTest& /*unit_test*/) override {}
function _ZN7testing8internal26BriefUnitTestResultPrinter25OnEnvironmentsTearDownEndERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3727:  void OnEnvironmentsTearDownEnd(const UnitTest& /*unit_test*/) override {}
        -: 3728:  void OnTestIterationEnd(const UnitTest& unit_test, int iteration) override;
function _ZN7testing8internal26BriefUnitTestResultPrinter16OnTestProgramEndERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3729:  void OnTestProgramEnd(const UnitTest& /*unit_test*/) override {}
        -: 3730:};
        -: 3731:
        -: 3732:// Called after an assertion failure.
function _ZN7testing8internal26BriefUnitTestResultPrinter16OnTestPartResultERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 3733:void BriefUnitTestResultPrinter::OnTestPartResult(
        -: 3734:    const TestPartResult& result) {
    #####: 3735:  switch (result.type()) {
    %%%%%: 3735-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3736:    // If the test part succeeded, we don't need to do anything.
    #####: 3737:    case TestPartResult::kSuccess:
    #####: 3738:      return;
    %%%%%: 3738-block  0
    #####: 3739:    default:
        -: 3740:      // Print failure message from the assertion
        -: 3741:      // (e.g. expected this and got that).
    #####: 3742:      PrintTestPartResult(result);
    %%%%%: 3742-block  0
call    0 never executed
    #####: 3743:      fflush(stdout);
call    0 never executed
        -: 3744:  }
        -: 3745:}
        -: 3746:
function _ZN7testing8internal26BriefUnitTestResultPrinter9OnTestEndERKNS_8TestInfoE called 0 returned 0% blocks executed 0%
    #####: 3747:void BriefUnitTestResultPrinter::OnTestEnd(const TestInfo& test_info) {
    #####: 3748:  if (test_info.result()->Failed()) {
    %%%%%: 3748-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3749:    ColoredPrintf(GTestColor::kRed, "[  FAILED  ] ");
    %%%%%: 3749-block  0
call    0 never executed
    #####: 3750:    PrintTestName(test_info.test_suite_name(), test_info.name());
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 3751:    PrintFullTestCommentIfPresent(test_info);
call    0 never executed
        -: 3752:
    #####: 3753:    if (GTEST_FLAG_GET(print_time)) {
branch  0 never executed
branch  1 never executed
    #####: 3754:      printf(" (%s ms)\n",
    %%%%%: 3754-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3755:             internal::StreamableToString(test_info.result()->elapsed_time())
    %%%%%: 3755-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 3755-block  1
call    5 never executed
    $$$$$: 3755-block  2
call    6 never executed
    $$$$$: 3755-block  3
        -: 3756:                 .c_str());
        -: 3757:    } else {
    #####: 3758:      printf("\n");
    %%%%%: 3758-block  0
call    0 never executed
        -: 3759:    }
    #####: 3760:    fflush(stdout);
    %%%%%: 3760-block  0
call    0 never executed
        -: 3761:  }
    #####: 3762:}
    %%%%%: 3762-block  0
        -: 3763:
function _ZN7testing8internal26BriefUnitTestResultPrinter18OnTestIterationEndERKNS_8UnitTestEi called 0 returned 0% blocks executed 0%
    #####: 3764:void BriefUnitTestResultPrinter::OnTestIterationEnd(const UnitTest& unit_test,
        -: 3765:                                                    int /*iteration*/) {
    #####: 3766:  ColoredPrintf(GTestColor::kGreen, "[==========] ");
    %%%%%: 3766-block  0
call    0 never executed
    #####: 3767:  printf("%s from %s ran.",
    %%%%%: 3767-block  0
call    0 never executed
    %%%%%: 3767-block  1
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 3768:         FormatTestCount(unit_test.test_to_run_count()).c_str(),
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3768-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 3768-block  1
call    6 never executed
    $$$$$: 3768-block  2
call    7 never executed
    #####: 3769:         FormatTestSuiteCount(unit_test.test_suite_to_run_count()).c_str());
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3769-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 3769-block  1
call    6 never executed
call    7 never executed
    $$$$$: 3769-block  2
call    8 never executed
    $$$$$: 3769-block  3
    #####: 3770:  if (GTEST_FLAG_GET(print_time)) {
branch  0 never executed
branch  1 never executed
    #####: 3771:    printf(" (%s ms total)",
    %%%%%: 3771-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3772:           internal::StreamableToString(unit_test.elapsed_time()).c_str());
    %%%%%: 3772-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 3772-block  1
call    4 never executed
    $$$$$: 3772-block  2
call    5 never executed
    $$$$$: 3772-block  3
    $$$$$: 3772-block  4
call    6 never executed
        -: 3773:  }
    #####: 3774:  printf("\n");
    %%%%%: 3774-block  0
call    0 never executed
    #####: 3775:  ColoredPrintf(GTestColor::kGreen, "[  PASSED  ] ");
call    0 never executed
    #####: 3776:  printf("%s.\n", FormatTestCount(unit_test.successful_test_count()).c_str());
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3776-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 3776-block  1
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 3776-block  2
call   10 never executed
    $$$$$: 3776-block  3
call   11 never executed
    $$$$$: 3776-block  4
call   12 never executed
        -: 3777:
    #####: 3778:  const int skipped_test_count = unit_test.skipped_test_count();
call    0 never executed
    #####: 3779:  if (skipped_test_count > 0) {
branch  0 never executed
branch  1 never executed
    #####: 3780:    ColoredPrintf(GTestColor::kGreen, "[  SKIPPED ] ");
    %%%%%: 3780-block  0
call    0 never executed
    #####: 3781:    printf("%s.\n", FormatTestCount(skipped_test_count).c_str());
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3781-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 3781-block  1
call    7 never executed
    $$$$$: 3781-block  2
call    8 never executed
        -: 3782:  }
        -: 3783:
    #####: 3784:  int num_disabled = unit_test.reportable_disabled_test_count();
    %%%%%: 3784-block  0
call    0 never executed
    #####: 3785:  if (num_disabled && !GTEST_FLAG_GET(also_run_disabled_tests)) {
branch  0 never executed
branch  1 never executed
    %%%%%: 3785-block  0
branch  2 never executed
branch  3 never executed
    #####: 3786:    if (unit_test.Passed()) {
    %%%%%: 3786-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3787:      printf("\n");  // Add a spacer if no FAILURE banner is displayed.
    %%%%%: 3787-block  0
call    0 never executed
        -: 3788:    }
    #####: 3789:    ColoredPrintf(GTestColor::kYellow, "  YOU HAVE %d DISABLED %s\n\n",
    %%%%%: 3789-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 3789-block  1
    %%%%%: 3789-block  2
    %%%%%: 3789-block  3
call    2 never executed
        -: 3790:                  num_disabled, num_disabled == 1 ? "TEST" : "TESTS");
        -: 3791:  }
        -: 3792:  // Ensure that Google Test output is printed before, e.g., heapchecker output.
    #####: 3793:  fflush(stdout);
    %%%%%: 3793-block  0
call    0 never executed
    #####: 3794:}
        -: 3795:
        -: 3796:// End BriefUnitTestResultPrinter
        -: 3797:
        -: 3798:// class TestEventRepeater
        -: 3799://
        -: 3800:// This class forwards events to other event listeners.
        -: 3801:class TestEventRepeater : public TestEventListener {
        -: 3802: public:
function _ZN7testing8internal17TestEventRepeaterC1Ev called 1 returned 100% blocks executed 100%
        1: 3803:  TestEventRepeater() : forwarding_enabled_(true) {}
        1: 3803-block  0
call    0 returned 1
call    1 returned 1
        -: 3804:  ~TestEventRepeater() override;
        -: 3805:  void Append(TestEventListener* listener);
        -: 3806:  TestEventListener* Release(TestEventListener* listener);
        -: 3807:
        -: 3808:  // Controls whether events will be forwarded to listeners_. Set to false
        -: 3809:  // in death test child processes.
function _ZNK7testing8internal17TestEventRepeater18forwarding_enabledEv called 0 returned 0% blocks executed 0%
    #####: 3810:  bool forwarding_enabled() const { return forwarding_enabled_; }
    %%%%%: 3810-block  0
function _ZN7testing8internal17TestEventRepeater22set_forwarding_enabledEb called 0 returned 0% blocks executed 0%
    #####: 3811:  void set_forwarding_enabled(bool enable) { forwarding_enabled_ = enable; }
        -: 3812:
        -: 3813:  void OnTestProgramStart(const UnitTest& parameter) override;
        -: 3814:  void OnTestIterationStart(const UnitTest& unit_test, int iteration) override;
        -: 3815:  void OnEnvironmentsSetUpStart(const UnitTest& parameter) override;
        -: 3816:  void OnEnvironmentsSetUpEnd(const UnitTest& parameter) override;
        -: 3817://  Legacy API is deprecated but still available
        -: 3818:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3819:  void OnTestCaseStart(const TestSuite& parameter) override;
        -: 3820:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3821:  void OnTestSuiteStart(const TestSuite& parameter) override;
        -: 3822:  void OnTestStart(const TestInfo& parameter) override;
        -: 3823:  void OnTestDisabled(const TestInfo& parameter) override;
        -: 3824:  void OnTestPartResult(const TestPartResult& parameter) override;
        -: 3825:  void OnTestEnd(const TestInfo& parameter) override;
        -: 3826://  Legacy API is deprecated but still available
        -: 3827:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3828:  void OnTestCaseEnd(const TestCase& parameter) override;
        -: 3829:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3830:  void OnTestSuiteEnd(const TestSuite& parameter) override;
        -: 3831:  void OnEnvironmentsTearDownStart(const UnitTest& parameter) override;
        -: 3832:  void OnEnvironmentsTearDownEnd(const UnitTest& parameter) override;
        -: 3833:  void OnTestIterationEnd(const UnitTest& unit_test, int iteration) override;
        -: 3834:  void OnTestProgramEnd(const UnitTest& parameter) override;
        -: 3835:
        -: 3836: private:
        -: 3837:  // Controls whether events will be forwarded to listeners_. Set to false
        -: 3838:  // in death test child processes.
        -: 3839:  bool forwarding_enabled_;
        -: 3840:  // The list of listeners that receive events.
        -: 3841:  std::vector<TestEventListener*> listeners_;
        -: 3842:
        -: 3843:  TestEventRepeater(const TestEventRepeater&) = delete;
        -: 3844:  TestEventRepeater& operator=(const TestEventRepeater&) = delete;
        -: 3845:};
        -: 3846:
    #####: 3847:TestEventRepeater::~TestEventRepeater() {
    #####: 3848:  ForEach(listeners_, Delete<TestEventListener>);
    #####: 3849:}
------------------
_ZN7testing8internal17TestEventRepeaterD0Ev:
function _ZN7testing8internal17TestEventRepeaterD0Ev called 0 returned 0% blocks executed 0%
    #####: 3847:TestEventRepeater::~TestEventRepeater() {
        -: 3848:  ForEach(listeners_, Delete<TestEventListener>);
    #####: 3849:}
    %%%%%: 3849-block  0
call    0 never executed
call    1 never executed
------------------
_ZN7testing8internal17TestEventRepeaterD1Ev:
function _ZN7testing8internal17TestEventRepeaterD1Ev called 0 returned 0% blocks executed 0%
    #####: 3847:TestEventRepeater::~TestEventRepeater() {
    #####: 3848:  ForEach(listeners_, Delete<TestEventListener>);
    %%%%%: 3848-block  0
call    0 never executed
    #####: 3849:}
call    0 never executed
call    1 never executed
------------------
_ZN7testing8internal17TestEventRepeaterD2Ev:
function _ZN7testing8internal17TestEventRepeaterD2Ev called 0 returned 0% blocks executed 0%
    #####: 3847:TestEventRepeater::~TestEventRepeater() {
    #####: 3848:  ForEach(listeners_, Delete<TestEventListener>);
    %%%%%: 3848-block  0
call    0 never executed
    #####: 3849:}
call    0 never executed
call    1 never executed
------------------
        -: 3850:
function _ZN7testing8internal17TestEventRepeater6AppendEPNS_17TestEventListenerE called 1 returned 100% blocks executed 100%
        1: 3851:void TestEventRepeater::Append(TestEventListener* listener) {
        1: 3852:  listeners_.push_back(listener);
        1: 3852-block  0
call    0 returned 1
        1: 3853:}
        -: 3854:
function _ZN7testing8internal17TestEventRepeater7ReleaseEPNS_17TestEventListenerE called 1 returned 100% blocks executed 38%
        1: 3855:TestEventListener* TestEventRepeater::Release(TestEventListener* listener) {
       1*: 3856:  for (size_t i = 0; i < listeners_.size(); ++i) {
        1: 3856-block  0
    %%%%%: 3856-block  1
        1: 3856-block  2
call    0 returned 1
branch  1 taken 0
branch  2 taken 1 (fallthrough)
    #####: 3857:    if (listeners_[i] == listener) {
    %%%%%: 3857-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3858:      listeners_.erase(listeners_.begin() + static_cast<int>(i));
    %%%%%: 3858-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 3858-block  1
    $$$$$: 3858-block  2
    #####: 3859:      return listener;
    %%%%%: 3859-block  0
        -: 3860:    }
        -: 3861:  }
        -: 3862:
        1: 3863:  return nullptr;
        1: 3863-block  0
        -: 3864:}
        -: 3865:
        -: 3866:// Since most methods are very similar, use macros to reduce boilerplate.
        -: 3867:// This defines a member that forwards the call to all listeners.
        -: 3868:#define GTEST_REPEATER_METHOD_(Name, Type)              \
        -: 3869:  void TestEventRepeater::Name(const Type& parameter) { \
        -: 3870:    if (forwarding_enabled_) {                          \
        -: 3871:      for (size_t i = 0; i < listeners_.size(); i++) {  \
        -: 3872:        listeners_[i]->Name(parameter);                 \
        -: 3873:      }                                                 \
        -: 3874:    }                                                   \
        -: 3875:  }
        -: 3876:// This defines a member that forwards the call to all listeners in reverse
        -: 3877:// order.
        -: 3878:#define GTEST_REVERSE_REPEATER_METHOD_(Name, Type)      \
        -: 3879:  void TestEventRepeater::Name(const Type& parameter) { \
        -: 3880:    if (forwarding_enabled_) {                          \
        -: 3881:      for (size_t i = listeners_.size(); i != 0; i--) { \
        -: 3882:        listeners_[i - 1]->Name(parameter);             \
        -: 3883:      }                                                 \
        -: 3884:    }                                                   \
        -: 3885:  }
        -: 3886:
function _ZN7testing8internal17TestEventRepeater18OnTestProgramStartERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        2: 3887:GTEST_REPEATER_METHOD_(OnTestProgramStart, UnitTest)
        1: 3887-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 3887-block  1
        1: 3887-block  2
call    2 returned 1
call    3 returned 1
        2: 3887-block  3
call    4 returned 2
branch  5 taken 1
branch  6 taken 1 (fallthrough)
function _ZN7testing8internal17TestEventRepeater24OnEnvironmentsSetUpStartERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3888:GTEST_REPEATER_METHOD_(OnEnvironmentsSetUpStart, UnitTest)
    %%%%%: 3888-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 3888-block  1
    %%%%%: 3888-block  2
call    2 never executed
call    3 never executed
    %%%%%: 3888-block  3
call    4 never executed
branch  5 never executed
branch  6 never executed
        -: 3889://  Legacy API is deprecated but still available
        -: 3890:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZN7testing8internal17TestEventRepeater15OnTestCaseStartERKNS_9TestSuiteE called 0 returned 0% blocks executed 0%
    #####: 3891:GTEST_REPEATER_METHOD_(OnTestCaseStart, TestSuite)
    %%%%%: 3891-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 3891-block  1
    %%%%%: 3891-block  2
call    2 never executed
call    3 never executed
    %%%%%: 3891-block  3
call    4 never executed
branch  5 never executed
branch  6 never executed
        -: 3892:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZN7testing8internal17TestEventRepeater16OnTestSuiteStartERKNS_9TestSuiteE called 0 returned 0% blocks executed 0%
    #####: 3893:GTEST_REPEATER_METHOD_(OnTestSuiteStart, TestSuite)
    %%%%%: 3893-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 3893-block  1
    %%%%%: 3893-block  2
call    2 never executed
call    3 never executed
    %%%%%: 3893-block  3
call    4 never executed
branch  5 never executed
branch  6 never executed
function _ZN7testing8internal17TestEventRepeater11OnTestStartERKNS_8TestInfoE called 0 returned 0% blocks executed 0%
    #####: 3894:GTEST_REPEATER_METHOD_(OnTestStart, TestInfo)
    %%%%%: 3894-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 3894-block  1
    %%%%%: 3894-block  2
call    2 never executed
call    3 never executed
    %%%%%: 3894-block  3
call    4 never executed
branch  5 never executed
branch  6 never executed
function _ZN7testing8internal17TestEventRepeater14OnTestDisabledERKNS_8TestInfoE called 0 returned 0% blocks executed 0%
    #####: 3895:GTEST_REPEATER_METHOD_(OnTestDisabled, TestInfo)
    %%%%%: 3895-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 3895-block  1
    %%%%%: 3895-block  2
call    2 never executed
call    3 never executed
    %%%%%: 3895-block  3
call    4 never executed
branch  5 never executed
branch  6 never executed
function _ZN7testing8internal17TestEventRepeater16OnTestPartResultERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 3896:GTEST_REPEATER_METHOD_(OnTestPartResult, TestPartResult)
    %%%%%: 3896-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 3896-block  1
    %%%%%: 3896-block  2
call    2 never executed
call    3 never executed
    %%%%%: 3896-block  3
call    4 never executed
branch  5 never executed
branch  6 never executed
function _ZN7testing8internal17TestEventRepeater27OnEnvironmentsTearDownStartERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3897:GTEST_REPEATER_METHOD_(OnEnvironmentsTearDownStart, UnitTest)
    %%%%%: 3897-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 3897-block  1
    %%%%%: 3897-block  2
call    2 never executed
call    3 never executed
    %%%%%: 3897-block  3
call    4 never executed
branch  5 never executed
branch  6 never executed
function _ZN7testing8internal17TestEventRepeater22OnEnvironmentsSetUpEndERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3898:GTEST_REVERSE_REPEATER_METHOD_(OnEnvironmentsSetUpEnd, UnitTest)
    %%%%%: 3898-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 3898-block  1
call    2 never executed
    %%%%%: 3898-block  2
call    3 never executed
call    4 never executed
    %%%%%: 3898-block  3
branch  5 never executed
branch  6 never executed
function _ZN7testing8internal17TestEventRepeater25OnEnvironmentsTearDownEndERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3899:GTEST_REVERSE_REPEATER_METHOD_(OnEnvironmentsTearDownEnd, UnitTest)
    %%%%%: 3899-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 3899-block  1
call    2 never executed
    %%%%%: 3899-block  2
call    3 never executed
call    4 never executed
    %%%%%: 3899-block  3
branch  5 never executed
branch  6 never executed
function _ZN7testing8internal17TestEventRepeater9OnTestEndERKNS_8TestInfoE called 0 returned 0% blocks executed 0%
    #####: 3900:GTEST_REVERSE_REPEATER_METHOD_(OnTestEnd, TestInfo)
    %%%%%: 3900-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 3900-block  1
call    2 never executed
    %%%%%: 3900-block  2
call    3 never executed
call    4 never executed
    %%%%%: 3900-block  3
branch  5 never executed
branch  6 never executed
        -: 3901://  Legacy API is deprecated but still available
        -: 3902:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZN7testing8internal17TestEventRepeater13OnTestCaseEndERKNS_9TestSuiteE called 0 returned 0% blocks executed 0%
    #####: 3903:GTEST_REVERSE_REPEATER_METHOD_(OnTestCaseEnd, TestSuite)
    %%%%%: 3903-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 3903-block  1
call    2 never executed
    %%%%%: 3903-block  2
call    3 never executed
call    4 never executed
    %%%%%: 3903-block  3
branch  5 never executed
branch  6 never executed
        -: 3904:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZN7testing8internal17TestEventRepeater14OnTestSuiteEndERKNS_9TestSuiteE called 0 returned 0% blocks executed 0%
    #####: 3905:GTEST_REVERSE_REPEATER_METHOD_(OnTestSuiteEnd, TestSuite)
    %%%%%: 3905-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 3905-block  1
call    2 never executed
    %%%%%: 3905-block  2
call    3 never executed
call    4 never executed
    %%%%%: 3905-block  3
branch  5 never executed
branch  6 never executed
function _ZN7testing8internal17TestEventRepeater16OnTestProgramEndERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        2: 3906:GTEST_REVERSE_REPEATER_METHOD_(OnTestProgramEnd, UnitTest)
        1: 3906-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 3906-block  1
call    2 returned 1
        1: 3906-block  2
call    3 returned 1
call    4 returned 1
        2: 3906-block  3
branch  5 taken 1
branch  6 taken 1 (fallthrough)
        -: 3907:
        -: 3908:#undef GTEST_REPEATER_METHOD_
        -: 3909:#undef GTEST_REVERSE_REPEATER_METHOD_
        -: 3910:
function _ZN7testing8internal17TestEventRepeater20OnTestIterationStartERKNS_8UnitTestEi called 1 returned 100% blocks executed 100%
        1: 3911:void TestEventRepeater::OnTestIterationStart(const UnitTest& unit_test,
        -: 3912:                                             int iteration) {
        1: 3913:  if (forwarding_enabled_) {
        1: 3913-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        2: 3914:    for (size_t i = 0; i < listeners_.size(); i++) {
        1: 3914-block  0
        2: 3914-block  1
call    0 returned 2
branch  1 taken 1
branch  2 taken 1 (fallthrough)
        1: 3915:      listeners_[i]->OnTestIterationStart(unit_test, iteration);
        1: 3915-block  0
call    0 returned 1
call    1 returned 1
        -: 3916:    }
        -: 3917:  }
        1: 3918:}
        -: 3919:
function _ZN7testing8internal17TestEventRepeater18OnTestIterationEndERKNS_8UnitTestEi called 1 returned 100% blocks executed 100%
        1: 3920:void TestEventRepeater::OnTestIterationEnd(const UnitTest& unit_test,
        -: 3921:                                           int iteration) {
        1: 3922:  if (forwarding_enabled_) {
        1: 3922-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        2: 3923:    for (size_t i = listeners_.size(); i > 0; i--) {
        1: 3923-block  0
call    0 returned 1
        2: 3923-block  1
branch  1 taken 1
branch  2 taken 1 (fallthrough)
        1: 3924:      listeners_[i - 1]->OnTestIterationEnd(unit_test, iteration);
        1: 3924-block  0
call    0 returned 1
call    1 returned 1
        -: 3925:    }
        -: 3926:  }
        1: 3927:}
        -: 3928:
        -: 3929:// End TestEventRepeater
        -: 3930:
        -: 3931:#if GTEST_HAS_FILE_SYSTEM
        -: 3932:// This class generates an XML output file.
        -: 3933:class XmlUnitTestResultPrinter : public EmptyTestEventListener {
        -: 3934: public:
        -: 3935:  explicit XmlUnitTestResultPrinter(const char* output_file);
        -: 3936:
        -: 3937:  void OnTestIterationEnd(const UnitTest& unit_test, int iteration) override;
        -: 3938:  void ListTestsMatchingFilter(const std::vector<TestSuite*>& test_suites);
        -: 3939:
        -: 3940:  // Prints an XML summary of all unit tests.
        -: 3941:  static void PrintXmlTestsList(std::ostream* stream,
        -: 3942:                                const std::vector<TestSuite*>& test_suites);
        -: 3943:
        -: 3944: private:
        -: 3945:  // Is c a whitespace character that is normalized to a space character
        -: 3946:  // when it appears in an XML attribute value?
function _ZN7testing8internal24XmlUnitTestResultPrinter24IsNormalizableWhitespaceEh called 0 returned 0% blocks executed 0%
    #####: 3947:  static bool IsNormalizableWhitespace(unsigned char c) {
    #####: 3948:    return c == '\t' || c == '\n' || c == '\r';
    %%%%%: 3948-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 3948-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 3948-block  2
branch  4 never executed
branch  5 never executed
    %%%%%: 3948-block  3
    %%%%%: 3948-block  4
    %%%%%: 3948-block  5
        -: 3949:  }
        -: 3950:
        -: 3951:  // May c appear in a well-formed XML document?
        -: 3952:  // https://www.w3.org/TR/REC-xml/#charsets
function _ZN7testing8internal24XmlUnitTestResultPrinter19IsValidXmlCharacterEh called 0 returned 0% blocks executed 0%
    #####: 3953:  static bool IsValidXmlCharacter(unsigned char c) {
    #####: 3954:    return IsNormalizableWhitespace(c) || c >= 0x20;
    %%%%%: 3954-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3954-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 3954-block  2
    %%%%%: 3954-block  3
    %%%%%: 3954-block  4
        -: 3955:  }
        -: 3956:
        -: 3957:  // Returns an XML-escaped copy of the input string str.  If
        -: 3958:  // is_attribute is true, the text is meant to appear as an attribute
        -: 3959:  // value, and normalizable whitespace is preserved by replacing it
        -: 3960:  // with character references.
        -: 3961:  static std::string EscapeXml(const std::string& str, bool is_attribute);
        -: 3962:
        -: 3963:  // Returns the given string with all characters invalid in XML removed.
        -: 3964:  static std::string RemoveInvalidXmlCharacters(const std::string& str);
        -: 3965:
        -: 3966:  // Convenience wrapper around EscapeXml when str is an attribute value.
function _ZN7testing8internal24XmlUnitTestResultPrinter18EscapeXmlAttributeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 3967:  static std::string EscapeXmlAttribute(const std::string& str) {
    #####: 3968:    return EscapeXml(str, true);
    %%%%%: 3968-block  0
call    0 never executed
        -: 3969:  }
        -: 3970:
        -: 3971:  // Convenience wrapper around EscapeXml when str is not an attribute value.
        -: 3972:  static std::string EscapeXmlText(const char* str) {
        -: 3973:    return EscapeXml(str, false);
        -: 3974:  }
        -: 3975:
        -: 3976:  // Verifies that the given attribute belongs to the given element and
        -: 3977:  // streams the attribute as XML.
        -: 3978:  static void OutputXmlAttribute(std::ostream* stream,
        -: 3979:                                 const std::string& element_name,
        -: 3980:                                 const std::string& name,
        -: 3981:                                 const std::string& value);
        -: 3982:
        -: 3983:  // Streams an XML CDATA section, escaping invalid CDATA sequences as needed.
        -: 3984:  static void OutputXmlCDataSection(::std::ostream* stream, const char* data);
        -: 3985:
        -: 3986:  // Streams a test suite XML stanza containing the given test result.
        -: 3987:  //
        -: 3988:  // Requires: result.Failed()
        -: 3989:  static void OutputXmlTestSuiteForTestResult(::std::ostream* stream,
        -: 3990:                                              const TestResult& result);
        -: 3991:
        -: 3992:  // Streams an XML representation of a TestResult object.
        -: 3993:  static void OutputXmlTestResult(::std::ostream* stream,
        -: 3994:                                  const TestResult& result);
        -: 3995:
        -: 3996:  // Streams an XML representation of a TestInfo object.
        -: 3997:  static void OutputXmlTestInfo(::std::ostream* stream,
        -: 3998:                                const char* test_suite_name,
        -: 3999:                                const TestInfo& test_info);
        -: 4000:
        -: 4001:  // Prints an XML representation of a TestSuite object
        -: 4002:  static void PrintXmlTestSuite(::std::ostream* stream,
        -: 4003:                                const TestSuite& test_suite);
        -: 4004:
        -: 4005:  // Prints an XML summary of unit_test to output stream out.
        -: 4006:  static void PrintXmlUnitTest(::std::ostream* stream,
        -: 4007:                               const UnitTest& unit_test);
        -: 4008:
        -: 4009:  // Produces a string representing the test properties in a result as space
        -: 4010:  // delimited XML attributes based on the property key="value" pairs.
        -: 4011:  // When the std::string is not empty, it includes a space at the beginning,
        -: 4012:  // to delimit this attribute from prior attributes.
        -: 4013:  static std::string TestPropertiesAsXmlAttributes(const TestResult& result);
        -: 4014:
        -: 4015:  // Streams an XML representation of the test properties of a TestResult
        -: 4016:  // object.
        -: 4017:  static void OutputXmlTestProperties(std::ostream* stream,
        -: 4018:                                      const TestResult& result);
        -: 4019:
        -: 4020:  // The output file.
        -: 4021:  const std::string output_file_;
        -: 4022:
        -: 4023:  XmlUnitTestResultPrinter(const XmlUnitTestResultPrinter&) = delete;
        -: 4024:  XmlUnitTestResultPrinter& operator=(const XmlUnitTestResultPrinter&) = delete;
        -: 4025:};
        -: 4026:
        -: 4027:// Creates a new XmlUnitTestResultPrinter.
    #####: 4028:XmlUnitTestResultPrinter::XmlUnitTestResultPrinter(const char* output_file)
    #####: 4029:    : output_file_(output_file) {
    #####: 4030:  if (output_file_.empty()) {
    #####: 4031:    GTEST_LOG_(FATAL) << "XML output file may not be null";
        -: 4032:  }
    #####: 4033:}
------------------
_ZN7testing8internal24XmlUnitTestResultPrinterC1EPKc:
function _ZN7testing8internal24XmlUnitTestResultPrinterC1EPKc called 0 returned 0% blocks executed 0%
    #####: 4028:XmlUnitTestResultPrinter::XmlUnitTestResultPrinter(const char* output_file)
    #####: 4029:    : output_file_(output_file) {
    %%%%%: 4029-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4029-block  1
call    5 never executed
    $$$$$: 4029-block  2
call    6 never executed
    $$$$$: 4029-block  3
    #####: 4030:  if (output_file_.empty()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4031:    GTEST_LOG_(FATAL) << "XML output file may not be null";
    %%%%%: 4031-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4031-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4031-block  2
call    7 never executed
    $$$$$: 4031-block  3
call    8 never executed
    $$$$$: 4031-block  4
        -: 4032:  }
    #####: 4033:}
    %%%%%: 4033-block  0
    $$$$$: 4033-block  1
call    0 never executed
    $$$$$: 4033-block  2
call    1 never executed
------------------
_ZN7testing8internal24XmlUnitTestResultPrinterC2EPKc:
function _ZN7testing8internal24XmlUnitTestResultPrinterC2EPKc called 0 returned 0% blocks executed 0%
    #####: 4028:XmlUnitTestResultPrinter::XmlUnitTestResultPrinter(const char* output_file)
    #####: 4029:    : output_file_(output_file) {
    %%%%%: 4029-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4029-block  1
call    5 never executed
    $$$$$: 4029-block  2
call    6 never executed
    $$$$$: 4029-block  3
    #####: 4030:  if (output_file_.empty()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4031:    GTEST_LOG_(FATAL) << "XML output file may not be null";
    %%%%%: 4031-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4031-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4031-block  2
call    7 never executed
    $$$$$: 4031-block  3
call    8 never executed
    $$$$$: 4031-block  4
        -: 4032:  }
    #####: 4033:}
    %%%%%: 4033-block  0
    $$$$$: 4033-block  1
call    0 never executed
    $$$$$: 4033-block  2
call    1 never executed
------------------
        -: 4034:
        -: 4035:// Called after the unit test ends.
function _ZN7testing8internal24XmlUnitTestResultPrinter18OnTestIterationEndERKNS_8UnitTestEi called 0 returned 0% blocks executed 0%
    #####: 4036:void XmlUnitTestResultPrinter::OnTestIterationEnd(const UnitTest& unit_test,
        -: 4037:                                                  int /*iteration*/) {
    #####: 4038:  FILE* xmlout = OpenFileForWriting(output_file_);
    %%%%%: 4038-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4039:  std::stringstream stream;
    %%%%%: 4039-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4040:  PrintXmlUnitTest(&stream, unit_test);
    %%%%%: 4040-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4041:  fprintf(xmlout, "%s", StringStreamToString(&stream).c_str());
    %%%%%: 4041-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4041-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4041-block  2
call    7 never executed
    $$$$$: 4041-block  3
call    8 never executed
    $$$$$: 4041-block  4
    #####: 4042:  fclose(xmlout);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4043:}
    %%%%%: 4043-block  0
call    0 never executed
    $$$$$: 4043-block  1
call    1 never executed
        -: 4044:
function _ZN7testing8internal24XmlUnitTestResultPrinter23ListTestsMatchingFilterERKSt6vectorIPNS_9TestSuiteESaIS4_EE called 0 returned 0% blocks executed 0%
    #####: 4045:void XmlUnitTestResultPrinter::ListTestsMatchingFilter(
        -: 4046:    const std::vector<TestSuite*>& test_suites) {
    #####: 4047:  FILE* xmlout = OpenFileForWriting(output_file_);
    %%%%%: 4047-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4048:  std::stringstream stream;
    %%%%%: 4048-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4049:  PrintXmlTestsList(&stream, test_suites);
    %%%%%: 4049-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4050:  fprintf(xmlout, "%s", StringStreamToString(&stream).c_str());
    %%%%%: 4050-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4050-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4050-block  2
call    7 never executed
    $$$$$: 4050-block  3
call    8 never executed
    $$$$$: 4050-block  4
    #####: 4051:  fclose(xmlout);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4052:}
    %%%%%: 4052-block  0
call    0 never executed
    $$$$$: 4052-block  1
call    1 never executed
        -: 4053:
        -: 4054:// Returns an XML-escaped copy of the input string str.  If is_attribute
        -: 4055:// is true, the text is meant to appear as an attribute value, and
        -: 4056:// normalizable whitespace is preserved by replacing it with character
        -: 4057:// references.
        -: 4058://
        -: 4059:// Invalid XML characters in str, if any, are stripped from the output.
        -: 4060:// It is expected that most, if not all, of the text processed by this
        -: 4061:// module will consist of ordinary English text.
        -: 4062:// If this module is ever modified to produce version 1.1 XML output,
        -: 4063:// most invalid characters can be retained using character references.
function _ZN7testing8internal24XmlUnitTestResultPrinter9EscapeXmlERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb called 0 returned 0% blocks executed 0%
    #####: 4064:std::string XmlUnitTestResultPrinter::EscapeXml(const std::string& str,
        -: 4065:                                                bool is_attribute) {
    #####: 4066:  Message m;
    %%%%%: 4066-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4067:
    #####: 4068:  for (size_t i = 0; i < str.size(); ++i) {
    %%%%%: 4068-block  0
    %%%%%: 4068-block  1
    %%%%%: 4068-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4069:    const char ch = str[i];
    %%%%%: 4069-block  0
call    0 never executed
    #####: 4070:    switch (ch) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 4071:      case '<':
    #####: 4072:        m << "&lt;";
    %%%%%: 4072-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4073:        break;
    %%%%%: 4073-block  0
    #####: 4074:      case '>':
    #####: 4075:        m << "&gt;";
    %%%%%: 4075-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4076:        break;
    %%%%%: 4076-block  0
    #####: 4077:      case '&':
    #####: 4078:        m << "&amp;";
    %%%%%: 4078-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4079:        break;
    %%%%%: 4079-block  0
    #####: 4080:      case '\'':
    #####: 4081:        if (is_attribute)
    %%%%%: 4081-block  0
branch  0 never executed
branch  1 never executed
    #####: 4082:          m << "&apos;";
    %%%%%: 4082-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4083:        else
    #####: 4084:          m << '\'';
    %%%%%: 4084-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4084-block  1
    $$$$$: 4084-block  2
    #####: 4085:        break;
    %%%%%: 4085-block  0
    #####: 4086:      case '"':
    #####: 4087:        if (is_attribute)
    %%%%%: 4087-block  0
branch  0 never executed
branch  1 never executed
    #####: 4088:          m << "&quot;";
    %%%%%: 4088-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4089:        else
    #####: 4090:          m << '"';
    %%%%%: 4090-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4090-block  1
    $$$$$: 4090-block  2
    #####: 4091:        break;
    %%%%%: 4091-block  0
    #####: 4092:      default:
    #####: 4093:        if (IsValidXmlCharacter(static_cast<unsigned char>(ch))) {
    %%%%%: 4093-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4094:          if (is_attribute &&
    %%%%%: 4094-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4094-block  1
    %%%%%: 4094-block  2
    %%%%%: 4094-block  3
branch  4 never executed
branch  5 never executed
    #####: 4095:              IsNormalizableWhitespace(static_cast<unsigned char>(ch)))
    %%%%%: 4095-block  0
call    0 never executed
    #####: 4096:            m << "&#x" << String::FormatByte(static_cast<unsigned char>(ch))
    %%%%%: 4096-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4096-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4096-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4096-block  3
call    9 never executed
    $$$$$: 4096-block  4
call   10 never executed
    $$$$$: 4096-block  5
    #####: 4097:              << ";";
    %%%%%: 4097-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4098:          else
    #####: 4099:            m << ch;
    %%%%%: 4099-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4100:        }
    #####: 4101:        break;
    %%%%%: 4101-block  0
        -: 4102:    }
        -: 4103:  }
        -: 4104:
    #####: 4105:  return m.GetString();
    %%%%%: 4105-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4105-block  1
    #####: 4106:}
    %%%%%: 4106-block  0
call    0 never executed
    $$$$$: 4106-block  1
call    1 never executed
        -: 4107:
        -: 4108:// Returns the given string with all characters invalid in XML removed.
        -: 4109:// Currently invalid characters are dropped from the string. An
        -: 4110:// alternative is to replace them with certain characters such as . or ?.
function _ZN7testing8internal24XmlUnitTestResultPrinter26RemoveInvalidXmlCharactersERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 4111:std::string XmlUnitTestResultPrinter::RemoveInvalidXmlCharacters(
        -: 4112:    const std::string& str) {
    #####: 4113:  std::string output;
    %%%%%: 4113-block  0
call    0 never executed
    #####: 4114:  output.reserve(str.size());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 4115:  for (std::string::const_iterator it = str.begin(); it != str.end(); ++it)
    %%%%%: 4115-block  0
call    0 never executed
    %%%%%: 4115-block  1
call    1 never executed
    %%%%%: 4115-block  2
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 4116:    if (IsValidXmlCharacter(static_cast<unsigned char>(*it)))
    %%%%%: 4116-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 4117:      output.push_back(*it);
    %%%%%: 4117-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 4118:
    #####: 4119:  return output;
    %%%%%: 4119-block  0
    %%%%%: 4119-block  1
    =====: 4120:}
    $$$$$: 4120-block  0
call    0 never executed
        -: 4121:
        -: 4122:// The following routines generate an XML representation of a UnitTest
        -: 4123:// object.
        -: 4124://
        -: 4125:// This is how Google Test concepts map to the DTD:
        -: 4126://
        -: 4127:// <testsuites name="AllTests">        <-- corresponds to a UnitTest object
        -: 4128://   <testsuite name="testcase-name">  <-- corresponds to a TestSuite object
        -: 4129://     <testcase name="test-name">     <-- corresponds to a TestInfo object
        -: 4130://       <failure message="...">...</failure>
        -: 4131://       <failure message="...">...</failure>
        -: 4132://       <failure message="...">...</failure>
        -: 4133://                                     <-- individual assertion failures
        -: 4134://     </testcase>
        -: 4135://   </testsuite>
        -: 4136:// </testsuites>
        -: 4137:
        -: 4138:// Formats the given time in milliseconds as seconds.
function _ZN7testing8internal27FormatTimeInMillisAsSecondsB5cxx11Ex called 0 returned 0% blocks executed 0%
    #####: 4139:std::string FormatTimeInMillisAsSeconds(TimeInMillis ms) {
    #####: 4140:  ::std::stringstream ss;
    %%%%%: 4140-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4141:  // For the exact N seconds, makes sure output has a trailing decimal point.
        -: 4142:  // Sets precision so that we won't have many trailing zeros (e.g., 300 ms
        -: 4143:  // will be just 0.3, 410 ms 0.41, and so on)
    #####: 4144:  ss << std::fixed
    %%%%%: 4144-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4145:     << std::setprecision(
    #####: 4146:            ms % 1000 == 0 ? 0 : (ms % 100 == 0 ? 1 : (ms % 10 == 0 ? 2 : 3)))
    %%%%%: 4146-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 4146-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 4146-block  2
branch  4 never executed
branch  5 never executed
    %%%%%: 4146-block  3
    %%%%%: 4146-block  4
    %%%%%: 4146-block  5
    %%%%%: 4146-block  6
    %%%%%: 4146-block  7
    %%%%%: 4146-block  8
    %%%%%: 4146-block  9
call    6 never executed
call    7 never executed
    #####: 4147:     << std::showpoint;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4148:  ss << (static_cast<double>(ms) * 1e-3);
    %%%%%: 4148-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4149:  return ss.str();
    %%%%%: 4149-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4149-block  1
    #####: 4150:}
    %%%%%: 4150-block  0
call    0 never executed
    $$$$$: 4150-block  1
call    1 never executed
        -: 4151:
function _ZN7testing8internalL17PortableLocaltimeElP2tm called 0 returned 0% blocks executed 0%
    #####: 4152:static bool PortableLocaltime(time_t seconds, struct tm* out) {
        -: 4153:#if defined(_MSC_VER)
        -: 4154:  return localtime_s(out, &seconds) == 0;
        -: 4155:#elif defined(__MINGW32__) || defined(__MINGW64__)
        -: 4156:  // MINGW <time.h> provides neither localtime_r nor localtime_s, but uses
        -: 4157:  // Windows' localtime(), which has a thread-local tm buffer.
        -: 4158:  struct tm* tm_ptr = localtime(&seconds);  // NOLINT
        -: 4159:  if (tm_ptr == nullptr) return false;
        -: 4160:  *out = *tm_ptr;
        -: 4161:  return true;
        -: 4162:#elif defined(__STDC_LIB_EXT1__)
        -: 4163:  // Uses localtime_s when available as localtime_r is only available from
        -: 4164:  // C23 standard.
        -: 4165:  return localtime_s(&seconds, out) != nullptr;
        -: 4166:#else
    #####: 4167:  return localtime_r(&seconds, out) != nullptr;
    %%%%%: 4167-block  0
call    0 never executed
        -: 4168:#endif
        -: 4169:}
        -: 4170:
        -: 4171:// Converts the given epoch time in milliseconds to a date string in the ISO
        -: 4172:// 8601 format, without the timezone information.
function _ZN7testing8internal32FormatEpochTimeInMillisAsIso8601B5cxx11Ex called 0 returned 0% blocks executed 0%
    #####: 4173:std::string FormatEpochTimeInMillisAsIso8601(TimeInMillis ms) {
        -: 4174:  struct tm time_struct;
    #####: 4175:  if (!PortableLocaltime(static_cast<time_t>(ms / 1000), &time_struct))
    %%%%%: 4175-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4175-block  1
branch  3 never executed
branch  4 never executed
    #####: 4176:    return "";
    %%%%%: 4176-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4176-block  1
call    4 never executed
    $$$$$: 4176-block  2
call    5 never executed
    $$$$$: 4176-block  3
        -: 4177:  // YYYY-MM-DDThh:mm:ss.sss
    #####: 4178:  return StreamableToString(time_struct.tm_year + 1900) + "-" +
    %%%%%: 4178-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4178-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4178-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
    $$$$$: 4178-block  3
call   11 never executed
    $$$$$: 4178-block  4
call   12 never executed
    $$$$$: 4178-block  5
call   13 never executed
    $$$$$: 4178-block  6
    $$$$$: 4178-block  7
    $$$$$: 4178-block  8
    $$$$$: 4178-block  9
    #####: 4179:         String::FormatIntWidth2(time_struct.tm_mon + 1) + "-" +
    %%%%%: 4179-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4179-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4179-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$: 4179-block  3
call   12 never executed
    $$$$$: 4179-block  4
call   13 never executed
    $$$$$: 4179-block  5
call   14 never executed
    $$$$$: 4179-block  6
    $$$$$: 4179-block  7
    $$$$$: 4179-block  8
    #####: 4180:         String::FormatIntWidth2(time_struct.tm_mday) + "T" +
    %%%%%: 4180-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4180-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4180-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$: 4180-block  3
call   12 never executed
    $$$$$: 4180-block  4
call   13 never executed
    $$$$$: 4180-block  5
call   14 never executed
    $$$$$: 4180-block  6
    $$$$$: 4180-block  7
    $$$$$: 4180-block  8
    #####: 4181:         String::FormatIntWidth2(time_struct.tm_hour) + ":" +
    %%%%%: 4181-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4181-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4181-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$: 4181-block  3
call   12 never executed
    $$$$$: 4181-block  4
call   13 never executed
    $$$$$: 4181-block  5
call   14 never executed
    $$$$$: 4181-block  6
    $$$$$: 4181-block  7
    $$$$$: 4181-block  8
    #####: 4182:         String::FormatIntWidth2(time_struct.tm_min) + ":" +
    %%%%%: 4182-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4182-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4182-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$: 4182-block  3
call   12 never executed
    $$$$$: 4182-block  4
call   13 never executed
    $$$$$: 4182-block  5
call   14 never executed
    $$$$$: 4182-block  6
    $$$$$: 4182-block  7
    $$$$$: 4182-block  8
    #####: 4183:         String::FormatIntWidth2(time_struct.tm_sec) + "." +
    %%%%%: 4183-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4183-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
    $$$$$: 4183-block  2
call    8 never executed
    $$$$$: 4183-block  3
call    9 never executed
    $$$$$: 4183-block  4
    $$$$$: 4183-block  5
    #####: 4184:         String::FormatIntWidthN(static_cast<int>(ms % 1000), 3);
    %%%%%: 4184-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4184-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4184-block  2
call    6 never executed
call    7 never executed
    $$$$$: 4184-block  3
call    8 never executed
    $$$$$: 4184-block  4
        -: 4185:}
        -: 4186:
        -: 4187:// Streams an XML CDATA section, escaping invalid CDATA sequences as needed.
function _ZN7testing8internal24XmlUnitTestResultPrinter21OutputXmlCDataSectionEPSoPKc called 0 returned 0% blocks executed 0%
    #####: 4188:void XmlUnitTestResultPrinter::OutputXmlCDataSection(::std::ostream* stream,
        -: 4189:                                                     const char* data) {
    #####: 4190:  const char* segment = data;
    #####: 4191:  *stream << "<![CDATA[";
    %%%%%: 4191-block  0
call    0 never executed
        -: 4192:  for (;;) {
    #####: 4193:    const char* const next_segment = strstr(segment, "]]>");
    #####: 4194:    if (next_segment != nullptr) {
    %%%%%: 4194-block  0
branch  0 never executed
branch  1 never executed
    #####: 4195:      stream->write(segment,
    #####: 4196:                    static_cast<std::streamsize>(next_segment - segment));
    %%%%%: 4196-block  0
call    0 never executed
    #####: 4197:      *stream << "]]>]]&gt;<![CDATA[";
call    0 never executed
    #####: 4198:      segment = next_segment + strlen("]]>");
        -: 4199:    } else {
    #####: 4200:      *stream << segment;
    %%%%%: 4200-block  0
call    0 never executed
    #####: 4201:      break;
        -: 4202:    }
    #####: 4203:  }
    %%%%%: 4203-block  0
    #####: 4204:  *stream << "]]>";
    %%%%%: 4204-block  0
call    0 never executed
    #####: 4205:}
        -: 4206:
function _ZN7testing8internal24XmlUnitTestResultPrinter18OutputXmlAttributeEPSoRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_SA_ called 0 returned 0% blocks executed 0%
    #####: 4207:void XmlUnitTestResultPrinter::OutputXmlAttribute(
        -: 4208:    std::ostream* stream, const std::string& element_name,
        -: 4209:    const std::string& name, const std::string& value) {
        -: 4210:  const std::vector<std::string>& allowed_names =
    #####: 4211:      GetReservedOutputAttributesForElement(element_name);
    %%%%%: 4211-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4212:
    #####: 4213:  GTEST_CHECK_(std::find(allowed_names.begin(), allowed_names.end(), name) !=
    %%%%%: 4213-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4213-block  1
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4213-block  2
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4213-block  3
call   13 never executed
    %%%%%: 4213-block  4
call   14 never executed
    $$$$$: 4213-block  5
    $$$$$: 4213-block  6
call   15 never executed
    $$$$$: 4213-block  7
        -: 4214:               allowed_names.end())
        -: 4215:      << "Attribute " << name << " is not allowed for element <" << element_name
    #####: 4216:      << ">.";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4216-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4216-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4216-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4216-block  3
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4216-block  4
call   15 never executed
branch 16 never executed
branch 17 never executed
        -: 4217:
    #####: 4218:  *stream << " " << name << "=\"" << EscapeXmlAttribute(value) << "\"";
    %%%%%: 4218-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4218-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4218-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4218-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4218-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4218-block  5
call   15 never executed
branch 16 never executed
branch 17 never executed
    %%%%%: 4218-block  6
call   18 never executed
    $$$$$: 4218-block  7
call   19 never executed
    $$$$$: 4218-block  8
    #####: 4219:}
call    0 never executed
    $$$$$: 4219-block  0
call    1 never executed
        -: 4220:
        -: 4221:// Streams a test suite XML stanza containing the given test result.
function _ZN7testing8internal24XmlUnitTestResultPrinter31OutputXmlTestSuiteForTestResultEPSoRKNS_10TestResultE called 0 returned 0% blocks executed 0%
    #####: 4222:void XmlUnitTestResultPrinter::OutputXmlTestSuiteForTestResult(
        -: 4223:    ::std::ostream* stream, const TestResult& result) {
        -: 4224:  // Output the boilerplate for a minimal test suite with one test.
    #####: 4225:  *stream << "  <testsuite";
    %%%%%: 4225-block  0
call    0 never executed
    #####: 4226:  OutputXmlAttribute(stream, "testsuite", "name", "NonTestSuiteFailure");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4226-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4226-block  1
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4226-block  2
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4226-block  3
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
    $$$$$: 4226-block  4
call   21 never executed
    $$$$$: 4226-block  5
call   22 never executed
    $$$$$: 4226-block  6
    $$$$$: 4226-block  7
    $$$$$: 4226-block  8
call   23 never executed
    $$$$$: 4226-block  9
call   24 never executed
    $$$$$: 4226-block 10
    $$$$$: 4226-block 11
    $$$$$: 4226-block 12
call   25 never executed
    $$$$$: 4226-block 13
call   26 never executed
    $$$$$: 4226-block 14
    $$$$$: 4226-block 15
call   27 never executed
    #####: 4227:  OutputXmlAttribute(stream, "testsuite", "tests", "1");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4227-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4227-block  1
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4227-block  2
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4227-block  3
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
    $$$$$: 4227-block  4
call   21 never executed
    $$$$$: 4227-block  5
call   22 never executed
    $$$$$: 4227-block  6
    $$$$$: 4227-block  7
    $$$$$: 4227-block  8
call   23 never executed
    $$$$$: 4227-block  9
call   24 never executed
    $$$$$: 4227-block 10
    $$$$$: 4227-block 11
    $$$$$: 4227-block 12
call   25 never executed
    $$$$$: 4227-block 13
call   26 never executed
    $$$$$: 4227-block 14
    $$$$$: 4227-block 15
call   27 never executed
    #####: 4228:  OutputXmlAttribute(stream, "testsuite", "failures", "1");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4228-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4228-block  1
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4228-block  2
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4228-block  3
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
    $$$$$: 4228-block  4
call   21 never executed
    $$$$$: 4228-block  5
call   22 never executed
    $$$$$: 4228-block  6
    $$$$$: 4228-block  7
    $$$$$: 4228-block  8
call   23 never executed
    $$$$$: 4228-block  9
call   24 never executed
    $$$$$: 4228-block 10
    $$$$$: 4228-block 11
    $$$$$: 4228-block 12
call   25 never executed
    $$$$$: 4228-block 13
call   26 never executed
    $$$$$: 4228-block 14
    $$$$$: 4228-block 15
call   27 never executed
    #####: 4229:  OutputXmlAttribute(stream, "testsuite", "disabled", "0");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4229-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4229-block  1
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4229-block  2
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4229-block  3
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
    $$$$$: 4229-block  4
call   21 never executed
    $$$$$: 4229-block  5
call   22 never executed
    $$$$$: 4229-block  6
    $$$$$: 4229-block  7
    $$$$$: 4229-block  8
call   23 never executed
    $$$$$: 4229-block  9
call   24 never executed
    $$$$$: 4229-block 10
    $$$$$: 4229-block 11
    $$$$$: 4229-block 12
call   25 never executed
    $$$$$: 4229-block 13
call   26 never executed
    $$$$$: 4229-block 14
    $$$$$: 4229-block 15
call   27 never executed
    #####: 4230:  OutputXmlAttribute(stream, "testsuite", "skipped", "0");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4230-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4230-block  1
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4230-block  2
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4230-block  3
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
    $$$$$: 4230-block  4
call   21 never executed
    $$$$$: 4230-block  5
call   22 never executed
    $$$$$: 4230-block  6
    $$$$$: 4230-block  7
    $$$$$: 4230-block  8
call   23 never executed
    $$$$$: 4230-block  9
call   24 never executed
    $$$$$: 4230-block 10
    $$$$$: 4230-block 11
    $$$$$: 4230-block 12
call   25 never executed
    $$$$$: 4230-block 13
call   26 never executed
    $$$$$: 4230-block 14
    $$$$$: 4230-block 15
call   27 never executed
    #####: 4231:  OutputXmlAttribute(stream, "testsuite", "errors", "0");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4231-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4231-block  1
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4231-block  2
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4231-block  3
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
    $$$$$: 4231-block  4
call   21 never executed
    $$$$$: 4231-block  5
call   22 never executed
    $$$$$: 4231-block  6
    $$$$$: 4231-block  7
    $$$$$: 4231-block  8
call   23 never executed
    $$$$$: 4231-block  9
call   24 never executed
    $$$$$: 4231-block 10
    $$$$$: 4231-block 11
    $$$$$: 4231-block 12
call   25 never executed
    $$$$$: 4231-block 13
call   26 never executed
    $$$$$: 4231-block 14
    $$$$$: 4231-block 15
call   27 never executed
    #####: 4232:  OutputXmlAttribute(stream, "testsuite", "time",
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4232-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4232-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
    $$$$$: 4232-block  2
call   14 never executed
    $$$$$: 4232-block  3
call   15 never executed
    $$$$$: 4232-block  4
    $$$$$: 4232-block  5
    $$$$$: 4232-block  6
call   16 never executed
    $$$$$: 4232-block  7
call   17 never executed
    $$$$$: 4232-block  8
    $$$$$: 4232-block  9
call   18 never executed
    #####: 4233:                     FormatTimeInMillisAsSeconds(result.elapsed_time()));
    %%%%%: 4233-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4233-block  1
call    4 never executed
call    5 never executed
    $$$$$: 4233-block  2
call    6 never executed
    $$$$$: 4233-block  3
    #####: 4234:  OutputXmlAttribute(
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4234-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4234-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
    $$$$$: 4234-block  2
call   14 never executed
    $$$$$: 4234-block  3
call   15 never executed
    $$$$$: 4234-block  4
    $$$$$: 4234-block  5
    $$$$$: 4234-block  6
call   16 never executed
    $$$$$: 4234-block  7
call   17 never executed
    $$$$$: 4234-block  8
    $$$$$: 4234-block  9
call   18 never executed
        -: 4235:      stream, "testsuite", "timestamp",
    #####: 4236:      FormatEpochTimeInMillisAsIso8601(result.start_timestamp()));
    %%%%%: 4236-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4236-block  1
call    4 never executed
call    5 never executed
    $$$$$: 4236-block  2
call    6 never executed
    $$$$$: 4236-block  3
    #####: 4237:  *stream << ">";
call    0 never executed
        -: 4238:
        -: 4239:  // Output the boilerplate for a minimal test case with a single test.
    #####: 4240:  *stream << "    <testcase";
call    0 never executed
    #####: 4241:  OutputXmlAttribute(stream, "testcase", "name", "");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4241-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4241-block  1
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4241-block  2
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4241-block  3
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
    $$$$$: 4241-block  4
call   21 never executed
    $$$$$: 4241-block  5
call   22 never executed
    $$$$$: 4241-block  6
    $$$$$: 4241-block  7
    $$$$$: 4241-block  8
call   23 never executed
    $$$$$: 4241-block  9
call   24 never executed
    $$$$$: 4241-block 10
    $$$$$: 4241-block 11
    $$$$$: 4241-block 12
call   25 never executed
    $$$$$: 4241-block 13
call   26 never executed
    $$$$$: 4241-block 14
    $$$$$: 4241-block 15
call   27 never executed
    #####: 4242:  OutputXmlAttribute(stream, "testcase", "status", "run");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4242-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4242-block  1
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4242-block  2
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4242-block  3
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
    $$$$$: 4242-block  4
call   21 never executed
    $$$$$: 4242-block  5
call   22 never executed
    $$$$$: 4242-block  6
    $$$$$: 4242-block  7
    $$$$$: 4242-block  8
call   23 never executed
    $$$$$: 4242-block  9
call   24 never executed
    $$$$$: 4242-block 10
    $$$$$: 4242-block 11
    $$$$$: 4242-block 12
call   25 never executed
    $$$$$: 4242-block 13
call   26 never executed
    $$$$$: 4242-block 14
    $$$$$: 4242-block 15
call   27 never executed
    #####: 4243:  OutputXmlAttribute(stream, "testcase", "result", "completed");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4243-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4243-block  1
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4243-block  2
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4243-block  3
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
    $$$$$: 4243-block  4
call   21 never executed
    $$$$$: 4243-block  5
call   22 never executed
    $$$$$: 4243-block  6
    $$$$$: 4243-block  7
    $$$$$: 4243-block  8
call   23 never executed
    $$$$$: 4243-block  9
call   24 never executed
    $$$$$: 4243-block 10
    $$$$$: 4243-block 11
    $$$$$: 4243-block 12
call   25 never executed
    $$$$$: 4243-block 13
call   26 never executed
    $$$$$: 4243-block 14
    $$$$$: 4243-block 15
call   27 never executed
    #####: 4244:  OutputXmlAttribute(stream, "testcase", "classname", "");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4244-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4244-block  1
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4244-block  2
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4244-block  3
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
    $$$$$: 4244-block  4
call   21 never executed
    $$$$$: 4244-block  5
call   22 never executed
    $$$$$: 4244-block  6
    $$$$$: 4244-block  7
    $$$$$: 4244-block  8
call   23 never executed
    $$$$$: 4244-block  9
call   24 never executed
    $$$$$: 4244-block 10
    $$$$$: 4244-block 11
    $$$$$: 4244-block 12
call   25 never executed
    $$$$$: 4244-block 13
call   26 never executed
    $$$$$: 4244-block 14
    $$$$$: 4244-block 15
call   27 never executed
    #####: 4245:  OutputXmlAttribute(stream, "testcase", "time",
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4245-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4245-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
    $$$$$: 4245-block  2
call   14 never executed
    $$$$$: 4245-block  3
call   15 never executed
    $$$$$: 4245-block  4
    $$$$$: 4245-block  5
    $$$$$: 4245-block  6
call   16 never executed
    $$$$$: 4245-block  7
call   17 never executed
    $$$$$: 4245-block  8
    $$$$$: 4245-block  9
call   18 never executed
    #####: 4246:                     FormatTimeInMillisAsSeconds(result.elapsed_time()));
    %%%%%: 4246-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4246-block  1
call    4 never executed
call    5 never executed
    $$$$$: 4246-block  2
call    6 never executed
    $$$$$: 4246-block  3
    #####: 4247:  OutputXmlAttribute(
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4247-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4247-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
    $$$$$: 4247-block  2
call   14 never executed
    $$$$$: 4247-block  3
call   15 never executed
    $$$$$: 4247-block  4
    $$$$$: 4247-block  5
    $$$$$: 4247-block  6
call   16 never executed
    $$$$$: 4247-block  7
call   17 never executed
    $$$$$: 4247-block  8
        -: 4248:      stream, "testcase", "timestamp",
    #####: 4249:      FormatEpochTimeInMillisAsIso8601(result.start_timestamp()));
    %%%%%: 4249-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4249-block  1
call    4 never executed
call    5 never executed
    $$$$$: 4249-block  2
call    6 never executed
    $$$$$: 4249-block  3
        -: 4250:
        -: 4251:  // Output the actual test result.
    #####: 4252:  OutputXmlTestResult(stream, result);
call    0 never executed
        -: 4253:
        -: 4254:  // Complete the test suite.
    #####: 4255:  *stream << "  </testsuite>\n";
call    0 never executed
    #####: 4256:}
        -: 4257:
        -: 4258:// Prints an XML representation of a TestInfo object.
function _ZN7testing8internal24XmlUnitTestResultPrinter17OutputXmlTestInfoEPSoPKcRKNS_8TestInfoE called 0 returned 0% blocks executed 0%
    #####: 4259:void XmlUnitTestResultPrinter::OutputXmlTestInfo(::std::ostream* stream,
        -: 4260:                                                 const char* test_suite_name,
        -: 4261:                                                 const TestInfo& test_info) {
    #####: 4262:  const TestResult& result = *test_info.result();
    %%%%%: 4262-block  0
call    0 never executed
    #####: 4263:  const std::string kTestsuite = "testcase";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4263-block  0
call    4 never executed
    $$$$$: 4263-block  1
call    5 never executed
    $$$$$: 4263-block  2
        -: 4264:
    #####: 4265:  if (test_info.is_in_another_shard()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4266:    return;
    %%%%%: 4266-block  0
        -: 4267:  }
        -: 4268:
    #####: 4269:  *stream << "    <testcase";
    %%%%%: 4269-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4270:  OutputXmlAttribute(stream, kTestsuite, "name", test_info.name());
    %%%%%: 4270-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4270-block  1
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4270-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4270-block  3
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    $$$$$: 4270-block  4
call   16 never executed
    $$$$$: 4270-block  5
call   17 never executed
    $$$$$: 4270-block  6
    $$$$$: 4270-block  7
    $$$$$: 4270-block  8
call   18 never executed
    $$$$$: 4270-block  9
call   19 never executed
    $$$$$: 4270-block 10
    $$$$$: 4270-block 11
        -: 4271:
    #####: 4272:  if (test_info.value_param() != nullptr) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4273:    OutputXmlAttribute(stream, kTestsuite, "value_param",
    %%%%%: 4273-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4273-block  1
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4273-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4273-block  3
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    $$$$$: 4273-block  4
call   16 never executed
    $$$$$: 4273-block  5
call   17 never executed
    $$$$$: 4273-block  6
    $$$$$: 4273-block  7
    $$$$$: 4273-block  8
call   18 never executed
    $$$$$: 4273-block  9
call   19 never executed
    $$$$$: 4273-block 10
    $$$$$: 4273-block 11
        -: 4274:                       test_info.value_param());
        -: 4275:  }
    #####: 4276:  if (test_info.type_param() != nullptr) {
    %%%%%: 4276-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4277:    OutputXmlAttribute(stream, kTestsuite, "type_param",
    %%%%%: 4277-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4277-block  1
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4277-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4277-block  3
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    $$$$$: 4277-block  4
call   16 never executed
    $$$$$: 4277-block  5
call   17 never executed
    $$$$$: 4277-block  6
    $$$$$: 4277-block  7
    $$$$$: 4277-block  8
call   18 never executed
    $$$$$: 4277-block  9
call   19 never executed
    $$$$$: 4277-block 10
    $$$$$: 4277-block 11
        -: 4278:                       test_info.type_param());
        -: 4279:  }
        -: 4280:
    #####: 4281:  OutputXmlAttribute(stream, kTestsuite, "file", test_info.file());
    %%%%%: 4281-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4281-block  1
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4281-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4281-block  3
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    $$$$$: 4281-block  4
call   16 never executed
    $$$$$: 4281-block  5
call   17 never executed
    $$$$$: 4281-block  6
    $$$$$: 4281-block  7
    $$$$$: 4281-block  8
call   18 never executed
    $$$$$: 4281-block  9
call   19 never executed
    $$$$$: 4281-block 10
    $$$$$: 4281-block 11
    #####: 4282:  OutputXmlAttribute(stream, kTestsuite, "line",
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4282-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
    $$$$$: 4282-block  1
call    8 never executed
    $$$$$: 4282-block  2
call    9 never executed
    $$$$$: 4282-block  3
    $$$$$: 4282-block  4
    #####: 4283:                     StreamableToString(test_info.line()));
    %%%%%: 4283-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4283-block  1
call    4 never executed
call    5 never executed
    $$$$$: 4283-block  2
call    6 never executed
    $$$$$: 4283-block  3
    $$$$$: 4283-block  4
    #####: 4284:  if (GTEST_FLAG_GET(list_tests)) {
branch  0 never executed
branch  1 never executed
    #####: 4285:    *stream << " />\n";
    %%%%%: 4285-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4286:    return;
    %%%%%: 4286-block  0
        -: 4287:  }
        -: 4288:
    #####: 4289:  OutputXmlAttribute(stream, kTestsuite, "status",
    %%%%%: 4289-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4289-block  1
    %%%%%: 4289-block  2
    %%%%%: 4289-block  3
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4289-block  4
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4289-block  5
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
    $$$$$: 4289-block  6
call   17 never executed
    $$$$$: 4289-block  7
call   18 never executed
    $$$$$: 4289-block  8
    $$$$$: 4289-block  9
    $$$$$: 4289-block 10
call   19 never executed
    $$$$$: 4289-block 11
call   20 never executed
    $$$$$: 4289-block 12
    $$$$$: 4289-block 13
    #####: 4290:                     test_info.should_run() ? "run" : "notrun");
    %%%%%: 4290-block  0
call    0 never executed
    #####: 4291:  OutputXmlAttribute(stream, kTestsuite, "result",
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4291-block  0
    %%%%%: 4291-block  1
    %%%%%: 4291-block  2
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4291-block  3
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4291-block  4
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
    $$$$$: 4291-block  5
call   17 never executed
    $$$$$: 4291-block  6
call   18 never executed
    $$$$$: 4291-block  7
    $$$$$: 4291-block  8
    $$$$$: 4291-block  9
call   19 never executed
    $$$$$: 4291-block 10
call   20 never executed
    $$$$$: 4291-block 11
    $$$$$: 4291-block 12
    #####: 4292:                     test_info.should_run()
    %%%%%: 4292-block  0
call    0 never executed
    #####: 4293:                         ? (result.Skipped() ? "skipped" : "completed")
    %%%%%: 4293-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4293-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 4293-block  2
    %%%%%: 4293-block  3
        -: 4294:                         : "suppressed");
    #####: 4295:  OutputXmlAttribute(stream, kTestsuite, "time",
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4295-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
    $$$$$: 4295-block  1
call    8 never executed
    $$$$$: 4295-block  2
call    9 never executed
    $$$$$: 4295-block  3
    $$$$$: 4295-block  4
    #####: 4296:                     FormatTimeInMillisAsSeconds(result.elapsed_time()));
    %%%%%: 4296-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4296-block  1
call    4 never executed
call    5 never executed
    $$$$$: 4296-block  2
call    6 never executed
    $$$$$: 4296-block  3
    #####: 4297:  OutputXmlAttribute(
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4297-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
    $$$$$: 4297-block  1
call    8 never executed
    $$$$$: 4297-block  2
call    9 never executed
    $$$$$: 4297-block  3
    $$$$$: 4297-block  4
        -: 4298:      stream, kTestsuite, "timestamp",
    #####: 4299:      FormatEpochTimeInMillisAsIso8601(result.start_timestamp()));
    %%%%%: 4299-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4299-block  1
call    4 never executed
call    5 never executed
    $$$$$: 4299-block  2
call    6 never executed
    $$$$$: 4299-block  3
    #####: 4300:  OutputXmlAttribute(stream, kTestsuite, "classname", test_suite_name);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4300-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4300-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4300-block  2
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4300-block  3
call   15 never executed
    $$$$$: 4300-block  4
call   16 never executed
    $$$$$: 4300-block  5
    $$$$$: 4300-block  6
    $$$$$: 4300-block  7
call   17 never executed
    $$$$$: 4300-block  8
call   18 never executed
    $$$$$: 4300-block  9
    $$$$$: 4300-block 10
        -: 4301:
    #####: 4302:  OutputXmlTestResult(stream, result);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4303:}
    %%%%%: 4303-block  0
    %%%%%: 4303-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 4303-block  2
call    3 never executed
        -: 4304:
function _ZN7testing8internal24XmlUnitTestResultPrinter19OutputXmlTestResultEPSoRKNS_10TestResultE called 0 returned 0% blocks executed 0%
    #####: 4305:void XmlUnitTestResultPrinter::OutputXmlTestResult(::std::ostream* stream,
        -: 4306:                                                   const TestResult& result) {
    #####: 4307:  int failures = 0;
    #####: 4308:  int skips = 0;
    #####: 4309:  for (int i = 0; i < result.total_part_count(); ++i) {
    %%%%%: 4309-block  0
    %%%%%: 4309-block  1
    %%%%%: 4309-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4310:    const TestPartResult& part = result.GetTestPartResult(i);
    %%%%%: 4310-block  0
call    0 never executed
    #####: 4311:    if (part.failed()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4312:      if (++failures == 1 && skips == 0) {
    %%%%%: 4312-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 4312-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 4312-block  2
    %%%%%: 4312-block  3
    %%%%%: 4312-block  4
branch  4 never executed
branch  5 never executed
    #####: 4313:        *stream << ">\n";
    %%%%%: 4313-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4314:      }
        -: 4315:      const std::string location =
        -: 4316:          internal::FormatCompilerIndependentFileLocation(part.file_name(),
    #####: 4317:                                                          part.line_number());
    %%%%%: 4317-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 4318:      const std::string summary = location + "\n" + part.summary();
    %%%%%: 4318-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4318-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4318-block  2
call    7 never executed
    $$$$$: 4318-block  3
call    8 never executed
    $$$$$: 4318-block  4
    #####: 4319:      *stream << "      <failure message=\"" << EscapeXmlAttribute(summary)
    %%%%%: 4319-block  0
call    0 never executed
    $$$$$: 4319-block  1
call    1 never executed
    $$$$$: 4319-block  2
    #####: 4320:              << "\" type=\"\">";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4320-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4320-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4320-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 4321:      const std::string detail = location + "\n" + part.message();
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4321-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4321-block  1
call    7 never executed
    $$$$$: 4321-block  2
call    8 never executed
    $$$$$: 4321-block  3
    #####: 4322:      OutputXmlCDataSection(stream, RemoveInvalidXmlCharacters(detail).c_str());
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4322-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4322-block  1
call    7 never executed
    $$$$$: 4322-block  2
call    8 never executed
    $$$$$: 4322-block  3
    #####: 4323:      *stream << "</failure>\n";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4324:    } else if (part.skipped()) {
    %%%%%: 4324-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    %%%%%: 4324-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 4324-block  2
call    6 never executed
    $$$$$: 4324-block  3
call    7 never executed
    $$$$$: 4324-block  4
call    8 never executed
    #####: 4325:      if (++skips == 1 && failures == 0) {
    %%%%%: 4325-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 4325-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 4325-block  2
    %%%%%: 4325-block  3
    %%%%%: 4325-block  4
branch  4 never executed
branch  5 never executed
    #####: 4326:        *stream << ">\n";
    %%%%%: 4326-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4327:      }
        -: 4328:      const std::string location =
        -: 4329:          internal::FormatCompilerIndependentFileLocation(part.file_name(),
    #####: 4330:                                                          part.line_number());
    %%%%%: 4330-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 4331:      const std::string summary = location + "\n" + part.summary();
    %%%%%: 4331-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4331-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4331-block  2
call    7 never executed
    $$$$$: 4331-block  3
call    8 never executed
    $$$$$: 4331-block  4
        -: 4332:      *stream << "      <skipped message=\""
    #####: 4333:              << EscapeXmlAttribute(summary.c_str()) << "\">";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4333-block  0
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4333-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4333-block  2
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 4333-block  3
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%: 4333-block  4
call   17 never executed
call   18 never executed
call   19 never executed
    $$$$$: 4333-block  5
call   20 never executed
    $$$$$: 4333-block  6
call   21 never executed
    $$$$$: 4333-block  7
call   22 never executed
    $$$$$: 4333-block  8
    $$$$$: 4333-block  9
    $$$$$: 4333-block 10
    #####: 4334:      const std::string detail = location + "\n" + part.message();
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4334-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4334-block  1
call    7 never executed
    $$$$$: 4334-block  2
call    8 never executed
    $$$$$: 4334-block  3
    #####: 4335:      OutputXmlCDataSection(stream, RemoveInvalidXmlCharacters(detail).c_str());
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4335-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4335-block  1
call    7 never executed
    $$$$$: 4335-block  2
call    8 never executed
    $$$$$: 4335-block  3
    #####: 4336:      *stream << "</skipped>\n";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4337:    }
    %%%%%: 4337-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    $$$$$: 4337-block  1
call    3 never executed
    $$$$$: 4337-block  2
call    4 never executed
    $$$$$: 4337-block  3
call    5 never executed
        -: 4338:  }
        -: 4339:
    #####: 4340:  if (failures == 0 && skips == 0 && result.test_property_count() == 0) {
    %%%%%: 4340-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 4340-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 4340-block  2
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4340-block  3
    %%%%%: 4340-block  4
    %%%%%: 4340-block  5
branch  7 never executed
branch  8 never executed
    #####: 4341:    *stream << " />\n";
    %%%%%: 4341-block  0
call    0 never executed
        -: 4342:  } else {
    #####: 4343:    if (failures == 0 && skips == 0) {
    %%%%%: 4343-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 4343-block  1
branch  2 never executed
branch  3 never executed
    #####: 4344:      *stream << ">\n";
    %%%%%: 4344-block  0
call    0 never executed
        -: 4345:    }
    #####: 4346:    OutputXmlTestProperties(stream, result);
    %%%%%: 4346-block  0
call    0 never executed
    #####: 4347:    *stream << "    </testcase>\n";
call    0 never executed
        -: 4348:  }
    #####: 4349:}
    %%%%%: 4349-block  0
        -: 4350:
        -: 4351:// Prints an XML representation of a TestSuite object
function _ZN7testing8internal24XmlUnitTestResultPrinter17PrintXmlTestSuiteEPSoRKNS_9TestSuiteE called 0 returned 0% blocks executed 0%
    #####: 4352:void XmlUnitTestResultPrinter::PrintXmlTestSuite(std::ostream* stream,
        -: 4353:                                                 const TestSuite& test_suite) {
    #####: 4354:  const std::string kTestsuite = "testsuite";
    %%%%%: 4354-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4354-block  1
call    4 never executed
    $$$$$: 4354-block  2
call    5 never executed
    $$$$$: 4354-block  3
    #####: 4355:  *stream << "  <" << kTestsuite;
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4355-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 4356:  OutputXmlAttribute(stream, kTestsuite, "name", test_suite.name());
    %%%%%: 4356-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4356-block  1
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4356-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4356-block  3
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    $$$$$: 4356-block  4
call   16 never executed
    $$$$$: 4356-block  5
call   17 never executed
    $$$$$: 4356-block  6
    $$$$$: 4356-block  7
    $$$$$: 4356-block  8
call   18 never executed
    $$$$$: 4356-block  9
call   19 never executed
    $$$$$: 4356-block 10
    $$$$$: 4356-block 11
    #####: 4357:  OutputXmlAttribute(stream, kTestsuite, "tests",
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4357-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
    $$$$$: 4357-block  1
call    8 never executed
    $$$$$: 4357-block  2
call    9 never executed
    $$$$$: 4357-block  3
    $$$$$: 4357-block  4
    #####: 4358:                     StreamableToString(test_suite.reportable_test_count()));
    %%%%%: 4358-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4358-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4358-block  2
call    6 never executed
call    7 never executed
    $$$$$: 4358-block  3
call    8 never executed
    $$$$$: 4358-block  4
    $$$$$: 4358-block  5
    #####: 4359:  if (!GTEST_FLAG_GET(list_tests)) {
branch  0 never executed
branch  1 never executed
    #####: 4360:    OutputXmlAttribute(stream, kTestsuite, "failures",
    %%%%%: 4360-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4360-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
    $$$$$: 4360-block  2
call    8 never executed
    $$$$$: 4360-block  3
call    9 never executed
    $$$$$: 4360-block  4
    $$$$$: 4360-block  5
    #####: 4361:                       StreamableToString(test_suite.failed_test_count()));
    %%%%%: 4361-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4361-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4361-block  2
call    6 never executed
call    7 never executed
    $$$$$: 4361-block  3
call    8 never executed
    $$$$$: 4361-block  4
    $$$$$: 4361-block  5
    #####: 4362:    OutputXmlAttribute(
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4362-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
    $$$$$: 4362-block  1
call    8 never executed
    $$$$$: 4362-block  2
call    9 never executed
    $$$$$: 4362-block  3
    $$$$$: 4362-block  4
        -: 4363:        stream, kTestsuite, "disabled",
    #####: 4364:        StreamableToString(test_suite.reportable_disabled_test_count()));
    %%%%%: 4364-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4364-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4364-block  2
call    6 never executed
call    7 never executed
    $$$$$: 4364-block  3
call    8 never executed
    $$$$$: 4364-block  4
    $$$$$: 4364-block  5
    #####: 4365:    OutputXmlAttribute(stream, kTestsuite, "skipped",
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4365-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
    $$$$$: 4365-block  1
call    8 never executed
    $$$$$: 4365-block  2
call    9 never executed
    $$$$$: 4365-block  3
    $$$$$: 4365-block  4
    #####: 4366:                       StreamableToString(test_suite.skipped_test_count()));
    %%%%%: 4366-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4366-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4366-block  2
call    6 never executed
call    7 never executed
    $$$$$: 4366-block  3
call    8 never executed
    $$$$$: 4366-block  4
    $$$$$: 4366-block  5
        -: 4367:
    #####: 4368:    OutputXmlAttribute(stream, kTestsuite, "errors", "0");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4368-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4368-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4368-block  2
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4368-block  3
call   15 never executed
    $$$$$: 4368-block  4
call   16 never executed
    $$$$$: 4368-block  5
    $$$$$: 4368-block  6
    $$$$$: 4368-block  7
call   17 never executed
    $$$$$: 4368-block  8
call   18 never executed
    $$$$$: 4368-block  9
    $$$$$: 4368-block 10
        -: 4369:
    #####: 4370:    OutputXmlAttribute(stream, kTestsuite, "time",
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4370-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
    $$$$$: 4370-block  1
call    8 never executed
    $$$$$: 4370-block  2
call    9 never executed
    $$$$$: 4370-block  3
    $$$$$: 4370-block  4
    #####: 4371:                       FormatTimeInMillisAsSeconds(test_suite.elapsed_time()));
    %%%%%: 4371-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4371-block  1
call    4 never executed
call    5 never executed
    $$$$$: 4371-block  2
call    6 never executed
    $$$$$: 4371-block  3
    #####: 4372:    OutputXmlAttribute(
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4372-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
    $$$$$: 4372-block  1
call    8 never executed
    $$$$$: 4372-block  2
call    9 never executed
    $$$$$: 4372-block  3
    $$$$$: 4372-block  4
        -: 4373:        stream, kTestsuite, "timestamp",
    #####: 4374:        FormatEpochTimeInMillisAsIso8601(test_suite.start_timestamp()));
    %%%%%: 4374-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4374-block  1
call    4 never executed
call    5 never executed
    $$$$$: 4374-block  2
call    6 never executed
    $$$$$: 4374-block  3
    #####: 4375:    *stream << TestPropertiesAsXmlAttributes(test_suite.ad_hoc_test_result());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4375-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4375-block  1
call    7 never executed
    $$$$$: 4375-block  2
call    8 never executed
    $$$$$: 4375-block  3
        -: 4376:  }
    #####: 4377:  *stream << ">\n";
    %%%%%: 4377-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4378:  for (int i = 0; i < test_suite.total_test_count(); ++i) {
    %%%%%: 4378-block  0
    %%%%%: 4378-block  1
    %%%%%: 4378-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4379:    if (test_suite.GetTestInfo(i)->is_reportable())
    %%%%%: 4379-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4379-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 4380:      OutputXmlTestInfo(stream, test_suite.name(), *test_suite.GetTestInfo(i));
    %%%%%: 4380-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4380-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
        -: 4381:  }
    #####: 4382:  *stream << "  </" << kTestsuite << ">\n";
    %%%%%: 4382-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4382-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4382-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 4383:}
    %%%%%: 4383-block  0
call    0 never executed
    $$$$$: 4383-block  1
call    1 never executed
        -: 4384:
        -: 4385:// Prints an XML summary of unit_test to output stream out.
function _ZN7testing8internal24XmlUnitTestResultPrinter16PrintXmlUnitTestEPSoRKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 4386:void XmlUnitTestResultPrinter::PrintXmlUnitTest(std::ostream* stream,
        -: 4387:                                                const UnitTest& unit_test) {
    #####: 4388:  const std::string kTestsuites = "testsuites";
    %%%%%: 4388-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4388-block  1
call    4 never executed
    $$$$$: 4388-block  2
call    5 never executed
    $$$$$: 4388-block  3
        -: 4389:
    #####: 4390:  *stream << "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4391:  *stream << "<" << kTestsuites;
    %%%%%: 4391-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4391-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 4392:
    #####: 4393:  OutputXmlAttribute(stream, kTestsuites, "tests",
    %%%%%: 4393-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4393-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
    $$$$$: 4393-block  2
call    8 never executed
    $$$$$: 4393-block  3
call    9 never executed
    $$$$$: 4393-block  4
    $$$$$: 4393-block  5
    #####: 4394:                     StreamableToString(unit_test.reportable_test_count()));
    %%%%%: 4394-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4394-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4394-block  2
call    6 never executed
call    7 never executed
    $$$$$: 4394-block  3
call    8 never executed
    $$$$$: 4394-block  4
    $$$$$: 4394-block  5
    #####: 4395:  OutputXmlAttribute(stream, kTestsuites, "failures",
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4395-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
    $$$$$: 4395-block  1
call    8 never executed
    $$$$$: 4395-block  2
call    9 never executed
    $$$$$: 4395-block  3
    $$$$$: 4395-block  4
    #####: 4396:                     StreamableToString(unit_test.failed_test_count()));
    %%%%%: 4396-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4396-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4396-block  2
call    6 never executed
call    7 never executed
    $$$$$: 4396-block  3
call    8 never executed
    $$$$$: 4396-block  4
    $$$$$: 4396-block  5
    #####: 4397:  OutputXmlAttribute(
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4397-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
    $$$$$: 4397-block  1
call    8 never executed
    $$$$$: 4397-block  2
call    9 never executed
    $$$$$: 4397-block  3
    $$$$$: 4397-block  4
        -: 4398:      stream, kTestsuites, "disabled",
    #####: 4399:      StreamableToString(unit_test.reportable_disabled_test_count()));
    %%%%%: 4399-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4399-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4399-block  2
call    6 never executed
call    7 never executed
    $$$$$: 4399-block  3
call    8 never executed
    $$$$$: 4399-block  4
    $$$$$: 4399-block  5
    #####: 4400:  OutputXmlAttribute(stream, kTestsuites, "errors", "0");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4400-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4400-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4400-block  2
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4400-block  3
call   15 never executed
    $$$$$: 4400-block  4
call   16 never executed
    $$$$$: 4400-block  5
    $$$$$: 4400-block  6
    $$$$$: 4400-block  7
call   17 never executed
    $$$$$: 4400-block  8
call   18 never executed
    $$$$$: 4400-block  9
    $$$$$: 4400-block 10
    #####: 4401:  OutputXmlAttribute(stream, kTestsuites, "time",
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4401-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
    $$$$$: 4401-block  1
call    8 never executed
    $$$$$: 4401-block  2
call    9 never executed
    $$$$$: 4401-block  3
    $$$$$: 4401-block  4
    #####: 4402:                     FormatTimeInMillisAsSeconds(unit_test.elapsed_time()));
    %%%%%: 4402-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4402-block  1
call    4 never executed
call    5 never executed
    $$$$$: 4402-block  2
call    6 never executed
    $$$$$: 4402-block  3
    #####: 4403:  OutputXmlAttribute(
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4403-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
    $$$$$: 4403-block  1
call    8 never executed
    $$$$$: 4403-block  2
call    9 never executed
    $$$$$: 4403-block  3
    $$$$$: 4403-block  4
        -: 4404:      stream, kTestsuites, "timestamp",
    #####: 4405:      FormatEpochTimeInMillisAsIso8601(unit_test.start_timestamp()));
    %%%%%: 4405-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4405-block  1
call    4 never executed
call    5 never executed
    $$$$$: 4405-block  2
call    6 never executed
    $$$$$: 4405-block  3
        -: 4406:
    #####: 4407:  if (GTEST_FLAG_GET(shuffle)) {
branch  0 never executed
branch  1 never executed
    #####: 4408:    OutputXmlAttribute(stream, kTestsuites, "random_seed",
    %%%%%: 4408-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4408-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
    $$$$$: 4408-block  2
call    8 never executed
    $$$$$: 4408-block  3
call    9 never executed
    $$$$$: 4408-block  4
    $$$$$: 4408-block  5
    #####: 4409:                       StreamableToString(unit_test.random_seed()));
    %%%%%: 4409-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4409-block  1
call    4 never executed
call    5 never executed
    $$$$$: 4409-block  2
call    6 never executed
    $$$$$: 4409-block  3
    $$$$$: 4409-block  4
        -: 4410:  }
    #####: 4411:  *stream << TestPropertiesAsXmlAttributes(unit_test.ad_hoc_test_result());
    %%%%%: 4411-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4411-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4411-block  2
call    7 never executed
    $$$$$: 4411-block  3
call    8 never executed
    $$$$$: 4411-block  4
        -: 4412:
    #####: 4413:  OutputXmlAttribute(stream, kTestsuites, "name", "AllTests");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4413-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4413-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4413-block  2
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4413-block  3
call   15 never executed
    $$$$$: 4413-block  4
call   16 never executed
    $$$$$: 4413-block  5
    $$$$$: 4413-block  6
    $$$$$: 4413-block  7
call   17 never executed
    $$$$$: 4413-block  8
call   18 never executed
    $$$$$: 4413-block  9
    $$$$$: 4413-block 10
    #####: 4414:  *stream << ">\n";
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4415:
    #####: 4416:  for (int i = 0; i < unit_test.total_test_suite_count(); ++i) {
    %%%%%: 4416-block  0
    %%%%%: 4416-block  1
    %%%%%: 4416-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4417:    if (unit_test.GetTestSuite(i)->reportable_test_count() > 0)
    %%%%%: 4417-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4417-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4417-block  2
branch  6 never executed
branch  7 never executed
    #####: 4418:      PrintXmlTestSuite(stream, *unit_test.GetTestSuite(i));
    %%%%%: 4418-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4418-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 4419:  }
        -: 4420:
        -: 4421:  // If there was a test failure outside of one of the test suites (like in a
        -: 4422:  // test environment) include that in the output.
    #####: 4423:  if (unit_test.ad_hoc_test_result().Failed()) {
    %%%%%: 4423-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4423-block  1
branch  4 never executed
branch  5 never executed
    #####: 4424:    OutputXmlTestSuiteForTestResult(stream, unit_test.ad_hoc_test_result());
    %%%%%: 4424-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 4425:  }
        -: 4426:
    #####: 4427:  *stream << "</" << kTestsuites << ">\n";
    %%%%%: 4427-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4427-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4427-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 4428:}
    %%%%%: 4428-block  0
call    0 never executed
    $$$$$: 4428-block  1
call    1 never executed
        -: 4429:
function _ZN7testing8internal24XmlUnitTestResultPrinter17PrintXmlTestsListEPSoRKSt6vectorIPNS_9TestSuiteESaIS5_EE called 0 returned 0% blocks executed 0%
    #####: 4430:void XmlUnitTestResultPrinter::PrintXmlTestsList(
        -: 4431:    std::ostream* stream, const std::vector<TestSuite*>& test_suites) {
    #####: 4432:  const std::string kTestsuites = "testsuites";
    %%%%%: 4432-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4432-block  1
call    4 never executed
    $$$$$: 4432-block  2
call    5 never executed
    $$$$$: 4432-block  3
        -: 4433:
    #####: 4434:  *stream << "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4435:  *stream << "<" << kTestsuites;
    %%%%%: 4435-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4435-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 4436:
    #####: 4437:  int total_tests = 0;
    #####: 4438:  for (auto test_suite : test_suites) {
    %%%%%: 4438-block  0
call    0 never executed
call    1 never executed
    %%%%%: 4438-block  1
call    2 never executed
    %%%%%: 4438-block  2
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 4439:    total_tests += test_suite->total_test_count();
call    0 never executed
call    1 never executed
        -: 4440:  }
    #####: 4441:  OutputXmlAttribute(stream, kTestsuites, "tests",
    %%%%%: 4441-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4441-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
    $$$$$: 4441-block  2
call    8 never executed
    $$$$$: 4441-block  3
call    9 never executed
    $$$$$: 4441-block  4
    $$$$$: 4441-block  5
    #####: 4442:                     StreamableToString(total_tests));
    %%%%%: 4442-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4442-block  1
call    3 never executed
call    4 never executed
    $$$$$: 4442-block  2
call    5 never executed
    $$$$$: 4442-block  3
    #####: 4443:  OutputXmlAttribute(stream, kTestsuites, "name", "AllTests");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4443-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4443-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4443-block  2
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4443-block  3
call   15 never executed
    $$$$$: 4443-block  4
call   16 never executed
    $$$$$: 4443-block  5
    $$$$$: 4443-block  6
    $$$$$: 4443-block  7
call   17 never executed
    $$$$$: 4443-block  8
call   18 never executed
    $$$$$: 4443-block  9
    $$$$$: 4443-block 10
    #####: 4444:  *stream << ">\n";
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4445:
    #####: 4446:  for (auto test_suite : test_suites) {
    %%%%%: 4446-block  0
call    0 never executed
call    1 never executed
    %%%%%: 4446-block  1
call    2 never executed
    %%%%%: 4446-block  2
call    3 never executed
    %%%%%: 4446-block  3
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####: 4447:    PrintXmlTestSuite(stream, *test_suite);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4448:  }
    #####: 4449:  *stream << "</" << kTestsuites << ">\n";
    %%%%%: 4449-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4449-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4449-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 4450:}
    %%%%%: 4450-block  0
call    0 never executed
    $$$$$: 4450-block  1
call    1 never executed
        -: 4451:
        -: 4452:// Produces a string representing the test properties in a result as space
        -: 4453:// delimited XML attributes based on the property key="value" pairs.
function _ZN7testing8internal24XmlUnitTestResultPrinter29TestPropertiesAsXmlAttributesB5cxx11ERKNS_10TestResultE called 0 returned 0% blocks executed 0%
    #####: 4454:std::string XmlUnitTestResultPrinter::TestPropertiesAsXmlAttributes(
        -: 4455:    const TestResult& result) {
    #####: 4456:  Message attributes;
    %%%%%: 4456-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4457:  for (int i = 0; i < result.test_property_count(); ++i) {
    %%%%%: 4457-block  0
    %%%%%: 4457-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4458:    const TestProperty& property = result.GetTestProperty(i);
    %%%%%: 4458-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4459:    attributes << " " << property.key() << "=" << "\""
    %%%%%: 4459-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4459-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4459-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4459-block  3
call   10 never executed
branch 11 never executed
branch 12 never executed
    $$$$$: 4459-block  4
    #####: 4460:               << EscapeXmlAttribute(property.value()) << "\"";
    %%%%%: 4460-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4460-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4460-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4460-block  3
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 4460-block  4
call   14 never executed
call   15 never executed
call   16 never executed
    $$$$$: 4460-block  5
call   17 never executed
    $$$$$: 4460-block  6
call   18 never executed
    $$$$$: 4460-block  7
call   19 never executed
    $$$$$: 4460-block  8
    $$$$$: 4460-block  9
    $$$$$: 4460-block 10
        -: 4461:  }
    #####: 4462:  return attributes.GetString();
    %%%%%: 4462-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4462-block  1
    #####: 4463:}
    %%%%%: 4463-block  0
call    0 never executed
    $$$$$: 4463-block  1
call    1 never executed
        -: 4464:
function _ZN7testing8internal24XmlUnitTestResultPrinter23OutputXmlTestPropertiesEPSoRKNS_10TestResultE called 0 returned 0% blocks executed 0%
    #####: 4465:void XmlUnitTestResultPrinter::OutputXmlTestProperties(
        -: 4466:    std::ostream* stream, const TestResult& result) {
    #####: 4467:  const std::string kProperties = "properties";
    %%%%%: 4467-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4467-block  1
call    4 never executed
    $$$$$: 4467-block  2
call    5 never executed
    $$$$$: 4467-block  3
    #####: 4468:  const std::string kProperty = "property";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4468-block  0
call    4 never executed
    $$$$$: 4468-block  1
call    5 never executed
    $$$$$: 4468-block  2
        -: 4469:
    #####: 4470:  if (result.test_property_count() <= 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4471:    return;
    %%%%%: 4471-block  0
        -: 4472:  }
        -: 4473:
    #####: 4474:  *stream << "      <" << kProperties << ">\n";
    %%%%%: 4474-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4474-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4474-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 4475:  for (int i = 0; i < result.test_property_count(); ++i) {
    %%%%%: 4475-block  0
    %%%%%: 4475-block  1
    %%%%%: 4475-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4476:    const TestProperty& property = result.GetTestProperty(i);
    %%%%%: 4476-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4477:    *stream << "        <" << kProperty;
    %%%%%: 4477-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4477-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 4478:    *stream << " name=\"" << EscapeXmlAttribute(property.key()) << "\"";
    %%%%%: 4478-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4478-block  1
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4478-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4478-block  3
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 4478-block  4
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%: 4478-block  5
call   17 never executed
call   18 never executed
call   19 never executed
    $$$$$: 4478-block  6
call   20 never executed
    $$$$$: 4478-block  7
call   21 never executed
    $$$$$: 4478-block  8
call   22 never executed
    $$$$$: 4478-block  9
    $$$$$: 4478-block 10
    $$$$$: 4478-block 11
    #####: 4479:    *stream << " value=\"" << EscapeXmlAttribute(property.value()) << "\"";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4479-block  0
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4479-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4479-block  2
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 4479-block  3
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%: 4479-block  4
call   17 never executed
call   18 never executed
call   19 never executed
    $$$$$: 4479-block  5
call   20 never executed
    $$$$$: 4479-block  6
call   21 never executed
    $$$$$: 4479-block  7
call   22 never executed
    $$$$$: 4479-block  8
    $$$$$: 4479-block  9
    $$$$$: 4479-block 10
    #####: 4480:    *stream << "/>\n";
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4481:  }
    #####: 4482:  *stream << "      </" << kProperties << ">\n";
    %%%%%: 4482-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4482-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4482-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 4483:}
    %%%%%: 4483-block  0
    %%%%%: 4483-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4483-block  2
    %%%%%: 4483-block  3
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 4483-block  4
call    6 never executed
    $$$$$: 4483-block  5
call    7 never executed
        -: 4484:
        -: 4485:// End XmlUnitTestResultPrinter
        -: 4486:#endif  // GTEST_HAS_FILE_SYSTEM
        -: 4487:
        -: 4488:#if GTEST_HAS_FILE_SYSTEM
        -: 4489:// This class generates an JSON output file.
        -: 4490:class JsonUnitTestResultPrinter : public EmptyTestEventListener {
        -: 4491: public:
        -: 4492:  explicit JsonUnitTestResultPrinter(const char* output_file);
        -: 4493:
        -: 4494:  void OnTestIterationEnd(const UnitTest& unit_test, int iteration) override;
        -: 4495:
        -: 4496:  // Prints an JSON summary of all unit tests.
        -: 4497:  static void PrintJsonTestList(::std::ostream* stream,
        -: 4498:                                const std::vector<TestSuite*>& test_suites);
        -: 4499:
        -: 4500: private:
        -: 4501:  // Returns an JSON-escaped copy of the input string str.
        -: 4502:  static std::string EscapeJson(const std::string& str);
        -: 4503:
        -: 4504:  //// Verifies that the given attribute belongs to the given element and
        -: 4505:  //// streams the attribute as JSON.
        -: 4506:  static void OutputJsonKey(std::ostream* stream,
        -: 4507:                            const std::string& element_name,
        -: 4508:                            const std::string& name, const std::string& value,
        -: 4509:                            const std::string& indent, bool comma = true);
        -: 4510:  static void OutputJsonKey(std::ostream* stream,
        -: 4511:                            const std::string& element_name,
        -: 4512:                            const std::string& name, int value,
        -: 4513:                            const std::string& indent, bool comma = true);
        -: 4514:
        -: 4515:  // Streams a test suite JSON stanza containing the given test result.
        -: 4516:  //
        -: 4517:  // Requires: result.Failed()
        -: 4518:  static void OutputJsonTestSuiteForTestResult(::std::ostream* stream,
        -: 4519:                                               const TestResult& result);
        -: 4520:
        -: 4521:  // Streams a JSON representation of a TestResult object.
        -: 4522:  static void OutputJsonTestResult(::std::ostream* stream,
        -: 4523:                                   const TestResult& result);
        -: 4524:
        -: 4525:  // Streams a JSON representation of a TestInfo object.
        -: 4526:  static void OutputJsonTestInfo(::std::ostream* stream,
        -: 4527:                                 const char* test_suite_name,
        -: 4528:                                 const TestInfo& test_info);
        -: 4529:
        -: 4530:  // Prints a JSON representation of a TestSuite object
        -: 4531:  static void PrintJsonTestSuite(::std::ostream* stream,
        -: 4532:                                 const TestSuite& test_suite);
        -: 4533:
        -: 4534:  // Prints a JSON summary of unit_test to output stream out.
        -: 4535:  static void PrintJsonUnitTest(::std::ostream* stream,
        -: 4536:                                const UnitTest& unit_test);
        -: 4537:
        -: 4538:  // Produces a string representing the test properties in a result as
        -: 4539:  // a JSON dictionary.
        -: 4540:  static std::string TestPropertiesAsJson(const TestResult& result,
        -: 4541:                                          const std::string& indent);
        -: 4542:
        -: 4543:  // The output file.
        -: 4544:  const std::string output_file_;
        -: 4545:
        -: 4546:  JsonUnitTestResultPrinter(const JsonUnitTestResultPrinter&) = delete;
        -: 4547:  JsonUnitTestResultPrinter& operator=(const JsonUnitTestResultPrinter&) =
        -: 4548:      delete;
        -: 4549:};
        -: 4550:
        -: 4551:// Creates a new JsonUnitTestResultPrinter.
    #####: 4552:JsonUnitTestResultPrinter::JsonUnitTestResultPrinter(const char* output_file)
    #####: 4553:    : output_file_(output_file) {
    #####: 4554:  if (output_file_.empty()) {
    #####: 4555:    GTEST_LOG_(FATAL) << "JSON output file may not be null";
        -: 4556:  }
    #####: 4557:}
------------------
_ZN7testing8internal25JsonUnitTestResultPrinterC1EPKc:
function _ZN7testing8internal25JsonUnitTestResultPrinterC1EPKc called 0 returned 0% blocks executed 0%
    #####: 4552:JsonUnitTestResultPrinter::JsonUnitTestResultPrinter(const char* output_file)
    #####: 4553:    : output_file_(output_file) {
    %%%%%: 4553-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4553-block  1
call    5 never executed
    $$$$$: 4553-block  2
call    6 never executed
    $$$$$: 4553-block  3
    #####: 4554:  if (output_file_.empty()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4555:    GTEST_LOG_(FATAL) << "JSON output file may not be null";
    %%%%%: 4555-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4555-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4555-block  2
call    7 never executed
    $$$$$: 4555-block  3
call    8 never executed
    $$$$$: 4555-block  4
        -: 4556:  }
    #####: 4557:}
    %%%%%: 4557-block  0
    $$$$$: 4557-block  1
call    0 never executed
    $$$$$: 4557-block  2
call    1 never executed
------------------
_ZN7testing8internal25JsonUnitTestResultPrinterC2EPKc:
function _ZN7testing8internal25JsonUnitTestResultPrinterC2EPKc called 0 returned 0% blocks executed 0%
    #####: 4552:JsonUnitTestResultPrinter::JsonUnitTestResultPrinter(const char* output_file)
    #####: 4553:    : output_file_(output_file) {
    %%%%%: 4553-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4553-block  1
call    5 never executed
    $$$$$: 4553-block  2
call    6 never executed
    $$$$$: 4553-block  3
    #####: 4554:  if (output_file_.empty()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4555:    GTEST_LOG_(FATAL) << "JSON output file may not be null";
    %%%%%: 4555-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4555-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4555-block  2
call    7 never executed
    $$$$$: 4555-block  3
call    8 never executed
    $$$$$: 4555-block  4
        -: 4556:  }
    #####: 4557:}
    %%%%%: 4557-block  0
    $$$$$: 4557-block  1
call    0 never executed
    $$$$$: 4557-block  2
call    1 never executed
------------------
        -: 4558:
function _ZN7testing8internal25JsonUnitTestResultPrinter18OnTestIterationEndERKNS_8UnitTestEi called 0 returned 0% blocks executed 0%
    #####: 4559:void JsonUnitTestResultPrinter::OnTestIterationEnd(const UnitTest& unit_test,
        -: 4560:                                                   int /*iteration*/) {
    #####: 4561:  FILE* jsonout = OpenFileForWriting(output_file_);
    %%%%%: 4561-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4562:  std::stringstream stream;
    %%%%%: 4562-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4563:  PrintJsonUnitTest(&stream, unit_test);
    %%%%%: 4563-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4564:  fprintf(jsonout, "%s", StringStreamToString(&stream).c_str());
    %%%%%: 4564-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4564-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4564-block  2
call    7 never executed
    $$$$$: 4564-block  3
call    8 never executed
    $$$$$: 4564-block  4
    #####: 4565:  fclose(jsonout);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4566:}
    %%%%%: 4566-block  0
call    0 never executed
    $$$$$: 4566-block  1
call    1 never executed
        -: 4567:
        -: 4568:// Returns an JSON-escaped copy of the input string str.
function _ZN7testing8internal25JsonUnitTestResultPrinter10EscapeJsonERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 4569:std::string JsonUnitTestResultPrinter::EscapeJson(const std::string& str) {
    #####: 4570:  Message m;
    %%%%%: 4570-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4571:
    #####: 4572:  for (size_t i = 0; i < str.size(); ++i) {
    %%%%%: 4572-block  0
    %%%%%: 4572-block  1
    %%%%%: 4572-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4573:    const char ch = str[i];
    %%%%%: 4573-block  0
call    0 never executed
    #####: 4574:    switch (ch) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 4575:      case '\\':
        -: 4576:      case '"':
        -: 4577:      case '/':
    #####: 4578:        m << '\\' << ch;
    %%%%%: 4578-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4578-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 4578-block  2
    #####: 4579:        break;
    %%%%%: 4579-block  0
    #####: 4580:      case '\b':
    #####: 4581:        m << "\\b";
    %%%%%: 4581-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4582:        break;
    %%%%%: 4582-block  0
    #####: 4583:      case '\t':
    #####: 4584:        m << "\\t";
    %%%%%: 4584-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4585:        break;
    %%%%%: 4585-block  0
    #####: 4586:      case '\n':
    #####: 4587:        m << "\\n";
    %%%%%: 4587-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4588:        break;
    %%%%%: 4588-block  0
    #####: 4589:      case '\f':
    #####: 4590:        m << "\\f";
    %%%%%: 4590-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4591:        break;
    %%%%%: 4591-block  0
    #####: 4592:      case '\r':
    #####: 4593:        m << "\\r";
    %%%%%: 4593-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4594:        break;
    %%%%%: 4594-block  0
    #####: 4595:      default:
    #####: 4596:        if (ch < ' ') {
    %%%%%: 4596-block  0
branch  0 never executed
branch  1 never executed
    #####: 4597:          m << "\\u00" << String::FormatByte(static_cast<unsigned char>(ch));
    %%%%%: 4597-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4597-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4597-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4597-block  3
call    9 never executed
    $$$$$: 4597-block  4
call   10 never executed
    $$$$$: 4597-block  5
        -: 4598:        } else {
    #####: 4599:          m << ch;
    %%%%%: 4599-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4600:        }
    #####: 4601:        break;
    %%%%%: 4601-block  0
        -: 4602:    }
        -: 4603:  }
        -: 4604:
    #####: 4605:  return m.GetString();
    %%%%%: 4605-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4605-block  1
    #####: 4606:}
    %%%%%: 4606-block  0
call    0 never executed
    $$$$$: 4606-block  1
call    1 never executed
        -: 4607:
        -: 4608:// The following routines generate an JSON representation of a UnitTest
        -: 4609:// object.
        -: 4610:
        -: 4611:// Formats the given time in milliseconds as seconds.
function _ZN7testing8internalL28FormatTimeInMillisAsDurationEx called 0 returned 0% blocks executed 0%
    #####: 4612:static std::string FormatTimeInMillisAsDuration(TimeInMillis ms) {
    #####: 4613:  ::std::stringstream ss;
    %%%%%: 4613-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4614:  ss << (static_cast<double>(ms) * 1e-3) << "s";
    %%%%%: 4614-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4614-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 4615:  return ss.str();
    %%%%%: 4615-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4615-block  1
    #####: 4616:}
    %%%%%: 4616-block  0
call    0 never executed
    $$$$$: 4616-block  1
call    1 never executed
        -: 4617:
        -: 4618:// Converts the given epoch time in milliseconds to a date string in the
        -: 4619:// RFC3339 format, without the timezone information.
function _ZN7testing8internalL32FormatEpochTimeInMillisAsRFC3339Ex called 0 returned 0% blocks executed 0%
    #####: 4620:static std::string FormatEpochTimeInMillisAsRFC3339(TimeInMillis ms) {
        -: 4621:  struct tm time_struct;
    #####: 4622:  if (!PortableLocaltime(static_cast<time_t>(ms / 1000), &time_struct))
    %%%%%: 4622-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4622-block  1
branch  3 never executed
branch  4 never executed
    #####: 4623:    return "";
    %%%%%: 4623-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4623-block  1
call    4 never executed
    $$$$$: 4623-block  2
call    5 never executed
    $$$$$: 4623-block  3
        -: 4624:  // YYYY-MM-DDThh:mm:ss
    #####: 4625:  return StreamableToString(time_struct.tm_year + 1900) + "-" +
    %%%%%: 4625-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4625-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4625-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
    $$$$$: 4625-block  3
call   11 never executed
    $$$$$: 4625-block  4
call   12 never executed
    $$$$$: 4625-block  5
call   13 never executed
    $$$$$: 4625-block  6
    $$$$$: 4625-block  7
    $$$$$: 4625-block  8
    $$$$$: 4625-block  9
    #####: 4626:         String::FormatIntWidth2(time_struct.tm_mon + 1) + "-" +
    %%%%%: 4626-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4626-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4626-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$: 4626-block  3
call   12 never executed
    $$$$$: 4626-block  4
call   13 never executed
    $$$$$: 4626-block  5
call   14 never executed
    $$$$$: 4626-block  6
    $$$$$: 4626-block  7
    $$$$$: 4626-block  8
    #####: 4627:         String::FormatIntWidth2(time_struct.tm_mday) + "T" +
    %%%%%: 4627-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4627-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4627-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$: 4627-block  3
call   12 never executed
    $$$$$: 4627-block  4
call   13 never executed
    $$$$$: 4627-block  5
call   14 never executed
    $$$$$: 4627-block  6
    $$$$$: 4627-block  7
    $$$$$: 4627-block  8
    #####: 4628:         String::FormatIntWidth2(time_struct.tm_hour) + ":" +
    %%%%%: 4628-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4628-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4628-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$: 4628-block  3
call   12 never executed
    $$$$$: 4628-block  4
call   13 never executed
    $$$$$: 4628-block  5
call   14 never executed
    $$$$$: 4628-block  6
    $$$$$: 4628-block  7
    $$$$$: 4628-block  8
    #####: 4629:         String::FormatIntWidth2(time_struct.tm_min) + ":" +
    %%%%%: 4629-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4629-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4629-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4629-block  3
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$: 4629-block  4
call   12 never executed
    $$$$$: 4629-block  5
call   13 never executed
    $$$$$: 4629-block  6
call   14 never executed
    $$$$$: 4629-block  7
    $$$$$: 4629-block  8
    $$$$$: 4629-block  9
    #####: 4630:         String::FormatIntWidth2(time_struct.tm_sec) + "Z";
    %%%%%: 4630-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4630-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
    $$$$$: 4630-block  2
call    8 never executed
    $$$$$: 4630-block  3
        -: 4631:}
        -: 4632:
function _ZN7testing8internalL6IndentEm called 0 returned 0% blocks executed 0%
    #####: 4633:static inline std::string Indent(size_t width) {
    #####: 4634:  return std::string(width, ' ');
    %%%%%: 4634-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4634-block  1
call    4 never executed
    %%%%%: 4634-block  2
    $$$$$: 4634-block  3
call    5 never executed
        -: 4635:}
        -: 4636:
function _ZN7testing8internal25JsonUnitTestResultPrinter13OutputJsonKeyEPSoRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_SA_SA_b called 0 returned 0% blocks executed 0%
    #####: 4637:void JsonUnitTestResultPrinter::OutputJsonKey(std::ostream* stream,
        -: 4638:                                              const std::string& element_name,
        -: 4639:                                              const std::string& name,
        -: 4640:                                              const std::string& value,
        -: 4641:                                              const std::string& indent,
        -: 4642:                                              bool comma) {
        -: 4643:  const std::vector<std::string>& allowed_names =
    #####: 4644:      GetReservedOutputAttributesForElement(element_name);
    %%%%%: 4644-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4645:
    #####: 4646:  GTEST_CHECK_(std::find(allowed_names.begin(), allowed_names.end(), name) !=
    %%%%%: 4646-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4646-block  1
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4646-block  2
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4646-block  3
call   13 never executed
    %%%%%: 4646-block  4
call   14 never executed
    $$$$$: 4646-block  5
    $$$$$: 4646-block  6
call   15 never executed
    $$$$$: 4646-block  7
        -: 4647:               allowed_names.end())
        -: 4648:      << "Key \"" << name << "\" is not allowed for value \"" << element_name
    #####: 4649:      << "\".";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4649-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4649-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4649-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4649-block  3
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4649-block  4
call   15 never executed
branch 16 never executed
branch 17 never executed
        -: 4650:
    #####: 4651:  *stream << indent << "\"" << name << "\": \"" << EscapeJson(value) << "\"";
    %%%%%: 4651-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4651-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4651-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4651-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4651-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4651-block  5
call   15 never executed
branch 16 never executed
branch 17 never executed
    %%%%%: 4651-block  6
call   18 never executed
branch 19 never executed
branch 20 never executed
    %%%%%: 4651-block  7
call   21 never executed
    $$$$$: 4651-block  8
call   22 never executed
    $$$$$: 4651-block  9
    #####: 4652:  if (comma) *stream << ",\n";
branch  0 never executed
branch  1 never executed
    %%%%%: 4652-block  0
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 4653:}
    %%%%%: 4653-block  0
call    0 never executed
    $$$$$: 4653-block  1
call    1 never executed
        -: 4654:
function _ZN7testing8internal25JsonUnitTestResultPrinter13OutputJsonKeyEPSoRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_iSA_b called 0 returned 0% blocks executed 0%
    #####: 4655:void JsonUnitTestResultPrinter::OutputJsonKey(
        -: 4656:    std::ostream* stream, const std::string& element_name,
        -: 4657:    const std::string& name, int value, const std::string& indent, bool comma) {
        -: 4658:  const std::vector<std::string>& allowed_names =
    #####: 4659:      GetReservedOutputAttributesForElement(element_name);
    %%%%%: 4659-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4660:
    #####: 4661:  GTEST_CHECK_(std::find(allowed_names.begin(), allowed_names.end(), name) !=
    %%%%%: 4661-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4661-block  1
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4661-block  2
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4661-block  3
call   13 never executed
    %%%%%: 4661-block  4
call   14 never executed
    $$$$$: 4661-block  5
    $$$$$: 4661-block  6
call   15 never executed
    $$$$$: 4661-block  7
        -: 4662:               allowed_names.end())
        -: 4663:      << "Key \"" << name << "\" is not allowed for value \"" << element_name
    #####: 4664:      << "\".";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4664-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4664-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4664-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4664-block  3
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4664-block  4
call   15 never executed
branch 16 never executed
branch 17 never executed
        -: 4665:
    #####: 4666:  *stream << indent << "\"" << name << "\": " << StreamableToString(value);
    %%%%%: 4666-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4666-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4666-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4666-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4666-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4666-block  5
call   15 never executed
branch 16 never executed
branch 17 never executed
    %%%%%: 4666-block  6
call   18 never executed
    $$$$$: 4666-block  7
call   19 never executed
    $$$$$: 4666-block  8
    #####: 4667:  if (comma) *stream << ",\n";
branch  0 never executed
branch  1 never executed
    %%%%%: 4667-block  0
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 4668:}
    %%%%%: 4668-block  0
call    0 never executed
    $$$$$: 4668-block  1
call    1 never executed
        -: 4669:
        -: 4670:// Streams a test suite JSON stanza containing the given test result.
function _ZN7testing8internal25JsonUnitTestResultPrinter32OutputJsonTestSuiteForTestResultEPSoRKNS_10TestResultE called 0 returned 0% blocks executed 0%
    #####: 4671:void JsonUnitTestResultPrinter::OutputJsonTestSuiteForTestResult(
        -: 4672:    ::std::ostream* stream, const TestResult& result) {
        -: 4673:  // Output the boilerplate for a new test suite.
    #####: 4674:  *stream << Indent(4) << "{\n";
    %%%%%: 4674-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4674-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4674-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4674-block  3
call    9 never executed
    $$$$$: 4674-block  4
call   10 never executed
    $$$$$: 4674-block  5
call   11 never executed
    #####: 4675:  OutputJsonKey(stream, "testsuite", "name", "NonTestSuiteFailure", Indent(6));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4675-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4675-block  1
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4675-block  2
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4675-block  3
call   15 never executed
branch 16 never executed
branch 17 never executed
    %%%%%: 4675-block  4
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
    $$$$$: 4675-block  5
call   25 never executed
    $$$$$: 4675-block  6
    $$$$$: 4675-block  7
call   26 never executed
    $$$$$: 4675-block  8
call   27 never executed
    $$$$$: 4675-block  9
    $$$$$: 4675-block 10
    $$$$$: 4675-block 11
call   28 never executed
    $$$$$: 4675-block 12
call   29 never executed
    $$$$$: 4675-block 13
    $$$$$: 4675-block 14
    $$$$$: 4675-block 15
call   30 never executed
    $$$$$: 4675-block 16
call   31 never executed
    $$$$$: 4675-block 17
    $$$$$: 4675-block 18
call   32 never executed
    #####: 4676:  OutputJsonKey(stream, "testsuite", "tests", 1, Indent(6));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4676-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4676-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4676-block  2
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 4676-block  3
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
    $$$$$: 4676-block  4
call   19 never executed
    $$$$$: 4676-block  5
    $$$$$: 4676-block  6
call   20 never executed
    $$$$$: 4676-block  7
call   21 never executed
    $$$$$: 4676-block  8
    $$$$$: 4676-block  9
    $$$$$: 4676-block 10
call   22 never executed
    $$$$$: 4676-block 11
call   23 never executed
    $$$$$: 4676-block 12
    $$$$$: 4676-block 13
call   24 never executed
    #####: 4677:  if (!GTEST_FLAG_GET(list_tests)) {
branch  0 never executed
branch  1 never executed
    #####: 4678:    OutputJsonKey(stream, "testsuite", "failures", 1, Indent(6));
    %%%%%: 4678-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4678-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4678-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4678-block  3
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 4678-block  4
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
    $$$$$: 4678-block  5
call   19 never executed
    $$$$$: 4678-block  6
    $$$$$: 4678-block  7
call   20 never executed
    $$$$$: 4678-block  8
call   21 never executed
    $$$$$: 4678-block  9
    $$$$$: 4678-block 10
    $$$$$: 4678-block 11
call   22 never executed
    $$$$$: 4678-block 12
call   23 never executed
    $$$$$: 4678-block 13
    $$$$$: 4678-block 14
call   24 never executed
    #####: 4679:    OutputJsonKey(stream, "testsuite", "disabled", 0, Indent(6));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4679-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4679-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4679-block  2
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 4679-block  3
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
    $$$$$: 4679-block  4
call   19 never executed
    $$$$$: 4679-block  5
    $$$$$: 4679-block  6
call   20 never executed
    $$$$$: 4679-block  7
call   21 never executed
    $$$$$: 4679-block  8
    $$$$$: 4679-block  9
    $$$$$: 4679-block 10
call   22 never executed
    $$$$$: 4679-block 11
call   23 never executed
    $$$$$: 4679-block 12
    $$$$$: 4679-block 13
call   24 never executed
    #####: 4680:    OutputJsonKey(stream, "testsuite", "skipped", 0, Indent(6));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4680-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4680-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4680-block  2
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 4680-block  3
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
    $$$$$: 4680-block  4
call   19 never executed
    $$$$$: 4680-block  5
    $$$$$: 4680-block  6
call   20 never executed
    $$$$$: 4680-block  7
call   21 never executed
    $$$$$: 4680-block  8
    $$$$$: 4680-block  9
    $$$$$: 4680-block 10
call   22 never executed
    $$$$$: 4680-block 11
call   23 never executed
    $$$$$: 4680-block 12
    $$$$$: 4680-block 13
call   24 never executed
    #####: 4681:    OutputJsonKey(stream, "testsuite", "errors", 0, Indent(6));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4681-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4681-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4681-block  2
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 4681-block  3
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
    $$$$$: 4681-block  4
call   19 never executed
    $$$$$: 4681-block  5
    $$$$$: 4681-block  6
call   20 never executed
    $$$$$: 4681-block  7
call   21 never executed
    $$$$$: 4681-block  8
    $$$$$: 4681-block  9
    $$$$$: 4681-block 10
call   22 never executed
    $$$$$: 4681-block 11
call   23 never executed
    $$$$$: 4681-block 12
    $$$$$: 4681-block 13
call   24 never executed
    #####: 4682:    OutputJsonKey(stream, "testsuite", "time",
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4682-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4682-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
    $$$$$: 4682-block  2
call   14 never executed
    $$$$$: 4682-block  3
call   15 never executed
    $$$$$: 4682-block  4
    $$$$$: 4682-block  5
    $$$$$: 4682-block  6
call   16 never executed
    $$$$$: 4682-block  7
call   17 never executed
    $$$$$: 4682-block  8
    $$$$$: 4682-block  9
call   18 never executed
    #####: 4683:                  FormatTimeInMillisAsDuration(result.elapsed_time()),
    %%%%%: 4683-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4683-block  1
call    5 never executed
    $$$$$: 4683-block  2
    #####: 4684:                  Indent(6));
    %%%%%: 4684-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4684-block  1
call    3 never executed
call    4 never executed
    $$$$$: 4684-block  2
call    5 never executed
    $$$$$: 4684-block  3
    #####: 4685:    OutputJsonKey(stream, "testsuite", "timestamp",
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4685-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4685-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
    $$$$$: 4685-block  2
call   14 never executed
    $$$$$: 4685-block  3
call   15 never executed
    $$$$$: 4685-block  4
    $$$$$: 4685-block  5
    $$$$$: 4685-block  6
call   16 never executed
    $$$$$: 4685-block  7
call   17 never executed
    $$$$$: 4685-block  8
    $$$$$: 4685-block  9
call   18 never executed
    #####: 4686:                  FormatEpochTimeInMillisAsRFC3339(result.start_timestamp()),
    %%%%%: 4686-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4686-block  1
call    5 never executed
    $$$$$: 4686-block  2
    #####: 4687:                  Indent(6));
    %%%%%: 4687-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4687-block  1
call    3 never executed
call    4 never executed
    $$$$$: 4687-block  2
call    5 never executed
    $$$$$: 4687-block  3
        -: 4688:  }
    #####: 4689:  *stream << Indent(6) << "\"testsuite\": [\n";
    %%%%%: 4689-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4689-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4689-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4689-block  3
call    9 never executed
    $$$$$: 4689-block  4
call   10 never executed
    $$$$$: 4689-block  5
call   11 never executed
        -: 4690:
        -: 4691:  // Output the boilerplate for a new test case.
    #####: 4692:  *stream << Indent(8) << "{\n";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4692-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4692-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4692-block  2
call    9 never executed
    $$$$$: 4692-block  3
call   10 never executed
    $$$$$: 4692-block  4
call   11 never executed
    #####: 4693:  OutputJsonKey(stream, "testcase", "name", "", Indent(10));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4693-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4693-block  1
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4693-block  2
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4693-block  3
call   15 never executed
branch 16 never executed
branch 17 never executed
    %%%%%: 4693-block  4
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
    $$$$$: 4693-block  5
call   25 never executed
    $$$$$: 4693-block  6
    $$$$$: 4693-block  7
call   26 never executed
    $$$$$: 4693-block  8
call   27 never executed
    $$$$$: 4693-block  9
    $$$$$: 4693-block 10
    $$$$$: 4693-block 11
call   28 never executed
    $$$$$: 4693-block 12
call   29 never executed
    $$$$$: 4693-block 13
    $$$$$: 4693-block 14
    $$$$$: 4693-block 15
call   30 never executed
    $$$$$: 4693-block 16
call   31 never executed
    $$$$$: 4693-block 17
    $$$$$: 4693-block 18
call   32 never executed
    #####: 4694:  OutputJsonKey(stream, "testcase", "status", "RUN", Indent(10));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4694-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4694-block  1
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4694-block  2
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4694-block  3
call   15 never executed
branch 16 never executed
branch 17 never executed
    %%%%%: 4694-block  4
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
    $$$$$: 4694-block  5
call   25 never executed
    $$$$$: 4694-block  6
    $$$$$: 4694-block  7
call   26 never executed
    $$$$$: 4694-block  8
call   27 never executed
    $$$$$: 4694-block  9
    $$$$$: 4694-block 10
    $$$$$: 4694-block 11
call   28 never executed
    $$$$$: 4694-block 12
call   29 never executed
    $$$$$: 4694-block 13
    $$$$$: 4694-block 14
    $$$$$: 4694-block 15
call   30 never executed
    $$$$$: 4694-block 16
call   31 never executed
    $$$$$: 4694-block 17
    $$$$$: 4694-block 18
call   32 never executed
    #####: 4695:  OutputJsonKey(stream, "testcase", "result", "COMPLETED", Indent(10));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4695-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4695-block  1
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4695-block  2
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4695-block  3
call   15 never executed
branch 16 never executed
branch 17 never executed
    %%%%%: 4695-block  4
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
    $$$$$: 4695-block  5
call   25 never executed
    $$$$$: 4695-block  6
    $$$$$: 4695-block  7
call   26 never executed
    $$$$$: 4695-block  8
call   27 never executed
    $$$$$: 4695-block  9
    $$$$$: 4695-block 10
    $$$$$: 4695-block 11
call   28 never executed
    $$$$$: 4695-block 12
call   29 never executed
    $$$$$: 4695-block 13
    $$$$$: 4695-block 14
    $$$$$: 4695-block 15
call   30 never executed
    $$$$$: 4695-block 16
call   31 never executed
    $$$$$: 4695-block 17
    $$$$$: 4695-block 18
call   32 never executed
    #####: 4696:  OutputJsonKey(stream, "testcase", "timestamp",
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4696-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4696-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
    $$$$$: 4696-block  2
call   14 never executed
    $$$$$: 4696-block  3
call   15 never executed
    $$$$$: 4696-block  4
    $$$$$: 4696-block  5
    $$$$$: 4696-block  6
call   16 never executed
    $$$$$: 4696-block  7
call   17 never executed
    $$$$$: 4696-block  8
    $$$$$: 4696-block  9
call   18 never executed
    #####: 4697:                FormatEpochTimeInMillisAsRFC3339(result.start_timestamp()),
    %%%%%: 4697-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4697-block  1
call    5 never executed
    $$$$$: 4697-block  2
    #####: 4698:                Indent(10));
    %%%%%: 4698-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4698-block  1
call    3 never executed
call    4 never executed
    $$$$$: 4698-block  2
call    5 never executed
    $$$$$: 4698-block  3
    #####: 4699:  OutputJsonKey(stream, "testcase", "time",
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4699-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4699-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
    $$$$$: 4699-block  2
call   14 never executed
    $$$$$: 4699-block  3
call   15 never executed
    $$$$$: 4699-block  4
    $$$$$: 4699-block  5
    $$$$$: 4699-block  6
call   16 never executed
    $$$$$: 4699-block  7
call   17 never executed
    $$$$$: 4699-block  8
    $$$$$: 4699-block  9
call   18 never executed
    #####: 4700:                FormatTimeInMillisAsDuration(result.elapsed_time()),
    %%%%%: 4700-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4700-block  1
call    5 never executed
    $$$$$: 4700-block  2
    #####: 4701:                Indent(10));
    %%%%%: 4701-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4701-block  1
call    3 never executed
call    4 never executed
    $$$$$: 4701-block  2
call    5 never executed
    $$$$$: 4701-block  3
    #####: 4702:  OutputJsonKey(stream, "testcase", "classname", "", Indent(10), false);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4702-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4702-block  1
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4702-block  2
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4702-block  3
call   15 never executed
branch 16 never executed
branch 17 never executed
    %%%%%: 4702-block  4
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
    $$$$$: 4702-block  5
call   25 never executed
    $$$$$: 4702-block  6
    $$$$$: 4702-block  7
call   26 never executed
    $$$$$: 4702-block  8
call   27 never executed
    $$$$$: 4702-block  9
    $$$$$: 4702-block 10
    $$$$$: 4702-block 11
call   28 never executed
    $$$$$: 4702-block 12
call   29 never executed
    $$$$$: 4702-block 13
    $$$$$: 4702-block 14
    $$$$$: 4702-block 15
call   30 never executed
    $$$$$: 4702-block 16
call   31 never executed
    $$$$$: 4702-block 17
    $$$$$: 4702-block 18
call   32 never executed
    #####: 4703:  *stream << TestPropertiesAsJson(result, Indent(10));
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4703-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4703-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4703-block  2
call    9 never executed
call   10 never executed
    $$$$$: 4703-block  3
call   11 never executed
    $$$$$: 4703-block  4
call   12 never executed
    $$$$$: 4703-block  5
    $$$$$: 4703-block  6
call   13 never executed
        -: 4704:
        -: 4705:  // Output the actual test result.
    #####: 4706:  OutputJsonTestResult(stream, result);
call    0 never executed
        -: 4707:
        -: 4708:  // Finish the test suite.
    #####: 4709:  *stream << "\n" << Indent(6) << "]\n" << Indent(4) << "}";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4709-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4709-block  1
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4709-block  2
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4709-block  3
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%: 4709-block  4
call   16 never executed
branch 17 never executed
branch 18 never executed
    %%%%%: 4709-block  5
call   19 never executed
call   20 never executed
    $$$$$: 4709-block  6
call   21 never executed
    $$$$$: 4709-block  7
    $$$$$: 4709-block  8
call   22 never executed
    #####: 4710:}
        -: 4711:
        -: 4712:// Prints a JSON representation of a TestInfo object.
function _ZN7testing8internal25JsonUnitTestResultPrinter18OutputJsonTestInfoEPSoPKcRKNS_8TestInfoE called 0 returned 0% blocks executed 0%
    #####: 4713:void JsonUnitTestResultPrinter::OutputJsonTestInfo(::std::ostream* stream,
        -: 4714:                                                   const char* test_suite_name,
        -: 4715:                                                   const TestInfo& test_info) {
    #####: 4716:  const TestResult& result = *test_info.result();
    %%%%%: 4716-block  0
call    0 never executed
    #####: 4717:  const std::string kTestsuite = "testcase";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4717-block  0
call    4 never executed
    $$$$$: 4717-block  1
call    5 never executed
    $$$$$: 4717-block  2
    #####: 4718:  const std::string kIndent = Indent(10);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4719:
    #####: 4720:  *stream << Indent(8) << "{\n";
    %%%%%: 4720-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4720-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4720-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4720-block  3
call    9 never executed
    $$$$$: 4720-block  4
call   10 never executed
    $$$$$: 4720-block  5
    #####: 4721:  OutputJsonKey(stream, kTestsuite, "name", test_info.name(), kIndent);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4721-block  0
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4721-block  1
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4721-block  2
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    $$$$$: 4721-block  3
call   16 never executed
    $$$$$: 4721-block  4
call   17 never executed
    $$$$$: 4721-block  5
    $$$$$: 4721-block  6
    $$$$$: 4721-block  7
call   18 never executed
    $$$$$: 4721-block  8
call   19 never executed
    $$$$$: 4721-block  9
    $$$$$: 4721-block 10
        -: 4722:
    #####: 4723:  if (test_info.value_param() != nullptr) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4724:    OutputJsonKey(stream, kTestsuite, "value_param", test_info.value_param(),
    %%%%%: 4724-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4724-block  1
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4724-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4724-block  3
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    $$$$$: 4724-block  4
call   16 never executed
    $$$$$: 4724-block  5
call   17 never executed
    $$$$$: 4724-block  6
    $$$$$: 4724-block  7
    $$$$$: 4724-block  8
call   18 never executed
    $$$$$: 4724-block  9
call   19 never executed
    $$$$$: 4724-block 10
    $$$$$: 4724-block 11
        -: 4725:                  kIndent);
        -: 4726:  }
    #####: 4727:  if (test_info.type_param() != nullptr) {
    %%%%%: 4727-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4728:    OutputJsonKey(stream, kTestsuite, "type_param", test_info.type_param(),
    %%%%%: 4728-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4728-block  1
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4728-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4728-block  3
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    $$$$$: 4728-block  4
call   16 never executed
    $$$$$: 4728-block  5
call   17 never executed
    $$$$$: 4728-block  6
    $$$$$: 4728-block  7
    $$$$$: 4728-block  8
call   18 never executed
    $$$$$: 4728-block  9
call   19 never executed
    $$$$$: 4728-block 10
    $$$$$: 4728-block 11
        -: 4729:                  kIndent);
        -: 4730:  }
        -: 4731:
    #####: 4732:  OutputJsonKey(stream, kTestsuite, "file", test_info.file(), kIndent);
    %%%%%: 4732-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4732-block  1
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4732-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4732-block  3
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    $$$$$: 4732-block  4
call   16 never executed
    $$$$$: 4732-block  5
call   17 never executed
    $$$$$: 4732-block  6
    $$$$$: 4732-block  7
    $$$$$: 4732-block  8
call   18 never executed
    $$$$$: 4732-block  9
call   19 never executed
    $$$$$: 4732-block 10
    $$$$$: 4732-block 11
    #####: 4733:  OutputJsonKey(stream, kTestsuite, "line", test_info.line(), kIndent, false);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4733-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4733-block  1
call    8 never executed
call    9 never executed
    $$$$$: 4733-block  2
call   10 never executed
    $$$$$: 4733-block  3
call   11 never executed
    $$$$$: 4733-block  4
    $$$$$: 4733-block  5
    #####: 4734:  if (GTEST_FLAG_GET(list_tests)) {
branch  0 never executed
branch  1 never executed
    #####: 4735:    *stream << "\n" << Indent(8) << "}";
    %%%%%: 4735-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4735-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4735-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4735-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4735-block  4
call   12 never executed
    $$$$$: 4735-block  5
call   13 never executed
    $$$$$: 4735-block  6
    #####: 4736:    return;
        -: 4737:  } else {
    #####: 4738:    *stream << ",\n";
    %%%%%: 4738-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4739:  }
        -: 4740:
    #####: 4741:  OutputJsonKey(stream, kTestsuite, "status",
    %%%%%: 4741-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4741-block  1
    %%%%%: 4741-block  2
    %%%%%: 4741-block  3
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4741-block  4
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4741-block  5
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
    $$$$$: 4741-block  6
call   17 never executed
    $$$$$: 4741-block  7
call   18 never executed
    $$$$$: 4741-block  8
    $$$$$: 4741-block  9
    $$$$$: 4741-block 10
call   19 never executed
    $$$$$: 4741-block 11
call   20 never executed
    $$$$$: 4741-block 12
    $$$$$: 4741-block 13
    #####: 4742:                test_info.should_run() ? "RUN" : "NOTRUN", kIndent);
    %%%%%: 4742-block  0
call    0 never executed
    #####: 4743:  OutputJsonKey(stream, kTestsuite, "result",
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4743-block  0
    %%%%%: 4743-block  1
    %%%%%: 4743-block  2
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4743-block  3
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4743-block  4
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
    $$$$$: 4743-block  5
call   17 never executed
    $$$$$: 4743-block  6
call   18 never executed
    $$$$$: 4743-block  7
    $$$$$: 4743-block  8
    $$$$$: 4743-block  9
call   19 never executed
    $$$$$: 4743-block 10
call   20 never executed
    $$$$$: 4743-block 11
    $$$$$: 4743-block 12
    #####: 4744:                test_info.should_run()
    %%%%%: 4744-block  0
call    0 never executed
    #####: 4745:                    ? (result.Skipped() ? "SKIPPED" : "COMPLETED")
    %%%%%: 4745-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4745-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 4745-block  2
    %%%%%: 4745-block  3
        -: 4746:                    : "SUPPRESSED",
        -: 4747:                kIndent);
    #####: 4748:  OutputJsonKey(stream, kTestsuite, "timestamp",
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4748-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
    $$$$$: 4748-block  1
call    8 never executed
    $$$$$: 4748-block  2
call    9 never executed
    $$$$$: 4748-block  3
    $$$$$: 4748-block  4
    #####: 4749:                FormatEpochTimeInMillisAsRFC3339(result.start_timestamp()),
    %%%%%: 4749-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4749-block  1
call    4 never executed
call    5 never executed
    $$$$$: 4749-block  2
call    6 never executed
    $$$$$: 4749-block  3
        -: 4750:                kIndent);
    #####: 4751:  OutputJsonKey(stream, kTestsuite, "time",
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4751-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
    $$$$$: 4751-block  1
call    8 never executed
    $$$$$: 4751-block  2
call    9 never executed
    $$$$$: 4751-block  3
    $$$$$: 4751-block  4
    #####: 4752:                FormatTimeInMillisAsDuration(result.elapsed_time()), kIndent);
    %%%%%: 4752-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4752-block  1
call    4 never executed
call    5 never executed
    $$$$$: 4752-block  2
call    6 never executed
    $$$$$: 4752-block  3
    #####: 4753:  OutputJsonKey(stream, kTestsuite, "classname", test_suite_name, kIndent,
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4753-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4753-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4753-block  2
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4753-block  3
call   15 never executed
    $$$$$: 4753-block  4
call   16 never executed
    $$$$$: 4753-block  5
    $$$$$: 4753-block  6
    $$$$$: 4753-block  7
call   17 never executed
    $$$$$: 4753-block  8
call   18 never executed
    $$$$$: 4753-block  9
    $$$$$: 4753-block 10
        -: 4754:                false);
    #####: 4755:  *stream << TestPropertiesAsJson(result, kIndent);
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4755-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4755-block  1
call    6 never executed
    $$$$$: 4755-block  2
call    7 never executed
    $$$$$: 4755-block  3
        -: 4756:
    #####: 4757:  OutputJsonTestResult(stream, result);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4758:}
    %%%%%: 4758-block  0
    %%%%%: 4758-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4758-block  2
    %%%%%: 4758-block  3
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 4758-block  4
call    6 never executed
    $$$$$: 4758-block  5
call    7 never executed
        -: 4759:
function _ZN7testing8internal25JsonUnitTestResultPrinter20OutputJsonTestResultEPSoRKNS_10TestResultE called 0 returned 0% blocks executed 0%
    #####: 4760:void JsonUnitTestResultPrinter::OutputJsonTestResult(::std::ostream* stream,
        -: 4761:                                                     const TestResult& result) {
    #####: 4762:  const std::string kIndent = Indent(10);
    %%%%%: 4762-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4763:
        -: 4764:  {
    #####: 4765:    int failures = 0;
    #####: 4766:    for (int i = 0; i < result.total_part_count(); ++i) {
    %%%%%: 4766-block  0
    %%%%%: 4766-block  1
    %%%%%: 4766-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4767:      const TestPartResult& part = result.GetTestPartResult(i);
    %%%%%: 4767-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4768:      if (part.failed()) {
    %%%%%: 4768-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4769:        *stream << ",\n";
    %%%%%: 4769-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4770:        if (++failures == 1) {
    %%%%%: 4770-block  0
branch  0 never executed
branch  1 never executed
    #####: 4771:          *stream << kIndent << "\"" << "failures" << "\": [\n";
    %%%%%: 4771-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4771-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4771-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4771-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
        -: 4772:        }
        -: 4773:        const std::string location =
        -: 4774:            internal::FormatCompilerIndependentFileLocation(part.file_name(),
    #####: 4775:                                                            part.line_number());
    %%%%%: 4775-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -: 4776:        const std::string message =
    #####: 4777:            EscapeJson(location + "\n" + part.message());
    %%%%%: 4777-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4777-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4777-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4777-block  3
call   10 never executed
call   11 never executed
    $$$$$: 4777-block  4
call   12 never executed
    $$$$$: 4777-block  5
call   13 never executed
    $$$$$: 4777-block  6
    $$$$$: 4777-block  7
        -: 4778:        *stream << kIndent << "  {\n"
        -: 4779:                << kIndent << "    \"failure\": \"" << message << "\",\n"
        -: 4780:                << kIndent << "    \"type\": \"\"\n"
    #####: 4781:                << kIndent << "  }";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4781-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4781-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4781-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4781-block  3
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4781-block  4
call   15 never executed
branch 16 never executed
branch 17 never executed
    %%%%%: 4781-block  5
call   18 never executed
branch 19 never executed
branch 20 never executed
    %%%%%: 4781-block  6
call   21 never executed
branch 22 never executed
branch 23 never executed
    %%%%%: 4781-block  7
call   24 never executed
branch 25 never executed
branch 26 never executed
    %%%%%: 4781-block  8
call   27 never executed
branch 28 never executed
branch 29 never executed
    #####: 4782:      }
    %%%%%: 4782-block  0
call    0 never executed
call    1 never executed
    $$$$$: 4782-block  1
call    2 never executed
    $$$$$: 4782-block  2
call    3 never executed
        -: 4783:    }
        -: 4784:
    #####: 4785:    if (failures > 0) *stream << "\n" << kIndent << "]";
    %%%%%: 4785-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 4785-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4785-block  2
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4785-block  3
call    8 never executed
branch  9 never executed
branch 10 never executed
        -: 4786:  }
        -: 4787:
        -: 4788:  {
    #####: 4789:    int skipped = 0;
    #####: 4790:    for (int i = 0; i < result.total_part_count(); ++i) {
    %%%%%: 4790-block  0
    %%%%%: 4790-block  1
    %%%%%: 4790-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4791:      const TestPartResult& part = result.GetTestPartResult(i);
    %%%%%: 4791-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4792:      if (part.skipped()) {
    %%%%%: 4792-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4793:        *stream << ",\n";
    %%%%%: 4793-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4794:        if (++skipped == 1) {
    %%%%%: 4794-block  0
branch  0 never executed
branch  1 never executed
    #####: 4795:          *stream << kIndent << "\"" << "skipped" << "\": [\n";
    %%%%%: 4795-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4795-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4795-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4795-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
        -: 4796:        }
        -: 4797:        const std::string location =
        -: 4798:            internal::FormatCompilerIndependentFileLocation(part.file_name(),
    #####: 4799:                                                            part.line_number());
    %%%%%: 4799-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -: 4800:        const std::string message =
    #####: 4801:            EscapeJson(location + "\n" + part.message());
    %%%%%: 4801-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4801-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4801-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4801-block  3
call   10 never executed
call   11 never executed
    $$$$$: 4801-block  4
call   12 never executed
    $$$$$: 4801-block  5
call   13 never executed
    $$$$$: 4801-block  6
    $$$$$: 4801-block  7
        -: 4802:        *stream << kIndent << "  {\n"
        -: 4803:                << kIndent << "    \"message\": \"" << message << "\"\n"
    #####: 4804:                << kIndent << "  }";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4804-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4804-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4804-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4804-block  3
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4804-block  4
call   15 never executed
branch 16 never executed
branch 17 never executed
    %%%%%: 4804-block  5
call   18 never executed
branch 19 never executed
branch 20 never executed
    %%%%%: 4804-block  6
call   21 never executed
branch 22 never executed
branch 23 never executed
    #####: 4805:      }
    %%%%%: 4805-block  0
call    0 never executed
call    1 never executed
    $$$$$: 4805-block  1
call    2 never executed
    $$$$$: 4805-block  2
call    3 never executed
        -: 4806:    }
        -: 4807:
    #####: 4808:    if (skipped > 0) *stream << "\n" << kIndent << "]";
    %%%%%: 4808-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 4808-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4808-block  2
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4808-block  3
call    8 never executed
branch  9 never executed
branch 10 never executed
        -: 4809:  }
        -: 4810:
    #####: 4811:  *stream << "\n" << Indent(8) << "}";
    %%%%%: 4811-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4811-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4811-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4811-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4811-block  4
call   12 never executed
    $$$$$: 4811-block  5
call   13 never executed
    $$$$$: 4811-block  6
    #####: 4812:}
call    0 never executed
    $$$$$: 4812-block  0
call    1 never executed
        -: 4813:
        -: 4814:// Prints an JSON representation of a TestSuite object
function _ZN7testing8internal25JsonUnitTestResultPrinter18PrintJsonTestSuiteEPSoRKNS_9TestSuiteE called 0 returned 0% blocks executed 0%
    #####: 4815:void JsonUnitTestResultPrinter::PrintJsonTestSuite(
        -: 4816:    std::ostream* stream, const TestSuite& test_suite) {
    #####: 4817:  const std::string kTestsuite = "testsuite";
    %%%%%: 4817-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4817-block  1
call    4 never executed
    $$$$$: 4817-block  2
call    5 never executed
    $$$$$: 4817-block  3
    #####: 4818:  const std::string kIndent = Indent(6);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4819:
    #####: 4820:  *stream << Indent(4) << "{\n";
    %%%%%: 4820-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4820-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4820-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4820-block  3
call    9 never executed
    $$$$$: 4820-block  4
call   10 never executed
    $$$$$: 4820-block  5
    #####: 4821:  OutputJsonKey(stream, kTestsuite, "name", test_suite.name(), kIndent);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4821-block  0
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4821-block  1
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4821-block  2
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    $$$$$: 4821-block  3
call   16 never executed
    $$$$$: 4821-block  4
call   17 never executed
    $$$$$: 4821-block  5
    $$$$$: 4821-block  6
    $$$$$: 4821-block  7
call   18 never executed
    $$$$$: 4821-block  8
call   19 never executed
    $$$$$: 4821-block  9
    $$$$$: 4821-block 10
    #####: 4822:  OutputJsonKey(stream, kTestsuite, "tests", test_suite.reportable_test_count(),
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4822-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4822-block  1
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4822-block  2
call   10 never executed
call   11 never executed
    $$$$$: 4822-block  3
call   12 never executed
    $$$$$: 4822-block  4
call   13 never executed
    $$$$$: 4822-block  5
    $$$$$: 4822-block  6
        -: 4823:                kIndent);
    #####: 4824:  if (!GTEST_FLAG_GET(list_tests)) {
branch  0 never executed
branch  1 never executed
    #####: 4825:    OutputJsonKey(stream, kTestsuite, "failures",
    %%%%%: 4825-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4825-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4825-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4825-block  3
call   10 never executed
call   11 never executed
    $$$$$: 4825-block  4
call   12 never executed
    $$$$$: 4825-block  5
call   13 never executed
    $$$$$: 4825-block  6
    $$$$$: 4825-block  7
        -: 4826:                  test_suite.failed_test_count(), kIndent);
    #####: 4827:    OutputJsonKey(stream, kTestsuite, "disabled",
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4827-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4827-block  1
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4827-block  2
call   10 never executed
call   11 never executed
    $$$$$: 4827-block  3
call   12 never executed
    $$$$$: 4827-block  4
call   13 never executed
    $$$$$: 4827-block  5
    $$$$$: 4827-block  6
        -: 4828:                  test_suite.reportable_disabled_test_count(), kIndent);
    #####: 4829:    OutputJsonKey(stream, kTestsuite, "errors", 0, kIndent);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4829-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4829-block  1
call    7 never executed
call    8 never executed
    $$$$$: 4829-block  2
call    9 never executed
    $$$$$: 4829-block  3
call   10 never executed
    $$$$$: 4829-block  4
    $$$$$: 4829-block  5
    #####: 4830:    OutputJsonKey(
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4830-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
    $$$$$: 4830-block  1
call    8 never executed
    $$$$$: 4830-block  2
call    9 never executed
    $$$$$: 4830-block  3
    $$$$$: 4830-block  4
        -: 4831:        stream, kTestsuite, "timestamp",
    #####: 4832:        FormatEpochTimeInMillisAsRFC3339(test_suite.start_timestamp()),
    %%%%%: 4832-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4832-block  1
call    4 never executed
call    5 never executed
    $$$$$: 4832-block  2
call    6 never executed
    $$$$$: 4832-block  3
        -: 4833:        kIndent);
    #####: 4834:    OutputJsonKey(stream, kTestsuite, "time",
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4834-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
    $$$$$: 4834-block  1
call    8 never executed
    $$$$$: 4834-block  2
call    9 never executed
    $$$$$: 4834-block  3
    $$$$$: 4834-block  4
    #####: 4835:                  FormatTimeInMillisAsDuration(test_suite.elapsed_time()),
    %%%%%: 4835-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4835-block  1
call    4 never executed
call    5 never executed
    $$$$$: 4835-block  2
call    6 never executed
    $$$$$: 4835-block  3
        -: 4836:                  kIndent, false);
    #####: 4837:    *stream << TestPropertiesAsJson(test_suite.ad_hoc_test_result(), kIndent)
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4837-block  0
call    3 never executed
    $$$$$: 4837-block  1
call    4 never executed
    $$$$$: 4837-block  2
    #####: 4838:            << ",\n";
call    0 never executed
    %%%%%: 4838-block  0
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4838-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
        -: 4839:  }
        -: 4840:
    #####: 4841:  *stream << kIndent << "\"" << kTestsuite << "\": [\n";
    %%%%%: 4841-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4841-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4841-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4841-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
        -: 4842:
    #####: 4843:  bool comma = false;
    #####: 4844:  for (int i = 0; i < test_suite.total_test_count(); ++i) {
    %%%%%: 4844-block  0
    %%%%%: 4844-block  1
    %%%%%: 4844-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4845:    if (test_suite.GetTestInfo(i)->is_reportable()) {
    %%%%%: 4845-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4845-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 4846:      if (comma) {
    %%%%%: 4846-block  0
branch  0 never executed
branch  1 never executed
    #####: 4847:        *stream << ",\n";
    %%%%%: 4847-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4848:      } else {
    #####: 4849:        comma = true;
    %%%%%: 4849-block  0
        -: 4850:      }
    #####: 4851:      OutputJsonTestInfo(stream, test_suite.name(), *test_suite.GetTestInfo(i));
    %%%%%: 4851-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4851-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
        -: 4852:    }
        -: 4853:  }
    #####: 4854:  *stream << "\n" << kIndent << "]\n" << Indent(4) << "}";
    %%%%%: 4854-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4854-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4854-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4854-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4854-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4854-block  5
call   15 never executed
branch 16 never executed
branch 17 never executed
    %%%%%: 4854-block  6
call   18 never executed
    $$$$$: 4854-block  7
call   19 never executed
    $$$$$: 4854-block  8
    #####: 4855:}
call    0 never executed
call    1 never executed
    $$$$$: 4855-block  0
call    2 never executed
    $$$$$: 4855-block  1
call    3 never executed
        -: 4856:
        -: 4857:// Prints a JSON summary of unit_test to output stream out.
function _ZN7testing8internal25JsonUnitTestResultPrinter17PrintJsonUnitTestEPSoRKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 4858:void JsonUnitTestResultPrinter::PrintJsonUnitTest(std::ostream* stream,
        -: 4859:                                                  const UnitTest& unit_test) {
    #####: 4860:  const std::string kTestsuites = "testsuites";
    %%%%%: 4860-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4860-block  1
call    4 never executed
    $$$$$: 4860-block  2
call    5 never executed
    $$$$$: 4860-block  3
    #####: 4861:  const std::string kIndent = Indent(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4862:  *stream << "{\n";
    %%%%%: 4862-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4863:
    #####: 4864:  OutputJsonKey(stream, kTestsuites, "tests", unit_test.reportable_test_count(),
    %%%%%: 4864-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4864-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4864-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4864-block  3
call   10 never executed
call   11 never executed
    $$$$$: 4864-block  4
call   12 never executed
    $$$$$: 4864-block  5
call   13 never executed
    $$$$$: 4864-block  6
    $$$$$: 4864-block  7
        -: 4865:                kIndent);
    #####: 4866:  OutputJsonKey(stream, kTestsuites, "failures", unit_test.failed_test_count(),
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4866-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4866-block  1
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4866-block  2
call   10 never executed
call   11 never executed
    $$$$$: 4866-block  3
call   12 never executed
    $$$$$: 4866-block  4
call   13 never executed
    $$$$$: 4866-block  5
    $$$$$: 4866-block  6
        -: 4867:                kIndent);
    #####: 4868:  OutputJsonKey(stream, kTestsuites, "disabled",
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4868-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4868-block  1
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4868-block  2
call   10 never executed
call   11 never executed
    $$$$$: 4868-block  3
call   12 never executed
    $$$$$: 4868-block  4
call   13 never executed
    $$$$$: 4868-block  5
    $$$$$: 4868-block  6
        -: 4869:                unit_test.reportable_disabled_test_count(), kIndent);
    #####: 4870:  OutputJsonKey(stream, kTestsuites, "errors", 0, kIndent);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4870-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4870-block  1
call    7 never executed
call    8 never executed
    $$$$$: 4870-block  2
call    9 never executed
    $$$$$: 4870-block  3
call   10 never executed
    $$$$$: 4870-block  4
    $$$$$: 4870-block  5
    #####: 4871:  if (GTEST_FLAG_GET(shuffle)) {
branch  0 never executed
branch  1 never executed
    #####: 4872:    OutputJsonKey(stream, kTestsuites, "random_seed", unit_test.random_seed(),
    %%%%%: 4872-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4872-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4872-block  2
call    8 never executed
call    9 never executed
    $$$$$: 4872-block  3
call   10 never executed
    $$$$$: 4872-block  4
call   11 never executed
    $$$$$: 4872-block  5
    $$$$$: 4872-block  6
        -: 4873:                  kIndent);
        -: 4874:  }
    #####: 4875:  OutputJsonKey(stream, kTestsuites, "timestamp",
    %%%%%: 4875-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4875-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
    $$$$$: 4875-block  2
call    8 never executed
    $$$$$: 4875-block  3
call    9 never executed
    $$$$$: 4875-block  4
    $$$$$: 4875-block  5
    #####: 4876:                FormatEpochTimeInMillisAsRFC3339(unit_test.start_timestamp()),
    %%%%%: 4876-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4876-block  1
call    4 never executed
call    5 never executed
    $$$$$: 4876-block  2
call    6 never executed
    $$$$$: 4876-block  3
        -: 4877:                kIndent);
    #####: 4878:  OutputJsonKey(stream, kTestsuites, "time",
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4878-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
    $$$$$: 4878-block  1
call    8 never executed
    $$$$$: 4878-block  2
call    9 never executed
    $$$$$: 4878-block  3
    $$$$$: 4878-block  4
    #####: 4879:                FormatTimeInMillisAsDuration(unit_test.elapsed_time()), kIndent,
    %%%%%: 4879-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4879-block  1
call    4 never executed
call    5 never executed
    $$$$$: 4879-block  2
call    6 never executed
    $$$$$: 4879-block  3
        -: 4880:                false);
        -: 4881:
    #####: 4882:  *stream << TestPropertiesAsJson(unit_test.ad_hoc_test_result(), kIndent)
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4882-block  0
call    3 never executed
    $$$$$: 4882-block  1
call    4 never executed
    $$$$$: 4882-block  2
    #####: 4883:          << ",\n";
call    0 never executed
    %%%%%: 4883-block  0
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4883-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
        -: 4884:
    #####: 4885:  OutputJsonKey(stream, kTestsuites, "name", "AllTests", kIndent);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4885-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4885-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4885-block  2
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4885-block  3
call   15 never executed
    $$$$$: 4885-block  4
call   16 never executed
    $$$$$: 4885-block  5
    $$$$$: 4885-block  6
    $$$$$: 4885-block  7
call   17 never executed
    $$$$$: 4885-block  8
call   18 never executed
    $$$$$: 4885-block  9
    $$$$$: 4885-block 10
    #####: 4886:  *stream << kIndent << "\"" << kTestsuites << "\": [\n";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4886-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4886-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4886-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
        -: 4887:
    #####: 4888:  bool comma = false;
    #####: 4889:  for (int i = 0; i < unit_test.total_test_suite_count(); ++i) {
    %%%%%: 4889-block  0
    %%%%%: 4889-block  1
    %%%%%: 4889-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4890:    if (unit_test.GetTestSuite(i)->reportable_test_count() > 0) {
    %%%%%: 4890-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4890-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4890-block  2
branch  6 never executed
branch  7 never executed
    #####: 4891:      if (comma) {
    %%%%%: 4891-block  0
branch  0 never executed
branch  1 never executed
    #####: 4892:        *stream << ",\n";
    %%%%%: 4892-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4893:      } else {
    #####: 4894:        comma = true;
    %%%%%: 4894-block  0
        -: 4895:      }
    #####: 4896:      PrintJsonTestSuite(stream, *unit_test.GetTestSuite(i));
    %%%%%: 4896-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4896-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 4897:    }
        -: 4898:  }
        -: 4899:
        -: 4900:  // If there was a test failure outside of one of the test suites (like in a
        -: 4901:  // test environment) include that in the output.
    #####: 4902:  if (unit_test.ad_hoc_test_result().Failed()) {
    %%%%%: 4902-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4902-block  1
branch  4 never executed
branch  5 never executed
    #####: 4903:    if (comma) {
    %%%%%: 4903-block  0
branch  0 never executed
branch  1 never executed
    #####: 4904:      *stream << ",\n";
    %%%%%: 4904-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4905:    }
    #####: 4906:    OutputJsonTestSuiteForTestResult(stream, unit_test.ad_hoc_test_result());
    %%%%%: 4906-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 4907:  }
        -: 4908:
        -: 4909:  *stream << "\n"
        -: 4910:          << kIndent << "]\n"
    #####: 4911:          << "}\n";
    %%%%%: 4911-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4911-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4911-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4911-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 4912:}
    %%%%%: 4912-block  0
call    0 never executed
call    1 never executed
    $$$$$: 4912-block  1
call    2 never executed
    $$$$$: 4912-block  2
call    3 never executed
        -: 4913:
function _ZN7testing8internal25JsonUnitTestResultPrinter17PrintJsonTestListEPSoRKSt6vectorIPNS_9TestSuiteESaIS5_EE called 0 returned 0% blocks executed 0%
    #####: 4914:void JsonUnitTestResultPrinter::PrintJsonTestList(
        -: 4915:    std::ostream* stream, const std::vector<TestSuite*>& test_suites) {
    #####: 4916:  const std::string kTestsuites = "testsuites";
    %%%%%: 4916-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4916-block  1
call    4 never executed
    $$$$$: 4916-block  2
call    5 never executed
    $$$$$: 4916-block  3
    #####: 4917:  const std::string kIndent = Indent(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4918:  *stream << "{\n";
    %%%%%: 4918-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4919:  int total_tests = 0;
    #####: 4920:  for (auto test_suite : test_suites) {
    %%%%%: 4920-block  0
call    0 never executed
call    1 never executed
    %%%%%: 4920-block  1
call    2 never executed
    %%%%%: 4920-block  2
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 4921:    total_tests += test_suite->total_test_count();
call    0 never executed
call    1 never executed
        -: 4922:  }
    #####: 4923:  OutputJsonKey(stream, kTestsuites, "tests", total_tests, kIndent);
    %%%%%: 4923-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4923-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4923-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4923-block  3
call    9 never executed
    $$$$$: 4923-block  4
call   10 never executed
    $$$$$: 4923-block  5
    $$$$$: 4923-block  6
        -: 4924:
    #####: 4925:  OutputJsonKey(stream, kTestsuites, "name", "AllTests", kIndent);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4925-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4925-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4925-block  2
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4925-block  3
call   15 never executed
    $$$$$: 4925-block  4
call   16 never executed
    $$$$$: 4925-block  5
    $$$$$: 4925-block  6
    $$$$$: 4925-block  7
call   17 never executed
    $$$$$: 4925-block  8
call   18 never executed
    $$$$$: 4925-block  9
    $$$$$: 4925-block 10
    #####: 4926:  *stream << kIndent << "\"" << kTestsuites << "\": [\n";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4926-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4926-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4926-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
        -: 4927:
    #####: 4928:  for (size_t i = 0; i < test_suites.size(); ++i) {
    %%%%%: 4928-block  0
    %%%%%: 4928-block  1
    %%%%%: 4928-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4929:    if (i != 0) {
    %%%%%: 4929-block  0
branch  0 never executed
branch  1 never executed
    #####: 4930:      *stream << ",\n";
    %%%%%: 4930-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4931:    }
    #####: 4932:    PrintJsonTestSuite(stream, *test_suites[i]);
    %%%%%: 4932-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 4933:  }
        -: 4934:
        -: 4935:  *stream << "\n"
        -: 4936:          << kIndent << "]\n"
    #####: 4937:          << "}\n";
    %%%%%: 4937-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4937-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4937-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4937-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 4938:}
    %%%%%: 4938-block  0
call    0 never executed
call    1 never executed
    $$$$$: 4938-block  1
call    2 never executed
    $$$$$: 4938-block  2
call    3 never executed
        -: 4939:// Produces a string representing the test properties in a result as
        -: 4940:// a JSON dictionary.
function _ZN7testing8internal25JsonUnitTestResultPrinter20TestPropertiesAsJsonERKNS_10TestResultERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 4941:std::string JsonUnitTestResultPrinter::TestPropertiesAsJson(
        -: 4942:    const TestResult& result, const std::string& indent) {
    #####: 4943:  Message attributes;
    %%%%%: 4943-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4944:  for (int i = 0; i < result.test_property_count(); ++i) {
    %%%%%: 4944-block  0
    %%%%%: 4944-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4945:    const TestProperty& property = result.GetTestProperty(i);
    %%%%%: 4945-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4946:    attributes << ",\n"
    %%%%%: 4946-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4947:               << indent << "\"" << property.key() << "\": " << "\""
    %%%%%: 4947-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4947-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4947-block  2
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4947-block  3
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4947-block  4
call   13 never executed
branch 14 never executed
branch 15 never executed
    $$$$$: 4947-block  5
    #####: 4948:               << EscapeJson(property.value()) << "\"";
    %%%%%: 4948-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4948-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4948-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4948-block  3
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 4948-block  4
call   14 never executed
call   15 never executed
call   16 never executed
    $$$$$: 4948-block  5
call   17 never executed
    $$$$$: 4948-block  6
call   18 never executed
    $$$$$: 4948-block  7
call   19 never executed
    $$$$$: 4948-block  8
    $$$$$: 4948-block  9
    $$$$$: 4948-block 10
        -: 4949:  }
    #####: 4950:  return attributes.GetString();
    %%%%%: 4950-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4950-block  1
    #####: 4951:}
    %%%%%: 4951-block  0
call    0 never executed
    $$$$$: 4951-block  1
call    1 never executed
        -: 4952:
        -: 4953:// End JsonUnitTestResultPrinter
        -: 4954:#endif  // GTEST_HAS_FILE_SYSTEM
        -: 4955:
        -: 4956:#if GTEST_CAN_STREAM_RESULTS_
        -: 4957:
        -: 4958:// Checks if str contains '=', '&', '%' or '\n' characters. If yes,
        -: 4959:// replaces them by "%xx" where xx is their hexadecimal value. For
        -: 4960:// example, replaces "=" with "%3D".  This algorithm is O(strlen(str))
        -: 4961:// in both time and space -- important as the input str may contain an
        -: 4962:// arbitrarily long test failure message and stack trace.
function _ZN7testing8internal17StreamingListener9UrlEncodeB5cxx11EPKc called 0 returned 0% blocks executed 0%
    #####: 4963:std::string StreamingListener::UrlEncode(const char* str) {
    #####: 4964:  std::string result;
    %%%%%: 4964-block  0
call    0 never executed
    #####: 4965:  result.reserve(strlen(str) + 1);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4966:  for (char ch = *str; ch != '\0'; ch = *++str) {
    %%%%%: 4966-block  0
    %%%%%: 4966-block  1
    %%%%%: 4966-block  2
branch  0 never executed
branch  1 never executed
    #####: 4967:    switch (ch) {
    %%%%%: 4967-block  0
branch  0 never executed
branch  1 never executed
    #####: 4968:      case '%':
        -: 4969:      case '=':
        -: 4970:      case '&':
        -: 4971:      case '\n':
    #####: 4972:        result.push_back('%');
    %%%%%: 4972-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4973:        result.append(String::FormatByte(static_cast<unsigned char>(ch)));
    %%%%%: 4973-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4973-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4973-block  2
call    6 never executed
    $$$$$: 4973-block  3
call    7 never executed
    $$$$$: 4973-block  4
    #####: 4974:        break;
    #####: 4975:      default:
    #####: 4976:        result.push_back(ch);
    %%%%%: 4976-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4977:        break;
    %%%%%: 4977-block  0
        -: 4978:    }
        -: 4979:  }
    #####: 4980:  return result;
    %%%%%: 4980-block  0
    %%%%%: 4980-block  1
    =====: 4981:}
    $$$$$: 4981-block  0
call    0 never executed
        -: 4982:
function _ZN7testing8internal17StreamingListener12SocketWriter14MakeConnectionEv called 0 returned 0% blocks executed 0%
    #####: 4983:void StreamingListener::SocketWriter::MakeConnection() {
    #####: 4984:  GTEST_CHECK_(sockfd_ == -1)
    %%%%%: 4984-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4984-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4984-block  2
call    6 never executed
    %%%%%: 4984-block  3
call    7 never executed
    $$$$$: 4984-block  4
call    8 never executed
    $$$$$: 4984-block  5
    #####: 4985:      << "MakeConnection() can't be called when there is already a connection.";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4985-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 4986:
        -: 4987:  addrinfo hints;
    #####: 4988:  memset(&hints, 0, sizeof(hints));
    #####: 4989:  hints.ai_family = AF_UNSPEC;  // To allow both IPv4 and IPv6 addresses.
    #####: 4990:  hints.ai_socktype = SOCK_STREAM;
    #####: 4991:  addrinfo* servinfo = nullptr;
        -: 4992:
        -: 4993:  // Use the getaddrinfo() to get a linked list of IP addresses for
        -: 4994:  // the given host name.
        -: 4995:  const int error_num =
    #####: 4996:      getaddrinfo(host_name_.c_str(), port_num_.c_str(), &hints, &servinfo);
    %%%%%: 4996-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 4997:  if (error_num != 0) {
    %%%%%: 4997-block  0
branch  0 never executed
branch  1 never executed
    #####: 4998:    GTEST_LOG_(WARNING) << "stream_result_to: getaddrinfo() failed: "
    %%%%%: 4998-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4998-block  1
call    3 never executed
    %%%%%: 4998-block  2
call    4 never executed
    $$$$$: 4998-block  3
call    5 never executed
    $$$$$: 4998-block  4
    #####: 4999:                        << gai_strerror(error_num);
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4999-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4999-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
        -: 5000:  }
        -: 5001:
        -: 5002:  // Loop through all the results and connect to the first we can.
    #####: 5003:  for (addrinfo* cur_addr = servinfo; sockfd_ == -1 && cur_addr != nullptr;
    %%%%%: 5003-block  0
    %%%%%: 5003-block  1
branch  0 never executed
branch  1 never executed
    %%%%%: 5003-block  2
branch  2 never executed
branch  3 never executed
    #####: 5004:       cur_addr = cur_addr->ai_next) {
    %%%%%: 5004-block  0
    #####: 5005:    sockfd_ = socket(cur_addr->ai_family, cur_addr->ai_socktype,
    %%%%%: 5005-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 5006:                     cur_addr->ai_protocol);
    #####: 5007:    if (sockfd_ != -1) {
    %%%%%: 5007-block  0
branch  0 never executed
branch  1 never executed
        -: 5008:      // Connect the client socket to the server socket.
    #####: 5009:      if (connect(sockfd_, cur_addr->ai_addr, cur_addr->ai_addrlen) == -1) {
    %%%%%: 5009-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5009-block  1
branch  3 never executed
branch  4 never executed
    #####: 5010:        close(sockfd_);
    %%%%%: 5010-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5011:        sockfd_ = -1;
    %%%%%: 5011-block  0
        -: 5012:      }
        -: 5013:    }
        -: 5014:  }
        -: 5015:
    #####: 5016:  freeaddrinfo(servinfo);  // all done with this structure
    %%%%%: 5016-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 5017:
    #####: 5018:  if (sockfd_ == -1) {
    %%%%%: 5018-block  0
branch  0 never executed
branch  1 never executed
    #####: 5019:    GTEST_LOG_(WARNING) << "stream_result_to: failed to connect to "
    %%%%%: 5019-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5019-block  1
call    3 never executed
    %%%%%: 5019-block  2
call    4 never executed
    $$$$$: 5019-block  3
call    5 never executed
    $$$$$: 5019-block  4
    #####: 5020:                        << host_name_ << ":" << port_num_;
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5020-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5020-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 5020-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
        -: 5021:  }
    #####: 5022:}
    %%%%%: 5022-block  0
        -: 5023:
        -: 5024:// End of class Streaming Listener
        -: 5025:#endif  // GTEST_CAN_STREAM_RESULTS__
        -: 5026:
        -: 5027:// class OsStackTraceGetter
        -: 5028:
        -: 5029:const char* const OsStackTraceGetterInterface::kElidedFramesMarker =
        -: 5030:    "... " GTEST_NAME_ " internal frames ...";
        -: 5031:
function _ZN7testing8internal18OsStackTraceGetter17CurrentStackTraceB5cxx11Eii called 0 returned 0% blocks executed 0%
    #####: 5032:std::string OsStackTraceGetter::CurrentStackTrace(int max_depth, int skip_count)
        -: 5033:    GTEST_LOCK_EXCLUDED_(mutex_) {
        -: 5034:#ifdef GTEST_HAS_ABSL
        -: 5035:  std::string result;
        -: 5036:
        -: 5037:  if (max_depth <= 0) {
        -: 5038:    return result;
        -: 5039:  }
        -: 5040:
        -: 5041:  max_depth = std::min(max_depth, kMaxStackTraceDepth);
        -: 5042:
        -: 5043:  std::vector<void*> raw_stack(max_depth);
        -: 5044:  // Skips the frames requested by the caller, plus this function.
        -: 5045:  const int raw_stack_size =
        -: 5046:      absl::GetStackTrace(&raw_stack[0], max_depth, skip_count + 1);
        -: 5047:
        -: 5048:  void* caller_frame = nullptr;
        -: 5049:  {
        -: 5050:    MutexLock lock(&mutex_);
        -: 5051:    caller_frame = caller_frame_;
        -: 5052:  }
        -: 5053:
        -: 5054:  for (int i = 0; i < raw_stack_size; ++i) {
        -: 5055:    if (raw_stack[i] == caller_frame &&
        -: 5056:        !GTEST_FLAG_GET(show_internal_stack_frames)) {
        -: 5057:      // Add a marker to the trace and stop adding frames.
        -: 5058:      absl::StrAppend(&result, kElidedFramesMarker, "\n");
        -: 5059:      break;
        -: 5060:    }
        -: 5061:
        -: 5062:    char tmp[1024];
        -: 5063:    const char* symbol = "(unknown)";
        -: 5064:    if (absl::Symbolize(raw_stack[i], tmp, sizeof(tmp))) {
        -: 5065:      symbol = tmp;
        -: 5066:    }
        -: 5067:
        -: 5068:    char line[1024];
        -: 5069:    snprintf(line, sizeof(line), "  %p: %s\n", raw_stack[i], symbol);
        -: 5070:    result += line;
        -: 5071:  }
        -: 5072:
        -: 5073:  return result;
        -: 5074:
        -: 5075:#else   // !GTEST_HAS_ABSL
        -: 5076:  static_cast<void>(max_depth);
        -: 5077:  static_cast<void>(skip_count);
    #####: 5078:  return "";
    %%%%%: 5078-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 5078-block  1
call    4 never executed
    %%%%%: 5078-block  2
    $$$$$: 5078-block  3
call    5 never executed
        -: 5079:#endif  // GTEST_HAS_ABSL
        -: 5080:}
        -: 5081:
function _ZN7testing8internal18OsStackTraceGetter16UponLeavingGTestEv called 0 returned 0% blocks executed 0%
    #####: 5082:void OsStackTraceGetter::UponLeavingGTest() GTEST_LOCK_EXCLUDED_(mutex_) {
        -: 5083:#ifdef GTEST_HAS_ABSL
        -: 5084:  void* caller_frame = nullptr;
        -: 5085:  if (absl::GetStackTrace(&caller_frame, 1, 3) <= 0) {
        -: 5086:    caller_frame = nullptr;
        -: 5087:  }
        -: 5088:
        -: 5089:  MutexLock lock(&mutex_);
        -: 5090:  caller_frame_ = caller_frame;
        -: 5091:#endif  // GTEST_HAS_ABSL
    #####: 5092:}
        -: 5093:
        -: 5094:#ifdef GTEST_HAS_DEATH_TEST
        -: 5095:// A helper class that creates the premature-exit file in its
        -: 5096:// constructor and deletes the file in its destructor.
        -: 5097:class ScopedPrematureExitFile {
        -: 5098: public:
function _ZN7testing8internal23ScopedPrematureExitFileC1EPKc called 1 returned 100% blocks executed 50%
        1: 5099:  explicit ScopedPrematureExitFile(const char* premature_exit_filepath)
       1*: 5100:      : premature_exit_filepath_(
        1: 5100-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 5100-block  1
        1: 5100-block  2
        1: 5100-block  3
call    2 returned 1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 5100-block  4
call    6 returned 1
    $$$$$: 5100-block  5
call    7 never executed
    $$$$$: 5100-block  6
call    8 never executed
        -: 5101:            premature_exit_filepath ? premature_exit_filepath : "") {
        -: 5102:    // If a path to the premature-exit file is specified...
        1: 5103:    if (!premature_exit_filepath_.empty()) {
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
        -: 5104:      // create the file with a single "0" character in it.  I/O
        -: 5105:      // errors are ignored as there's nothing better we can do and we
        -: 5106:      // don't want to fail the test because of this.
    #####: 5107:      FILE* pfile = posix::FOpen(premature_exit_filepath_.c_str(), "w");
    %%%%%: 5107-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5108:      fwrite("0", 1, 1, pfile);
    %%%%%: 5108-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5109:      fclose(pfile);
    %%%%%: 5109-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 5110:    }
        1: 5111:  }
        1: 5111-block  0
    $$$$$: 5111-block  1
call    0 never executed
        -: 5112:
function _ZN7testing8internal23ScopedPrematureExitFileD1Ev called 1 returned 100% blocks executed 27%
        2: 5113:  ~ScopedPrematureExitFile() {
        -: 5114:#ifndef GTEST_OS_ESP8266
        1: 5115:    if (!premature_exit_filepath_.empty()) {
        1: 5115-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####: 5116:      int retval = remove(premature_exit_filepath_.c_str());
    %%%%%: 5116-block  0
call    0 never executed
call    1 never executed
    #####: 5117:      if (retval) {
branch  0 never executed
branch  1 never executed
    #####: 5118:        GTEST_LOG_(ERROR) << "Failed to remove premature exit filepath \""
    %%%%%: 5118-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 5119:                          << premature_exit_filepath_ << "\" with error "
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 5120:                          << retval;
call    0 never executed
        -: 5121:      }
        -: 5122:    }
        -: 5123:#endif
        1: 5124:  }
        1: 5124-block  0
call    0 returned 1
        -: 5125:
        -: 5126: private:
        -: 5127:  const std::string premature_exit_filepath_;
        -: 5128:
        -: 5129:  ScopedPrematureExitFile(const ScopedPrematureExitFile&) = delete;
        -: 5130:  ScopedPrematureExitFile& operator=(const ScopedPrematureExitFile&) = delete;
        -: 5131:};
        -: 5132:#endif  // GTEST_HAS_DEATH_TEST
        -: 5133:
        -: 5134:}  // namespace internal
        -: 5135:
        -: 5136:// class TestEventListeners
        -: 5137:
       1*: 5138:TestEventListeners::TestEventListeners()
       1*: 5139:    : repeater_(new internal::TestEventRepeater()),
       1*: 5140:      default_result_printer_(nullptr),
       1*: 5141:      default_xml_generator_(nullptr) {}
------------------
_ZN7testing18TestEventListenersC1Ev:
function _ZN7testing18TestEventListenersC1Ev called 1 returned 100% blocks executed 100%
        1: 5138:TestEventListeners::TestEventListeners()
        1: 5139:    : repeater_(new internal::TestEventRepeater()),
        1: 5139-block  0
call    0 returned 1
call    1 returned 1
        1: 5140:      default_result_printer_(nullptr),
        1: 5141:      default_xml_generator_(nullptr) {}
------------------
_ZN7testing18TestEventListenersC2Ev:
function _ZN7testing18TestEventListenersC2Ev called 0 returned 0% blocks executed 0%
    #####: 5138:TestEventListeners::TestEventListeners()
    #####: 5139:    : repeater_(new internal::TestEventRepeater()),
    %%%%%: 5139-block  0
call    0 never executed
call    1 never executed
    #####: 5140:      default_result_printer_(nullptr),
    #####: 5141:      default_xml_generator_(nullptr) {}
------------------
        -: 5142:
    #####: 5143:TestEventListeners::~TestEventListeners() { delete repeater_; }
------------------
_ZN7testing18TestEventListenersD1Ev:
function _ZN7testing18TestEventListenersD1Ev called 0 returned 0% blocks executed 0%
    #####: 5143:TestEventListeners::~TestEventListeners() { delete repeater_; }
    %%%%%: 5143-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 5143-block  1
call    2 never executed
------------------
_ZN7testing18TestEventListenersD2Ev:
function _ZN7testing18TestEventListenersD2Ev called 0 returned 0% blocks executed 0%
    #####: 5143:TestEventListeners::~TestEventListeners() { delete repeater_; }
    %%%%%: 5143-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 5143-block  1
call    2 never executed
------------------
        -: 5144:
        -: 5145:// Returns the standard listener responsible for the default console
        -: 5146:// output.  Can be removed from the listeners list to shut down default
        -: 5147:// console output.  Note that removing this object from the listener list
        -: 5148:// with Release transfers its ownership to the user.
function _ZN7testing18TestEventListeners6AppendEPNS_17TestEventListenerE called 1 returned 100% blocks executed 100%
        1: 5149:void TestEventListeners::Append(TestEventListener* listener) {
        1: 5150:  repeater_->Append(listener);
        1: 5150-block  0
call    0 returned 1
        1: 5151:}
        -: 5152:
        -: 5153:// Removes the given event listener from the list and returns it.  It then
        -: 5154:// becomes the caller's responsibility to delete the listener. Returns
        -: 5155:// NULL if the listener is not found in the list.
function _ZN7testing18TestEventListeners7ReleaseEPNS_17TestEventListenerE called 1 returned 100% blocks executed 71%
        1: 5156:TestEventListener* TestEventListeners::Release(TestEventListener* listener) {
        1: 5157:  if (listener == default_result_printer_)
        1: 5157-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 5158:    default_result_printer_ = nullptr;
        1: 5158-block  0
    #####: 5159:  else if (listener == default_xml_generator_)
    %%%%%: 5159-block  0
branch  0 never executed
branch  1 never executed
    #####: 5160:    default_xml_generator_ = nullptr;
    %%%%%: 5160-block  0
        1: 5161:  return repeater_->Release(listener);
        1: 5161-block  0
call    0 returned 1
        -: 5162:}
        -: 5163:
        -: 5164:// Returns repeater that broadcasts the TestEventListener events to all
        -: 5165:// subscribers.
function _ZN7testing18TestEventListeners8repeaterEv called 1 returned 100% blocks executed 100%
        1: 5166:TestEventListener* TestEventListeners::repeater() { return repeater_; }
        1: 5166-block  0
        -: 5167:
        -: 5168:// Sets the default_result_printer attribute to the provided listener.
        -: 5169:// The listener is also added to the listener list and previous
        -: 5170:// default_result_printer is removed from it and deleted. The listener can
        -: 5171:// also be NULL in which case it will not be added to the list. Does
        -: 5172:// nothing if the previous and the current listener objects are the same.
function _ZN7testing18TestEventListeners23SetDefaultResultPrinterEPNS_17TestEventListenerE called 1 returned 100% blocks executed 86%
        1: 5173:void TestEventListeners::SetDefaultResultPrinter(TestEventListener* listener) {
        1: 5174:  if (default_result_printer_ != listener) {
        1: 5174-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        -: 5175:    // It is an error to pass this method a listener that is already in the
        -: 5176:    // list.
       1*: 5177:    delete Release(default_result_printer_);
        1: 5177-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%: 5177-block  1
call    3 never executed
        1: 5178:    default_result_printer_ = listener;
        1: 5179:    if (listener != nullptr) Append(listener);
        1: 5179-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 5179-block  1
call    2 returned 1
        -: 5180:  }
        1: 5181:}
        -: 5182:
        -: 5183:// Sets the default_xml_generator attribute to the provided listener.  The
        -: 5184:// listener is also added to the listener list and previous
        -: 5185:// default_xml_generator is removed from it and deleted. The listener can
        -: 5186:// also be NULL in which case it will not be added to the list. Does
        -: 5187:// nothing if the previous and the current listener objects are the same.
function _ZN7testing18TestEventListeners22SetDefaultXmlGeneratorEPNS_17TestEventListenerE called 0 returned 0% blocks executed 0%
    #####: 5188:void TestEventListeners::SetDefaultXmlGenerator(TestEventListener* listener) {
    #####: 5189:  if (default_xml_generator_ != listener) {
    %%%%%: 5189-block  0
branch  0 never executed
branch  1 never executed
        -: 5190:    // It is an error to pass this method a listener that is already in the
        -: 5191:    // list.
    #####: 5192:    delete Release(default_xml_generator_);
    %%%%%: 5192-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5192-block  1
call    3 never executed
    #####: 5193:    default_xml_generator_ = listener;
    #####: 5194:    if (listener != nullptr) Append(listener);
    %%%%%: 5194-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 5194-block  1
call    2 never executed
        -: 5195:  }
    #####: 5196:}
        -: 5197:
        -: 5198:// Controls whether events will be forwarded by the repeater to the
        -: 5199:// listeners in the list.
function _ZNK7testing18TestEventListeners22EventForwardingEnabledEv called 0 returned 0% blocks executed 0%
    #####: 5200:bool TestEventListeners::EventForwardingEnabled() const {
    #####: 5201:  return repeater_->forwarding_enabled();
    %%%%%: 5201-block  0
call    0 never executed
        -: 5202:}
        -: 5203:
function _ZN7testing18TestEventListeners23SuppressEventForwardingEb called 0 returned 0% blocks executed 0%
    #####: 5204:void TestEventListeners::SuppressEventForwarding(bool suppress) {
    #####: 5205:  repeater_->set_forwarding_enabled(!suppress);
    %%%%%: 5205-block  0
call    0 never executed
    #####: 5206:}
        -: 5207:
        -: 5208:// class UnitTest
        -: 5209:
        -: 5210:// Gets the singleton UnitTest object.  The first time this method is
        -: 5211:// called, a UnitTest object is constructed and returned.  Consecutive
        -: 5212:// calls will return the same object.
        -: 5213://
        -: 5214:// We don't protect this under mutex_ as a user is not supposed to
        -: 5215:// call this before main() starts, from which point on the return
        -: 5216:// value will never change.
function _ZN7testing8UnitTest11GetInstanceEv called 5 returned 100% blocks executed 82%
        5: 5217:UnitTest* UnitTest::GetInstance() {
        -: 5218:  // CodeGear C++Builder insists on a public destructor for the
        -: 5219:  // default implementation.  Use this implementation to keep good OO
        -: 5220:  // design with private destructor.
        -: 5221:
        -: 5222:#if defined(__BORLANDC__)
        -: 5223:  static UnitTest* const instance = new UnitTest;
        -: 5224:  return instance;
        -: 5225:#else
        5: 5226:  static UnitTest instance;
        5: 5226-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 4
        1: 5226-block  1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0
        1: 5226-block  2
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
        1: 5226-block  3
call    8 returned 1
call    9 returned 1
    $$$$$: 5226-block  4
branch 10 never executed
branch 11 never executed
    $$$$$: 5226-block  5
call   12 never executed
        5: 5227:  return &instance;
        5: 5227-block  0
        5: 5227-block  1
        -: 5228:#endif  // defined(__BORLANDC__)
        -: 5229:}
        -: 5230:
        -: 5231:// Gets the number of successful test suites.
function _ZNK7testing8UnitTest27successful_test_suite_countEv called 0 returned 0% blocks executed 0%
    #####: 5232:int UnitTest::successful_test_suite_count() const {
    #####: 5233:  return impl()->successful_test_suite_count();
    %%%%%: 5233-block  0
call    0 never executed
call    1 never executed
        -: 5234:}
        -: 5235:
        -: 5236:// Gets the number of failed test suites.
function _ZNK7testing8UnitTest23failed_test_suite_countEv called 0 returned 0% blocks executed 0%
    #####: 5237:int UnitTest::failed_test_suite_count() const {
    #####: 5238:  return impl()->failed_test_suite_count();
    %%%%%: 5238-block  0
call    0 never executed
call    1 never executed
        -: 5239:}
        -: 5240:
        -: 5241:// Gets the number of all test suites.
function _ZNK7testing8UnitTest22total_test_suite_countEv called 0 returned 0% blocks executed 0%
    #####: 5242:int UnitTest::total_test_suite_count() const {
    #####: 5243:  return impl()->total_test_suite_count();
    %%%%%: 5243-block  0
call    0 never executed
call    1 never executed
        -: 5244:}
        -: 5245:
        -: 5246:// Gets the number of all test suites that contain at least one test
        -: 5247:// that should run.
function _ZNK7testing8UnitTest23test_suite_to_run_countEv called 2 returned 100% blocks executed 100%
        2: 5248:int UnitTest::test_suite_to_run_count() const {
        2: 5249:  return impl()->test_suite_to_run_count();
        2: 5249-block  0
call    0 returned 2
call    1 returned 2
        -: 5250:}
        -: 5251:
        -: 5252://  Legacy API is deprecated but still available
        -: 5253:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZNK7testing8UnitTest26successful_test_case_countEv called 0 returned 0% blocks executed 0%
    #####: 5254:int UnitTest::successful_test_case_count() const {
    #####: 5255:  return impl()->successful_test_suite_count();
    %%%%%: 5255-block  0
call    0 never executed
call    1 never executed
        -: 5256:}
function _ZNK7testing8UnitTest22failed_test_case_countEv called 0 returned 0% blocks executed 0%
    #####: 5257:int UnitTest::failed_test_case_count() const {
    #####: 5258:  return impl()->failed_test_suite_count();
    %%%%%: 5258-block  0
call    0 never executed
call    1 never executed
        -: 5259:}
function _ZNK7testing8UnitTest21total_test_case_countEv called 0 returned 0% blocks executed 0%
    #####: 5260:int UnitTest::total_test_case_count() const {
    #####: 5261:  return impl()->total_test_suite_count();
    %%%%%: 5261-block  0
call    0 never executed
call    1 never executed
        -: 5262:}
function _ZNK7testing8UnitTest22test_case_to_run_countEv called 0 returned 0% blocks executed 0%
    #####: 5263:int UnitTest::test_case_to_run_count() const {
    #####: 5264:  return impl()->test_suite_to_run_count();
    %%%%%: 5264-block  0
call    0 never executed
call    1 never executed
        -: 5265:}
        -: 5266:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 5267:
        -: 5268:// Gets the number of successful tests.
function _ZNK7testing8UnitTest21successful_test_countEv called 1 returned 100% blocks executed 100%
        1: 5269:int UnitTest::successful_test_count() const {
        1: 5270:  return impl()->successful_test_count();
        1: 5270-block  0
call    0 returned 1
call    1 returned 1
        -: 5271:}
        -: 5272:
        -: 5273:// Gets the number of skipped tests.
function _ZNK7testing8UnitTest18skipped_test_countEv called 1 returned 100% blocks executed 100%
        1: 5274:int UnitTest::skipped_test_count() const {
        1: 5275:  return impl()->skipped_test_count();
        1: 5275-block  0
call    0 returned 1
call    1 returned 1
        -: 5276:}
        -: 5277:
        -: 5278:// Gets the number of failed tests.
function _ZNK7testing8UnitTest17failed_test_countEv called 0 returned 0% blocks executed 0%
    #####: 5279:int UnitTest::failed_test_count() const { return impl()->failed_test_count(); }
    %%%%%: 5279-block  0
call    0 never executed
call    1 never executed
        -: 5280:
        -: 5281:// Gets the number of disabled tests that will be reported in the XML report.
function _ZNK7testing8UnitTest30reportable_disabled_test_countEv called 1 returned 100% blocks executed 100%
        1: 5282:int UnitTest::reportable_disabled_test_count() const {
        1: 5283:  return impl()->reportable_disabled_test_count();
        1: 5283-block  0
call    0 returned 1
call    1 returned 1
        -: 5284:}
        -: 5285:
        -: 5286:// Gets the number of disabled tests.
function _ZNK7testing8UnitTest19disabled_test_countEv called 0 returned 0% blocks executed 0%
    #####: 5287:int UnitTest::disabled_test_count() const {
    #####: 5288:  return impl()->disabled_test_count();
    %%%%%: 5288-block  0
call    0 never executed
call    1 never executed
        -: 5289:}
        -: 5290:
        -: 5291:// Gets the number of tests to be printed in the XML report.
function _ZNK7testing8UnitTest21reportable_test_countEv called 0 returned 0% blocks executed 0%
    #####: 5292:int UnitTest::reportable_test_count() const {
    #####: 5293:  return impl()->reportable_test_count();
    %%%%%: 5293-block  0
call    0 never executed
call    1 never executed
        -: 5294:}
        -: 5295:
        -: 5296:// Gets the number of all tests.
function _ZNK7testing8UnitTest16total_test_countEv called 0 returned 0% blocks executed 0%
    #####: 5297:int UnitTest::total_test_count() const { return impl()->total_test_count(); }
    %%%%%: 5297-block  0
call    0 never executed
call    1 never executed
        -: 5298:
        -: 5299:// Gets the number of tests that should run.
function _ZNK7testing8UnitTest17test_to_run_countEv called 2 returned 100% blocks executed 100%
        2: 5300:int UnitTest::test_to_run_count() const { return impl()->test_to_run_count(); }
        2: 5300-block  0
call    0 returned 2
call    1 returned 2
        -: 5301:
        -: 5302:// Gets the time of the test program start, in ms from the start of the
        -: 5303:// UNIX epoch.
function _ZNK7testing8UnitTest15start_timestampEv called 0 returned 0% blocks executed 0%
    #####: 5304:internal::TimeInMillis UnitTest::start_timestamp() const {
    #####: 5305:  return impl()->start_timestamp();
    %%%%%: 5305-block  0
call    0 never executed
call    1 never executed
        -: 5306:}
        -: 5307:
        -: 5308:// Gets the elapsed time, in milliseconds.
function _ZNK7testing8UnitTest12elapsed_timeEv called 1 returned 100% blocks executed 100%
        1: 5309:internal::TimeInMillis UnitTest::elapsed_time() const {
        1: 5310:  return impl()->elapsed_time();
        1: 5310-block  0
call    0 returned 1
call    1 returned 1
        -: 5311:}
        -: 5312:
        -: 5313:// Returns true if and only if the unit test passed (i.e. all test suites
        -: 5314:// passed).
function _ZNK7testing8UnitTest6PassedEv called 1 returned 100% blocks executed 100%
        1: 5315:bool UnitTest::Passed() const { return impl()->Passed(); }
        1: 5315-block  0
call    0 returned 1
call    1 returned 1
        -: 5316:
        -: 5317:// Returns true if and only if the unit test failed (i.e. some test suite
        -: 5318:// failed or something outside of all tests failed).
function _ZNK7testing8UnitTest6FailedEv called 0 returned 0% blocks executed 0%
    #####: 5319:bool UnitTest::Failed() const { return impl()->Failed(); }
    %%%%%: 5319-block  0
call    0 never executed
call    1 never executed
        -: 5320:
        -: 5321:// Gets the i-th test suite among all the test suites. i can range from 0 to
        -: 5322:// total_test_suite_count() - 1. If i is not in that range, returns NULL.
function _ZNK7testing8UnitTest12GetTestSuiteEi called 0 returned 0% blocks executed 0%
    #####: 5323:const TestSuite* UnitTest::GetTestSuite(int i) const {
    #####: 5324:  return impl()->GetTestSuite(i);
    %%%%%: 5324-block  0
call    0 never executed
call    1 never executed
        -: 5325:}
        -: 5326:
        -: 5327://  Legacy API is deprecated but still available
        -: 5328:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZNK7testing8UnitTest11GetTestCaseEi called 0 returned 0% blocks executed 0%
    #####: 5329:const TestCase* UnitTest::GetTestCase(int i) const {
    #####: 5330:  return impl()->GetTestCase(i);
    %%%%%: 5330-block  0
call    0 never executed
call    1 never executed
        -: 5331:}
        -: 5332:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 5333:
        -: 5334:// Returns the TestResult containing information on test failures and
        -: 5335:// properties logged outside of individual test suites.
function _ZNK7testing8UnitTest18ad_hoc_test_resultEv called 0 returned 0% blocks executed 0%
    #####: 5336:const TestResult& UnitTest::ad_hoc_test_result() const {
    #####: 5337:  return *impl()->ad_hoc_test_result();
    %%%%%: 5337-block  0
call    0 never executed
call    1 never executed
        -: 5338:}
        -: 5339:
        -: 5340:// Gets the i-th test suite among all the test suites. i can range from 0 to
        -: 5341:// total_test_suite_count() - 1. If i is not in that range, returns NULL.
function _ZN7testing8UnitTest19GetMutableTestSuiteEi called 0 returned 0% blocks executed 0%
    #####: 5342:TestSuite* UnitTest::GetMutableTestSuite(int i) {
    #####: 5343:  return impl()->GetMutableSuiteCase(i);
    %%%%%: 5343-block  0
call    0 never executed
call    1 never executed
        -: 5344:}
        -: 5345:
function _ZN7testing8UnitTest16UponLeavingGTestEv called 0 returned 0% blocks executed 0%
    #####: 5346:void UnitTest::UponLeavingGTest() {
    #####: 5347:  impl()->os_stack_trace_getter()->UponLeavingGTest();
    %%%%%: 5347-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 5348:}
        -: 5349:
        -: 5350:// Sets the TestSuite object for the test that's currently running.
function _ZN7testing8UnitTest22set_current_test_suiteEPNS_9TestSuiteE called 0 returned 0% blocks executed 0%
    #####: 5351:void UnitTest::set_current_test_suite(TestSuite* a_current_test_suite) {
    #####: 5352:  internal::MutexLock lock(&mutex_);
    %%%%%: 5352-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5353:  impl_->set_current_test_suite(a_current_test_suite);
    %%%%%: 5353-block  0
call    0 never executed
    #####: 5354:}
call    0 never executed
        -: 5355:
        -: 5356:// Sets the TestInfo object for the test that's currently running.
function _ZN7testing8UnitTest21set_current_test_infoEPNS_8TestInfoE called 0 returned 0% blocks executed 0%
    #####: 5357:void UnitTest::set_current_test_info(TestInfo* a_current_test_info) {
    #####: 5358:  internal::MutexLock lock(&mutex_);
    %%%%%: 5358-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5359:  impl_->set_current_test_info(a_current_test_info);
    %%%%%: 5359-block  0
call    0 never executed
    #####: 5360:}
call    0 never executed
        -: 5361:
        -: 5362:// Returns the list of event listeners that can be used to track events
        -: 5363:// inside Google Test.
function _ZN7testing8UnitTest9listenersEv called 0 returned 0% blocks executed 0%
    #####: 5364:TestEventListeners& UnitTest::listeners() { return *impl()->listeners(); }
    %%%%%: 5364-block  0
call    0 never executed
call    1 never executed
        -: 5365:
        -: 5366:// Registers and returns a global test environment.  When a test
        -: 5367:// program is run, all global test environments will be set-up in the
        -: 5368:// order they were registered.  After all tests in the program have
        -: 5369:// finished, all global test environments will be torn-down in the
        -: 5370:// *reverse* order they were registered.
        -: 5371://
        -: 5372:// The UnitTest object takes ownership of the given environment.
        -: 5373://
        -: 5374:// We don't protect this under mutex_, as we only support calling it
        -: 5375:// from the main thread.
function _ZN7testing8UnitTest14AddEnvironmentEPNS_11EnvironmentE called 0 returned 0% blocks executed 0%
    #####: 5376:Environment* UnitTest::AddEnvironment(Environment* env) {
    #####: 5377:  if (env == nullptr) {
    %%%%%: 5377-block  0
branch  0 never executed
branch  1 never executed
    #####: 5378:    return nullptr;
    %%%%%: 5378-block  0
        -: 5379:  }
        -: 5380:
    #####: 5381:  impl_->environments().push_back(env);
    %%%%%: 5381-block  0
call    0 never executed
call    1 never executed
    #####: 5382:  return env;
        -: 5383:}
        -: 5384:
        -: 5385:// Adds a TestPartResult to the current TestResult object.  All Google Test
        -: 5386:// assertion macros (e.g. ASSERT_TRUE, EXPECT_EQ, etc) eventually call
        -: 5387:// this to report their results.  The user code should use the
        -: 5388:// assertion macros instead of calling this directly.
function _ZN7testing8UnitTest17AddTestPartResultENS_14TestPartResult4TypeEPKciRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESC_ called 0 returned 0% blocks executed 0%
    #####: 5389:void UnitTest::AddTestPartResult(TestPartResult::Type result_type,
        -: 5390:                                 const char* file_name, int line_number,
        -: 5391:                                 const std::string& message,
        -: 5392:                                 const std::string& os_stack_trace)
        -: 5393:    GTEST_LOCK_EXCLUDED_(mutex_) {
    #####: 5394:  Message msg;
    %%%%%: 5394-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5395:  msg << message;
    %%%%%: 5395-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 5396:
    #####: 5397:  internal::MutexLock lock(&mutex_);
    %%%%%: 5397-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5398:  if (!impl_->gtest_trace_stack().empty()) {
    %%%%%: 5398-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5398-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 5399:    msg << "\n" << GTEST_NAME_ << " trace:";
    %%%%%: 5399-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5399-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5399-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
        -: 5400:
    #####: 5401:    for (size_t i = impl_->gtest_trace_stack().size(); i > 0; --i) {
    %%%%%: 5401-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5401-block  1
call    3 never executed
    %%%%%: 5401-block  2
branch  4 never executed
branch  5 never executed
    #####: 5402:      const internal::TraceInfo& trace = impl_->gtest_trace_stack()[i - 1];
    %%%%%: 5402-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5402-block  1
call    3 never executed
    #####: 5403:      msg << "\n"
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5404:          << internal::FormatFileLocation(trace.file, trace.line) << " "
    %%%%%: 5404-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5404-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5404-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 5404-block  3
call    9 never executed
    $$$$$: 5404-block  4
call   10 never executed
    $$$$$: 5404-block  5
    #####: 5405:          << trace.message;
    %%%%%: 5405-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 5406:    }
        -: 5407:  }
        -: 5408:
    #####: 5409:  if (os_stack_trace.c_str() != nullptr && !os_stack_trace.empty()) {
    %%%%%: 5409-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5409-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5409-block  2
    %%%%%: 5409-block  3
    %%%%%: 5409-block  4
branch  6 never executed
branch  7 never executed
    #####: 5410:    msg << internal::kStackTraceMarker << os_stack_trace;
    %%%%%: 5410-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5410-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 5411:  } else {
    #####: 5412:    msg << "\n";
    %%%%%: 5412-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 5413:  }
        -: 5414:
        -: 5415:  const TestPartResult result = TestPartResult(
    #####: 5416:      result_type, file_name, line_number, msg.GetString().c_str());
    %%%%%: 5416-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5416-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 5416-block  2
call    7 never executed
    $$$$$: 5416-block  3
call    8 never executed
    $$$$$: 5416-block  4
    #####: 5417:  impl_->GetTestPartResultReporterForCurrentThread()->ReportTestPartResult(
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5417-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 5418:      result);
        -: 5419:
    #####: 5420:  if (result_type != TestPartResult::kSuccess &&
    %%%%%: 5420-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 5420-block  1
branch  2 never executed
branch  3 never executed
        -: 5421:      result_type != TestPartResult::kSkip) {
        -: 5422:    // gtest_break_on_failure takes precedence over
        -: 5423:    // gtest_throw_on_failure.  This allows a user to set the latter
        -: 5424:    // in the code (perhaps in order to use Google Test assertions
        -: 5425:    // with another testing framework) and specify the former on the
        -: 5426:    // command line for debugging.
    #####: 5427:    if (GTEST_FLAG_GET(break_on_failure)) {
    %%%%%: 5427-block  0
branch  0 never executed
branch  1 never executed
        -: 5428:#if defined(GTEST_OS_WINDOWS) && !defined(GTEST_OS_WINDOWS_PHONE) && \
        -: 5429:    !defined(GTEST_OS_WINDOWS_RT)
        -: 5430:      // Using DebugBreak on Windows allows gtest to still break into a debugger
        -: 5431:      // when a failure happens and both the --gtest_break_on_failure and
        -: 5432:      // the --gtest_catch_exceptions flags are specified.
        -: 5433:      DebugBreak();
        -: 5434:#elif (!defined(__native_client__)) &&            \
        -: 5435:    ((defined(__clang__) || defined(__GNUC__)) && \
        -: 5436:     (defined(__x86_64__) || defined(__i386__)))
        -: 5437:      // with clang/gcc we can achieve the same effect on x86 by invoking int3
        -: 5438:      asm("int3");
        -: 5439:#elif GTEST_HAS_BUILTIN(__builtin_trap)
    #####: 5440:      __builtin_trap();
    %%%%%: 5440-block  0
call    0 never executed
        -: 5441:#elif defined(SIGTRAP)
        -: 5442:      raise(SIGTRAP);
        -: 5443:#else
        -: 5444:      // Dereference nullptr through a volatile pointer to prevent the compiler
        -: 5445:      // from removing. We use this rather than abort() or __builtin_trap() for
        -: 5446:      // portability: some debuggers don't correctly trap abort().
        -: 5447:      *static_cast<volatile int*>(nullptr) = 1;
        -: 5448:#endif  // GTEST_OS_WINDOWS
    #####: 5449:    } else if (GTEST_FLAG_GET(throw_on_failure)) {
    %%%%%: 5449-block  0
branch  0 never executed
branch  1 never executed
        -: 5450:#if GTEST_HAS_EXCEPTIONS
    #####: 5451:      throw internal::GoogleTestFailureException(result);
    %%%%%: 5451-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 5451-block  1
call    4 never executed
    $$$$$: 5451-block  2
call    5 never executed
        -: 5452:#else
        -: 5453:      // We cannot call abort() as it generates a pop-up in debug mode
        -: 5454:      // that cannot be suppressed in VC 7.1 or below.
        -: 5455:      exit(1);
        -: 5456:#endif
        -: 5457:    }
        -: 5458:  }
    #####: 5459:}
    %%%%%: 5459-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    $$$$$: 5459-block  1
call    3 never executed
    $$$$$: 5459-block  2
call    4 never executed
    $$$$$: 5459-block  3
call    5 never executed
        -: 5460:
        -: 5461:// Adds a TestProperty to the current TestResult object when invoked from
        -: 5462:// inside a test, to current TestSuite's ad_hoc_test_result_ when invoked
        -: 5463:// from SetUpTestSuite or TearDownTestSuite, or to the global property set
        -: 5464:// when invoked elsewhere.  If the result already contains a property with
        -: 5465:// the same key, the value will be updated.
function _ZN7testing8UnitTest14RecordPropertyERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_ called 0 returned 0% blocks executed 0%
    #####: 5466:void UnitTest::RecordProperty(const std::string& key,
        -: 5467:                              const std::string& value) {
    #####: 5468:  impl_->RecordProperty(TestProperty(key, value));
    %%%%%: 5468-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5468-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5468-block  2
call    6 never executed
    $$$$$: 5468-block  3
call    7 never executed
    #####: 5469:}
        -: 5470:
        -: 5471:// Runs all tests in this UnitTest object and prints the result.
        -: 5472:// Returns 0 if successful, or 1 otherwise.
        -: 5473://
        -: 5474:// We don't protect this under mutex_, as we only support calling it
        -: 5475:// from the main thread.
function _ZN7testing8UnitTest3RunEv called 1 returned 100% blocks executed 78%
        1: 5476:int UnitTest::Run() {
        -: 5477:#ifdef GTEST_HAS_DEATH_TEST
        -: 5478:  const bool in_death_test_child_process =
        1: 5479:      !GTEST_FLAG_GET(internal_run_death_test).empty();
        1: 5479-block  0
call    0 returned 1
        -: 5480:
        -: 5481:  // Google Test implements this protocol for catching that a test
        -: 5482:  // program exits before returning control to Google Test:
        -: 5483:  //
        -: 5484:  //   1. Upon start, Google Test creates a file whose absolute path
        -: 5485:  //      is specified by the environment variable
        -: 5486:  //      TEST_PREMATURE_EXIT_FILE.
        -: 5487:  //   2. When Google Test has finished its work, it deletes the file.
        -: 5488:  //
        -: 5489:  // This allows a test runner to set TEST_PREMATURE_EXIT_FILE before
        -: 5490:  // running a Google-Test-based test program and check the existence
        -: 5491:  // of the file at the end of the test execution to see if it has
        -: 5492:  // exited prematurely.
        -: 5493:
        -: 5494:  // If we are in the child process of a death test, don't
        -: 5495:  // create/delete the premature exit file, as doing so is unnecessary
        -: 5496:  // and will confuse the parent process.  Otherwise, create/delete
        -: 5497:  // the file upon entering/leaving this function.  If the program
        -: 5498:  // somehow exits before this function has a chance to return, the
        -: 5499:  // premature-exit file will be left undeleted, causing a test runner
        -: 5500:  // that understands the premature-exit-file protocol to report the
        -: 5501:  // test as having failed.
        -: 5502:  const internal::ScopedPrematureExitFile premature_exit_file(
        -: 5503:      in_death_test_child_process
        -: 5504:          ? nullptr
       1*: 5505:          : internal::posix::GetEnv("TEST_PREMATURE_EXIT_FILE"));
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 5505-block  0
        1: 5505-block  1
call    2 returned 1
        1: 5505-block  2
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        -: 5506:#else
        -: 5507:  const bool in_death_test_child_process = false;
        -: 5508:#endif  // GTEST_HAS_DEATH_TEST
        -: 5509:
        -: 5510:  // Captures the value of GTEST_FLAG(catch_exceptions).  This value will be
        -: 5511:  // used for the duration of the program.
        1: 5512:  impl()->set_catch_exceptions(GTEST_FLAG_GET(catch_exceptions));
        1: 5512-block  0
call    0 returned 1
call    1 returned 1
        -: 5513:
        -: 5514:#ifdef GTEST_OS_WINDOWS
        -: 5515:  // Either the user wants Google Test to catch exceptions thrown by the
        -: 5516:  // tests or this is executing in the context of death test child
        -: 5517:  // process. In either case the user does not want to see pop-up dialogs
        -: 5518:  // about crashes - they are expected.
        -: 5519:  if (impl()->catch_exceptions() || in_death_test_child_process) {
        -: 5520:#if !defined(GTEST_OS_WINDOWS_MOBILE) && !defined(GTEST_OS_WINDOWS_PHONE) && \
        -: 5521:    !defined(GTEST_OS_WINDOWS_RT) && !defined(GTEST_OS_WINDOWS_GAMES)
        -: 5522:    // SetErrorMode doesn't exist on CE.
        -: 5523:    SetErrorMode(SEM_FAILCRITICALERRORS | SEM_NOALIGNMENTFAULTEXCEPT |
        -: 5524:                 SEM_NOGPFAULTERRORBOX | SEM_NOOPENFILEERRORBOX);
        -: 5525:#endif  // !GTEST_OS_WINDOWS_MOBILE
        -: 5526:
        -: 5527:#if (defined(_MSC_VER) || defined(GTEST_OS_WINDOWS_MINGW)) && \
        -: 5528:    !defined(GTEST_OS_WINDOWS_MOBILE)
        -: 5529:    // Death test children can be terminated with _abort().  On Windows,
        -: 5530:    // _abort() can show a dialog with a warning message.  This forces the
        -: 5531:    // abort message to go to stderr instead.
        -: 5532:    _set_error_mode(_OUT_TO_STDERR);
        -: 5533:#endif
        -: 5534:
        -: 5535:#if defined(_MSC_VER) && !defined(GTEST_OS_WINDOWS_MOBILE)
        -: 5536:    // In the debug version, Visual Studio pops up a separate dialog
        -: 5537:    // offering a choice to debug the aborted program. We need to suppress
        -: 5538:    // this dialog or it will pop up for every EXPECT/ASSERT_DEATH statement
        -: 5539:    // executed. Google Test will notify the user of any unexpected
        -: 5540:    // failure via stderr.
        -: 5541:    if (!GTEST_FLAG_GET(break_on_failure))
        -: 5542:      _set_abort_behavior(
        -: 5543:          0x0,                                    // Clear the following flags:
        -: 5544:          _WRITE_ABORT_MSG | _CALL_REPORTFAULT);  // pop-up window, core dump.
        -: 5545:
        -: 5546:    // In debug mode, the Windows CRT can crash with an assertion over invalid
        -: 5547:    // input (e.g. passing an invalid file descriptor).  The default handling
        -: 5548:    // for these assertions is to pop up a dialog and wait for user input.
        -: 5549:    // Instead ask the CRT to dump such assertions to stderr non-interactively.
        -: 5550:    if (!IsDebuggerPresent()) {
        -: 5551:      (void)_CrtSetReportMode(_CRT_ASSERT,
        -: 5552:                              _CRTDBG_MODE_FILE | _CRTDBG_MODE_DEBUG);
        -: 5553:      (void)_CrtSetReportFile(_CRT_ASSERT, _CRTDBG_FILE_STDERR);
        -: 5554:    }
        -: 5555:#endif
        -: 5556:  }
        -: 5557:#else
        -: 5558:  (void)in_death_test_child_process;  // Needed inside the #if block above
        -: 5559:#endif  // GTEST_OS_WINDOWS
        -: 5560:
        1: 5561:  return internal::HandleExceptionsInMethodIfSupported(
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        -: 5562:             impl(), &internal::UnitTestImpl::RunAllTests,
        -: 5563:             "auxiliary test code (environments or event listeners)")
       1*: 5564:             ? 0
        1: 5564-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 5564-block  1
    %%%%%: 5564-block  2
        1: 5565:             : 1;
        1: 5565-block  0
        1: 5566:}
        1: 5566-block  0
call    0 returned 1
    $$$$$: 5566-block  1
call    1 never executed
        -: 5567:
        -: 5568:#if GTEST_HAS_FILE_SYSTEM
        -: 5569:// Returns the working directory when the first TEST() or TEST_F() was
        -: 5570:// executed.
function _ZNK7testing8UnitTest20original_working_dirEv called 0 returned 0% blocks executed 0%
    #####: 5571:const char* UnitTest::original_working_dir() const {
    #####: 5572:  return impl_->original_working_dir_.c_str();
    %%%%%: 5572-block  0
call    0 never executed
        -: 5573:}
        -: 5574:#endif  // GTEST_HAS_FILE_SYSTEM
        -: 5575:
        -: 5576:// Returns the TestSuite object for the test that's currently running,
        -: 5577:// or NULL if no test is running.
function _ZNK7testing8UnitTest18current_test_suiteEv called 0 returned 0% blocks executed 0%
    #####: 5578:const TestSuite* UnitTest::current_test_suite() const
        -: 5579:    GTEST_LOCK_EXCLUDED_(mutex_) {
    #####: 5580:  internal::MutexLock lock(&mutex_);
    %%%%%: 5580-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5581:  return impl_->current_test_suite();
    %%%%%: 5581-block  0
call    0 never executed
    %%%%%: 5581-block  1
    #####: 5582:}
call    0 never executed
        -: 5583:
        -: 5584:// Legacy API is still available but deprecated
        -: 5585:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZNK7testing8UnitTest17current_test_caseEv called 0 returned 0% blocks executed 0%
    #####: 5586:const TestCase* UnitTest::current_test_case() const
        -: 5587:    GTEST_LOCK_EXCLUDED_(mutex_) {
    #####: 5588:  internal::MutexLock lock(&mutex_);
    %%%%%: 5588-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5589:  return impl_->current_test_suite();
    %%%%%: 5589-block  0
call    0 never executed
    %%%%%: 5589-block  1
    #####: 5590:}
call    0 never executed
        -: 5591:#endif
        -: 5592:
        -: 5593:// Returns the TestInfo object for the test that's currently running,
        -: 5594:// or NULL if no test is running.
function _ZNK7testing8UnitTest17current_test_infoEv called 0 returned 0% blocks executed 0%
    #####: 5595:const TestInfo* UnitTest::current_test_info() const
        -: 5596:    GTEST_LOCK_EXCLUDED_(mutex_) {
    #####: 5597:  internal::MutexLock lock(&mutex_);
    %%%%%: 5597-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5598:  return impl_->current_test_info();
    %%%%%: 5598-block  0
call    0 never executed
    %%%%%: 5598-block  1
    #####: 5599:}
call    0 never executed
        -: 5600:
        -: 5601:// Returns the random seed used at the start of the current test run.
function _ZNK7testing8UnitTest11random_seedEv called 0 returned 0% blocks executed 0%
    #####: 5602:int UnitTest::random_seed() const { return impl_->random_seed(); }
    %%%%%: 5602-block  0
call    0 never executed
        -: 5603:
        -: 5604:// Returns ParameterizedTestSuiteRegistry object used to keep track of
        -: 5605:// value-parameterized tests and instantiate and register them.
        -: 5606:internal::ParameterizedTestSuiteRegistry&
function _ZN7testing8UnitTest27parameterized_test_registryEv called 0 returned 0% blocks executed 0%
    #####: 5607:UnitTest::parameterized_test_registry() GTEST_LOCK_EXCLUDED_(mutex_) {
    #####: 5608:  return impl_->parameterized_test_registry();
    %%%%%: 5608-block  0
call    0 never executed
        -: 5609:}
        -: 5610:
        -: 5611:// Creates an empty UnitTest.
       1*: 5612:UnitTest::UnitTest() { impl_ = new internal::UnitTestImpl(this); }
------------------
_ZN7testing8UnitTestC1Ev:
function _ZN7testing8UnitTestC1Ev called 1 returned 100% blocks executed 56%
        1: 5612:UnitTest::UnitTest() { impl_ = new internal::UnitTestImpl(this); }
        1: 5612-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 5612-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1: 5612-block  2
    $$$$$: 5612-block  3
branch  7 never executed
branch  8 never executed
    $$$$$: 5612-block  4
call    9 never executed
    $$$$$: 5612-block  5
call   10 never executed
------------------
_ZN7testing8UnitTestC2Ev:
function _ZN7testing8UnitTestC2Ev called 0 returned 0% blocks executed 0%
    #####: 5612:UnitTest::UnitTest() { impl_ = new internal::UnitTestImpl(this); }
    %%%%%: 5612-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 5612-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 5612-block  2
    $$$$$: 5612-block  3
branch  7 never executed
branch  8 never executed
    $$$$$: 5612-block  4
call    9 never executed
    $$$$$: 5612-block  5
call   10 never executed
------------------
        -: 5613:
        -: 5614:// Destructor of UnitTest.
    #####: 5615:UnitTest::~UnitTest() { delete impl_; }
------------------
_ZN7testing8UnitTestD0Ev:
function _ZN7testing8UnitTestD0Ev called 0 returned 0% blocks executed 0%
    #####: 5615:UnitTest::~UnitTest() { delete impl_; }
    %%%%%: 5615-block  0
call    0 never executed
call    1 never executed
------------------
_ZN7testing8UnitTestD1Ev:
function _ZN7testing8UnitTestD1Ev called 0 returned 0% blocks executed 0%
    #####: 5615:UnitTest::~UnitTest() { delete impl_; }
    %%%%%: 5615-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 5615-block  1
call    2 never executed
    %%%%%: 5615-block  2
call    3 never executed
------------------
_ZN7testing8UnitTestD2Ev:
function _ZN7testing8UnitTestD2Ev called 0 returned 0% blocks executed 0%
    #####: 5615:UnitTest::~UnitTest() { delete impl_; }
    %%%%%: 5615-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 5615-block  1
call    2 never executed
    %%%%%: 5615-block  2
call    3 never executed
------------------
        -: 5616:
        -: 5617:// Pushes a trace defined by SCOPED_TRACE() on to the per-thread
        -: 5618:// Google Test trace stack.
function _ZN7testing8UnitTest14PushGTestTraceERKNS_8internal9TraceInfoE called 0 returned 0% blocks executed 0%
    #####: 5619:void UnitTest::PushGTestTrace(const internal::TraceInfo& trace)
        -: 5620:    GTEST_LOCK_EXCLUDED_(mutex_) {
    #####: 5621:  internal::MutexLock lock(&mutex_);
    %%%%%: 5621-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5622:  impl_->gtest_trace_stack().push_back(trace);
    %%%%%: 5622-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5622-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 5623:}
    %%%%%: 5623-block  0
call    0 never executed
    $$$$$: 5623-block  1
call    1 never executed
        -: 5624:
        -: 5625:// Pops a trace from the per-thread Google Test trace stack.
function _ZN7testing8UnitTest13PopGTestTraceEv called 0 returned 0% blocks executed 0%
    #####: 5626:void UnitTest::PopGTestTrace() GTEST_LOCK_EXCLUDED_(mutex_) {
    #####: 5627:  internal::MutexLock lock(&mutex_);
    %%%%%: 5627-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5628:  impl_->gtest_trace_stack().pop_back();
    %%%%%: 5628-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5628-block  1
call    3 never executed
    #####: 5629:}
call    0 never executed
    $$$$$: 5629-block  0
call    1 never executed
        -: 5630:
        -: 5631:namespace internal {
        -: 5632:
       1*: 5633:UnitTestImpl::UnitTestImpl(UnitTest* parent)
       1*: 5634:    : parent_(parent),
        -: 5635:      GTEST_DISABLE_MSC_WARNINGS_PUSH_(4355 /* using this in initializer */)
       1*: 5636:          default_global_test_part_result_reporter_(this),
       1*: 5637:      default_per_thread_test_part_result_reporter_(this),
       1*: 5638:      GTEST_DISABLE_MSC_WARNINGS_POP_() global_test_part_result_reporter_(
        -: 5639:          &default_global_test_part_result_reporter_),
       1*: 5640:      per_thread_test_part_result_reporter_(
        -: 5641:          &default_per_thread_test_part_result_reporter_),
       1*: 5642:      parameterized_test_registry_(),
       1*: 5643:      parameterized_tests_registered_(false),
       1*: 5644:      last_death_test_suite_(-1),
       1*: 5645:      current_test_suite_(nullptr),
       1*: 5646:      current_test_info_(nullptr),
       1*: 5647:      ad_hoc_test_result_(),
       1*: 5648:      os_stack_trace_getter_(nullptr),
       1*: 5649:      post_flag_parse_init_performed_(false),
       1*: 5650:      random_seed_(0),  // Will be overridden by the flag before first use.
       1*: 5651:      random_(0),       // Will be reseeded before first use.
       1*: 5652:      start_timestamp_(0),
       1*: 5653:      elapsed_time_(0),
        -: 5654:#ifdef GTEST_HAS_DEATH_TEST
       1*: 5655:      death_test_factory_(new DefaultDeathTestFactory),
        -: 5656:#endif
        -: 5657:      // Will be overridden by the flag before first use.
       7*: 5658:      catch_exceptions_(false) {
       1*: 5659:  listeners()->SetDefaultResultPrinter(new PrettyUnitTestResultPrinter);
       1*: 5660:}
------------------
_ZN7testing8internal12UnitTestImplC1EPNS_8UnitTestE:
function _ZN7testing8internal12UnitTestImplC1EPNS_8UnitTestE called 1 returned 100% blocks executed 41%
        1: 5633:UnitTestImpl::UnitTestImpl(UnitTest* parent)
        1: 5634:    : parent_(parent),
        -: 5635:      GTEST_DISABLE_MSC_WARNINGS_PUSH_(4355 /* using this in initializer */)
        1: 5636:          default_global_test_part_result_reporter_(this),
call    0 returned 1
        1: 5637:      default_per_thread_test_part_result_reporter_(this),
call    0 returned 1
        1: 5638:      GTEST_DISABLE_MSC_WARNINGS_POP_() global_test_part_result_reporter_(
        -: 5639:          &default_global_test_part_result_reporter_),
        1: 5640:      per_thread_test_part_result_reporter_(
        1: 5640-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
    $$$$$: 5640-block  1
        -: 5641:          &default_per_thread_test_part_result_reporter_),
        1: 5642:      parameterized_test_registry_(),
call    0 returned 1
        1: 5643:      parameterized_tests_registered_(false),
        1: 5644:      last_death_test_suite_(-1),
        1: 5645:      current_test_suite_(nullptr),
        1: 5646:      current_test_info_(nullptr),
        1: 5647:      ad_hoc_test_result_(),
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 5648:      os_stack_trace_getter_(nullptr),
        1: 5649:      post_flag_parse_init_performed_(false),
        1: 5650:      random_seed_(0),  // Will be overridden by the flag before first use.
        1: 5651:      random_(0),       // Will be reseeded before first use.
        1: 5651-block  0
call    0 returned 1
        1: 5652:      start_timestamp_(0),
        1: 5653:      elapsed_time_(0),
        -: 5654:#ifdef GTEST_HAS_DEATH_TEST
        1: 5655:      death_test_factory_(new DefaultDeathTestFactory),
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 5655-block  0
call    3 returned 1
call    4 returned 1
        -: 5656:#endif
        -: 5657:      // Will be overridden by the flag before first use.
        7: 5658:      catch_exceptions_(false) {
        1: 5658-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 5658-block  1
call    4 returned 1
call    5 returned 1
call    6 returned 1
call    7 returned 1
call    8 returned 1
call    9 returned 1
        1: 5658-block  2
call   10 returned 1
branch 11 taken 1 (fallthrough)
branch 12 taken 0 (throw)
call   13 returned 1
call   14 returned 1
branch 15 taken 1 (fallthrough)
branch 16 taken 0 (throw)
        1: 5659:  listeners()->SetDefaultResultPrinter(new PrettyUnitTestResultPrinter);
        1: 5659-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 5659-block  1
call    4 returned 1
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
    $$$$$: 5659-block  2
branch  8 never executed
branch  9 never executed
    $$$$$: 5659-block  3
call   10 never executed
        1: 5660:}
        1: 5660-block  0
    $$$$$: 5660-block  1
call    0 never executed
    $$$$$: 5660-block  2
call    1 never executed
    $$$$$: 5660-block  3
call    2 never executed
    $$$$$: 5660-block  4
call    3 never executed
    $$$$$: 5660-block  5
call    4 never executed
    $$$$$: 5660-block  6
call    5 never executed
    $$$$$: 5660-block  7
call    6 never executed
    $$$$$: 5660-block  8
call    7 never executed
    $$$$$: 5660-block  9
call    8 never executed
    $$$$$: 5660-block 10
call    9 never executed
    $$$$$: 5660-block 11
call   10 never executed
    $$$$$: 5660-block 12
call   11 never executed
    $$$$$: 5660-block 13
call   12 never executed
    $$$$$: 5660-block 14
call   13 never executed
    $$$$$: 5660-block 15
call   14 never executed
    $$$$$: 5660-block 16
call   15 never executed
    $$$$$: 5660-block 17
call   16 never executed
------------------
_ZN7testing8internal12UnitTestImplC2EPNS_8UnitTestE:
function _ZN7testing8internal12UnitTestImplC2EPNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 5633:UnitTestImpl::UnitTestImpl(UnitTest* parent)
    #####: 5634:    : parent_(parent),
        -: 5635:      GTEST_DISABLE_MSC_WARNINGS_PUSH_(4355 /* using this in initializer */)
    #####: 5636:          default_global_test_part_result_reporter_(this),
call    0 never executed
    #####: 5637:      default_per_thread_test_part_result_reporter_(this),
call    0 never executed
    #####: 5638:      GTEST_DISABLE_MSC_WARNINGS_POP_() global_test_part_result_reporter_(
        -: 5639:          &default_global_test_part_result_reporter_),
    #####: 5640:      per_thread_test_part_result_reporter_(
    %%%%%: 5640-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 5640-block  1
        -: 5641:          &default_per_thread_test_part_result_reporter_),
    #####: 5642:      parameterized_test_registry_(),
call    0 never executed
    #####: 5643:      parameterized_tests_registered_(false),
    #####: 5644:      last_death_test_suite_(-1),
    #####: 5645:      current_test_suite_(nullptr),
    #####: 5646:      current_test_info_(nullptr),
    #####: 5647:      ad_hoc_test_result_(),
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5648:      os_stack_trace_getter_(nullptr),
    #####: 5649:      post_flag_parse_init_performed_(false),
    #####: 5650:      random_seed_(0),  // Will be overridden by the flag before first use.
    #####: 5651:      random_(0),       // Will be reseeded before first use.
    %%%%%: 5651-block  0
call    0 never executed
    #####: 5652:      start_timestamp_(0),
    #####: 5653:      elapsed_time_(0),
        -: 5654:#ifdef GTEST_HAS_DEATH_TEST
    #####: 5655:      death_test_factory_(new DefaultDeathTestFactory),
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5655-block  0
call    3 never executed
call    4 never executed
        -: 5656:#endif
        -: 5657:      // Will be overridden by the flag before first use.
    #####: 5658:      catch_exceptions_(false) {
    %%%%%: 5658-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 5658-block  1
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
    %%%%%: 5658-block  2
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
    #####: 5659:  listeners()->SetDefaultResultPrinter(new PrettyUnitTestResultPrinter);
    %%%%%: 5659-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 5659-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    $$$$$: 5659-block  2
branch  8 never executed
branch  9 never executed
    $$$$$: 5659-block  3
call   10 never executed
    #####: 5660:}
    %%%%%: 5660-block  0
    $$$$$: 5660-block  1
call    0 never executed
    $$$$$: 5660-block  2
call    1 never executed
    $$$$$: 5660-block  3
call    2 never executed
    $$$$$: 5660-block  4
call    3 never executed
    $$$$$: 5660-block  5
call    4 never executed
    $$$$$: 5660-block  6
call    5 never executed
    $$$$$: 5660-block  7
call    6 never executed
    $$$$$: 5660-block  8
call    7 never executed
    $$$$$: 5660-block  9
call    8 never executed
    $$$$$: 5660-block 10
call    9 never executed
    $$$$$: 5660-block 11
call   10 never executed
    $$$$$: 5660-block 12
call   11 never executed
    $$$$$: 5660-block 13
call   12 never executed
    $$$$$: 5660-block 14
call   13 never executed
    $$$$$: 5660-block 15
call   14 never executed
    $$$$$: 5660-block 16
call   15 never executed
    $$$$$: 5660-block 17
call   16 never executed
------------------
        -: 5661:
    #####: 5662:UnitTestImpl::~UnitTestImpl() {
        -: 5663:  // Deletes every TestSuite.
    #####: 5664:  ForEach(test_suites_, internal::Delete<TestSuite>);
        -: 5665:
        -: 5666:  // Deletes every Environment.
    #####: 5667:  ForEach(environments_, internal::Delete<Environment>);
        -: 5668:
    #####: 5669:  delete os_stack_trace_getter_;
    #####: 5670:}
------------------
_ZN7testing8internal12UnitTestImplD0Ev:
function _ZN7testing8internal12UnitTestImplD0Ev called 0 returned 0% blocks executed 0%
    #####: 5662:UnitTestImpl::~UnitTestImpl() {
        -: 5663:  // Deletes every TestSuite.
        -: 5664:  ForEach(test_suites_, internal::Delete<TestSuite>);
        -: 5665:
        -: 5666:  // Deletes every Environment.
        -: 5667:  ForEach(environments_, internal::Delete<Environment>);
        -: 5668:
        -: 5669:  delete os_stack_trace_getter_;
    #####: 5670:}
    %%%%%: 5670-block  0
call    0 never executed
call    1 never executed
------------------
_ZN7testing8internal12UnitTestImplD1Ev:
function _ZN7testing8internal12UnitTestImplD1Ev called 0 returned 0% blocks executed 0%
    #####: 5662:UnitTestImpl::~UnitTestImpl() {
        -: 5663:  // Deletes every TestSuite.
    #####: 5664:  ForEach(test_suites_, internal::Delete<TestSuite>);
    %%%%%: 5664-block  0
call    0 never executed
        -: 5665:
        -: 5666:  // Deletes every Environment.
    #####: 5667:  ForEach(environments_, internal::Delete<Environment>);
call    0 never executed
        -: 5668:
    #####: 5669:  delete os_stack_trace_getter_;
branch  0 never executed
branch  1 never executed
    %%%%%: 5669-block  0
call    2 never executed
    #####: 5670:}
    %%%%%: 5670-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
------------------
_ZN7testing8internal12UnitTestImplD2Ev:
function _ZN7testing8internal12UnitTestImplD2Ev called 0 returned 0% blocks executed 0%
    #####: 5662:UnitTestImpl::~UnitTestImpl() {
        -: 5663:  // Deletes every TestSuite.
    #####: 5664:  ForEach(test_suites_, internal::Delete<TestSuite>);
    %%%%%: 5664-block  0
call    0 never executed
        -: 5665:
        -: 5666:  // Deletes every Environment.
    #####: 5667:  ForEach(environments_, internal::Delete<Environment>);
call    0 never executed
        -: 5668:
    #####: 5669:  delete os_stack_trace_getter_;
branch  0 never executed
branch  1 never executed
    %%%%%: 5669-block  0
call    2 never executed
    #####: 5670:}
    %%%%%: 5670-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
------------------
        -: 5671:
        -: 5672:// Adds a TestProperty to the current TestResult object when invoked in a
        -: 5673:// context of a test, to current test suite's ad_hoc_test_result when invoke
        -: 5674:// from SetUpTestSuite/TearDownTestSuite, or to the global property set
        -: 5675:// otherwise.  If the result already contains a property with the same key,
        -: 5676:// the value will be updated.
function _ZN7testing8internal12UnitTestImpl14RecordPropertyERKNS_12TestPropertyE called 0 returned 0% blocks executed 0%
    #####: 5677:void UnitTestImpl::RecordProperty(const TestProperty& test_property) {
    #####: 5678:  std::string xml_element;
    %%%%%: 5678-block  0
call    0 never executed
        -: 5679:  TestResult* test_result;  // TestResult appropriate for property recording.
        -: 5680:
    #####: 5681:  if (current_test_info_ != nullptr) {
branch  0 never executed
branch  1 never executed
    #####: 5682:    xml_element = "testcase";
    %%%%%: 5682-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5683:    test_result = &(current_test_info_->result_);
    %%%%%: 5683-block  0
    #####: 5684:  } else if (current_test_suite_ != nullptr) {
    %%%%%: 5684-block  0
branch  0 never executed
branch  1 never executed
    #####: 5685:    xml_element = "testsuite";
    %%%%%: 5685-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5686:    test_result = &(current_test_suite_->ad_hoc_test_result_);
    %%%%%: 5686-block  0
        -: 5687:  } else {
    #####: 5688:    xml_element = "testsuites";
    %%%%%: 5688-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5689:    test_result = &ad_hoc_test_result_;
    %%%%%: 5689-block  0
        -: 5690:  }
    #####: 5691:  test_result->RecordProperty(xml_element, test_property);
    %%%%%: 5691-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5692:}
    %%%%%: 5692-block  0
call    0 never executed
    $$$$$: 5692-block  1
call    1 never executed
        -: 5693:
        -: 5694:#ifdef GTEST_HAS_DEATH_TEST
        -: 5695:// Disables event forwarding if the control is currently in a death test
        -: 5696:// subprocess. Must not be called before InitGoogleTest.
function _ZN7testing8internal12UnitTestImpl32SuppressTestEventsIfInSubprocessEv called 1 returned 100% blocks executed 60%
        1: 5697:void UnitTestImpl::SuppressTestEventsIfInSubprocess() {
        1: 5698:  if (internal_run_death_test_flag_ != nullptr)
        1: 5698-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####: 5699:    listeners()->SuppressEventForwarding(true);
    %%%%%: 5699-block  0
call    0 never executed
call    1 never executed
        1: 5700:}
        -: 5701:#endif  // GTEST_HAS_DEATH_TEST
        -: 5702:
        -: 5703:// Initializes event listeners performing XML output as specified by
        -: 5704:// UnitTestOptions. Must not be called before InitGoogleTest.
function _ZN7testing8internal12UnitTestImpl18ConfigureXmlOutputEv called 1 returned 100% blocks executed 20%
        1: 5705:void UnitTestImpl::ConfigureXmlOutput() {
        1: 5706:  const std::string& output_format = UnitTestOptions::GetOutputFormat();
        1: 5706-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 5707:#if GTEST_HAS_FILE_SYSTEM
        1: 5708:  if (output_format == "xml") {
        1: 5708-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####: 5709:    listeners()->SetDefaultXmlGenerator(new XmlUnitTestResultPrinter(
    %%%%%: 5709-block  0
call    0 never executed
    %%%%%: 5709-block  1
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 5709-block  2
branch  4 never executed
branch  5 never executed
    #####: 5710:        UnitTestOptions::GetAbsolutePathToOutputFile().c_str()));
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5710-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5710-block  1
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 5710-block  2
call   10 never executed
    $$$$$: 5710-block  3
call   11 never executed
    $$$$$: 5710-block  4
    $$$$$: 5710-block  5
call   12 never executed
        1: 5711:  } else if (output_format == "json") {
        1: 5711-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####: 5712:    listeners()->SetDefaultXmlGenerator(new JsonUnitTestResultPrinter(
    %%%%%: 5712-block  0
call    0 never executed
    %%%%%: 5712-block  1
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 5712-block  2
branch  4 never executed
branch  5 never executed
    #####: 5713:        UnitTestOptions::GetAbsolutePathToOutputFile().c_str()));
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5713-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5713-block  1
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 5713-block  2
call   10 never executed
    $$$$$: 5713-block  3
call   11 never executed
    $$$$$: 5713-block  4
    $$$$$: 5713-block  5
call   12 never executed
        1: 5714:  } else if (!output_format.empty()) {
        1: 5714-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####: 5715:    GTEST_LOG_(WARNING) << "WARNING: unrecognized output format \""
    %%%%%: 5715-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5715-block  1
call    3 never executed
    %%%%%: 5715-block  2
call    4 never executed
    $$$$$: 5715-block  3
call    5 never executed
    $$$$$: 5715-block  4
    #####: 5716:                        << output_format << "\" ignored.";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5716-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5716-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
        -: 5717:  }
        -: 5718:#else
        -: 5719:  if (!output_format.empty()) {
        -: 5720:    GTEST_LOG_(ERROR) << "ERROR: alternative output formats require "
        -: 5721:                      << "GTEST_HAS_FILE_SYSTEM to be enabled";
        -: 5722:  }
        -: 5723:#endif  // GTEST_HAS_FILE_SYSTEM
        1: 5724:}
        1: 5724-block  0
call    0 returned 1
    $$$$$: 5724-block  1
call    1 never executed
        -: 5725:
        -: 5726:#if GTEST_CAN_STREAM_RESULTS_
        -: 5727:// Initializes event listeners for streaming test results in string form.
        -: 5728:// Must not be called before InitGoogleTest.
function _ZN7testing8internal12UnitTestImpl24ConfigureStreamingOutputEv called 1 returned 100% blocks executed 12%
        1: 5729:void UnitTestImpl::ConfigureStreamingOutput() {
        1: 5730:  const std::string& target = GTEST_FLAG_GET(stream_result_to);
        1: 5731:  if (!target.empty()) {
        1: 5731-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####: 5732:    const size_t pos = target.find(':');
    %%%%%: 5732-block  0
call    0 never executed
    #####: 5733:    if (pos != std::string::npos) {
branch  0 never executed
branch  1 never executed
    #####: 5734:      listeners()->Append(
    %%%%%: 5734-block  0
call    0 never executed
    %%%%%: 5734-block  1
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 5734-block  2
branch  4 never executed
branch  5 never executed
    #####: 5735:          new StreamingListener(target.substr(0, pos), target.substr(pos + 1)));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 5735-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 5735-block  1
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 5735-block  2
call   10 never executed
call   11 never executed
    $$$$$: 5735-block  3
call   12 never executed
    $$$$$: 5735-block  4
    $$$$$: 5735-block  5
call   13 never executed
    $$$$$: 5735-block  6
    $$$$$: 5735-block  7
call   14 never executed
        -: 5736:    } else {
    #####: 5737:      GTEST_LOG_(WARNING) << "unrecognized streaming target \"" << target
    %%%%%: 5737-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5737-block  1
call    3 never executed
    %%%%%: 5737-block  2
call    4 never executed
    $$$$$: 5737-block  3
call    5 never executed
    #####: 5738:                          << "\" ignored.";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5738-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5738-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
        -: 5739:    }
        -: 5740:  }
        1: 5741:}
        1: 5741-block  0
        -: 5742:#endif  // GTEST_CAN_STREAM_RESULTS_
        -: 5743:
        -: 5744:// Performs initialization dependent upon flag values obtained in
        -: 5745:// ParseGoogleTestFlagsOnly.  Is called from InitGoogleTest after the call to
        -: 5746:// ParseGoogleTestFlagsOnly.  In case a user neglects to call InitGoogleTest
        -: 5747:// this function is also called from RunAllTests.  Since this function can be
        -: 5748:// called more than once, it has to be idempotent.
function _ZN7testing8internal12UnitTestImpl19PostFlagParsingInitEv called 2 returned 100% blocks executed 60%
        2: 5749:void UnitTestImpl::PostFlagParsingInit() {
        -: 5750:  // Ensures that this function does not execute more than once.
        2: 5751:  if (!post_flag_parse_init_performed_) {
        2: 5751-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1: 5752:    post_flag_parse_init_performed_ = true;
        -: 5753:
        -: 5754:#if defined(GTEST_CUSTOM_TEST_EVENT_LISTENER_)
        -: 5755:    // Register to send notifications about key process state changes.
        -: 5756:    listeners()->Append(new GTEST_CUSTOM_TEST_EVENT_LISTENER_());
        -: 5757:#endif  // defined(GTEST_CUSTOM_TEST_EVENT_LISTENER_)
        -: 5758:
        -: 5759:#ifdef GTEST_HAS_DEATH_TEST
        1: 5760:    InitDeathTestSubprocessControlInfo();
        1: 5760-block  0
call    0 returned 1
        1: 5761:    SuppressTestEventsIfInSubprocess();
call    0 returned 1
        -: 5762:#endif  // GTEST_HAS_DEATH_TEST
        -: 5763:
        -: 5764:    // Registers parameterized tests. This makes parameterized tests
        -: 5765:    // available to the UnitTest reflection API without running
        -: 5766:    // RUN_ALL_TESTS.
        1: 5767:    RegisterParameterizedTests();
call    0 returned 1
        -: 5768:
        -: 5769:    // Configures listeners for XML output. This makes it possible for users
        -: 5770:    // to shut down the default XML output before invoking RUN_ALL_TESTS.
        1: 5771:    ConfigureXmlOutput();
call    0 returned 1
        -: 5772:
        1: 5773:    if (GTEST_FLAG_GET(brief)) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 5774:      listeners()->SetDefaultResultPrinter(new BriefUnitTestResultPrinter);
    %%%%%: 5774-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 5774-block  1
branch  6 never executed
branch  7 never executed
    $$$$$: 5774-block  2
call    8 never executed
        -: 5775:    }
        -: 5776:
        -: 5777:#if GTEST_CAN_STREAM_RESULTS_
        -: 5778:    // Configures listeners for streaming test results to the specified server.
        1: 5779:    ConfigureStreamingOutput();
        1: 5779-block  0
call    0 returned 1
        -: 5780:#endif  // GTEST_CAN_STREAM_RESULTS_
        -: 5781:
        -: 5782:#ifdef GTEST_HAS_ABSL
        -: 5783:    if (GTEST_FLAG_GET(install_failure_signal_handler)) {
        -: 5784:      absl::FailureSignalHandlerOptions options;
        -: 5785:      absl::InstallFailureSignalHandler(options);
        -: 5786:    }
        -: 5787:#endif  // GTEST_HAS_ABSL
        -: 5788:  }
        2: 5789:}
        2: 5789-block  0
        -: 5790:
        -: 5791:// Finds and returns a TestSuite with the given name.  If one doesn't
        -: 5792:// exist, creates one and returns it.  It's the CALLER'S
        -: 5793:// RESPONSIBILITY to ensure that this function is only called WHEN THE
        -: 5794:// TESTS ARE NOT SHUFFLED.
        -: 5795://
        -: 5796:// Arguments:
        -: 5797://
        -: 5798://   test_suite_name: name of the test suite
        -: 5799://   type_param:      the name of the test suite's type parameter, or NULL if
        -: 5800://                    this is not a typed or a type-parameterized test suite.
        -: 5801://   set_up_tc:       pointer to the function that sets up the test suite
        -: 5802://   tear_down_tc:    pointer to the function that tears down the test suite
function _ZN7testing8internal12UnitTestImpl12GetTestSuiteERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKcPFvvESD_ called 1 returned 100% blocks executed 45%
        1: 5803:TestSuite* UnitTestImpl::GetTestSuite(
        -: 5804:    const std::string& test_suite_name, const char* type_param,
        -: 5805:    internal::SetUpTestSuiteFunc set_up_tc,
        -: 5806:    internal::TearDownTestSuiteFunc tear_down_tc) {
        -: 5807:  // During initialization, all TestInfos for a given suite are added in
        -: 5808:  // sequence. To optimize this case, see if the most recently added suite is
        -: 5809:  // the one being requested now.
       1*: 5810:  if (!test_suites_.empty() &&
        1: 5810-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
branch  3 never executed
branch  4 never executed
    %%%%%: 5810-block  1
        1: 5810-block  2
       1*: 5811:      (*test_suites_.rbegin())->name_ == test_suite_name) {
    %%%%%: 5811-block  0
call    0 never executed
call    1 never executed
call    2 never executed
        1: 5811-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    #####: 5812:    return *test_suites_.rbegin();
    %%%%%: 5812-block  0
call    0 never executed
call    1 never executed
        -: 5813:  }
        -: 5814:
        -: 5815:  // Fall back to searching the collection.
        1: 5816:  auto item_it = test_suites_by_name_.find(test_suite_name);
        1: 5816-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 5817:  if (item_it != test_suites_by_name_.end()) {
        1: 5817-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    #####: 5818:    return item_it->second;
    %%%%%: 5818-block  0
call    0 never executed
        -: 5819:  }
        -: 5820:
        -: 5821:  // Not found. Create a new instance.
        -: 5822:  auto* const new_test_suite =
        1: 5823:      new TestSuite(test_suite_name, type_param, set_up_tc, tear_down_tc);
        1: 5823-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 5823-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
    $$$$$: 5823-block  2
branch  6 never executed
branch  7 never executed
    $$$$$: 5823-block  3
call    8 never executed
        1: 5824:  test_suites_by_name_.emplace(test_suite_name, new_test_suite);
        1: 5824-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 5825:
        1: 5826:  const UnitTestFilter death_test_suite_filter(kDeathTestSuiteFilter);
        1: 5826-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 5826-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1: 5826-block  2
call    7 returned 1
call    8 returned 1
    $$$$$: 5826-block  3
call    9 never executed
    $$$$$: 5826-block  4
call   10 never executed
    $$$$$: 5826-block  5
    $$$$$: 5826-block  6
        -: 5827:  // Is this a death test suite?
        1: 5828:  if (death_test_suite_filter.MatchesName(test_suite_name)) {
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 5828-block  0
branch  3 taken 0 (fallthrough)
branch  4 taken 1
        -: 5829:    // Yes.  Inserts the test suite after the last death test suite
        -: 5830:    // defined so far.  This only works when the test suites haven't
        -: 5831:    // been shuffled.  Otherwise we may end up running a death test
        -: 5832:    // after a non-death test.
    #####: 5833:    ++last_death_test_suite_;
    #####: 5834:    test_suites_.insert(test_suites_.begin() + last_death_test_suite_,
    %%%%%: 5834-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5834-block  1
    $$$$$: 5834-block  2
    $$$$$: 5834-block  3
    $$$$$: 5834-block  4
        -: 5835:                        new_test_suite);
        -: 5836:  } else {
        -: 5837:    // No.  Appends to the end of the list.
        1: 5838:    test_suites_.push_back(new_test_suite);
        1: 5838-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 5839:  }
        -: 5840:
        1: 5841:  test_suite_indices_.push_back(static_cast<int>(test_suite_indices_.size()));
        1: 5841-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
    $$$$$: 5841-block  1
        1: 5842:  return new_test_suite;
        1: 5843:}
        1: 5843-block  0
call    0 returned 1
    $$$$$: 5843-block  1
call    1 never executed
        -: 5844:
        -: 5845:// Helpers for setting up / tearing down the given environment.  They
        -: 5846:// are for use in the ForEach() function.
function _ZN7testing8internalL16SetUpEnvironmentEPNS_11EnvironmentE called 0 returned 0% blocks executed 0%
    #####: 5847:static void SetUpEnvironment(Environment* env) { env->SetUp(); }
    %%%%%: 5847-block  0
call    0 never executed
function _ZN7testing8internalL19TearDownEnvironmentEPNS_11EnvironmentE called 0 returned 0% blocks executed 0%
    #####: 5848:static void TearDownEnvironment(Environment* env) { env->TearDown(); }
    %%%%%: 5848-block  0
call    0 never executed
        -: 5849:
        -: 5850:// Runs all tests in this UnitTest object, prints the result, and
        -: 5851:// returns true if all tests are successful.  If any exception is
        -: 5852:// thrown during a test, the test is considered to be failed, but the
        -: 5853:// rest of the tests will still be run.
        -: 5854://
        -: 5855:// When parameterized tests are enabled, it expands and registers
        -: 5856:// parameterized tests first in RegisterParameterizedTests().
        -: 5857:// All other functions called from RunAllTests() may safely assume that
        -: 5858:// parameterized tests are ready to be counted and run.
function _ZN7testing8internal12UnitTestImpl11RunAllTestsEv called 1 returned 100% blocks executed 34%
        1: 5859:bool UnitTestImpl::RunAllTests() {
        -: 5860:  // True if and only if Google Test is initialized before RUN_ALL_TESTS() is
        -: 5861:  // called.
        1: 5862:  const bool gtest_is_initialized_before_run_all_tests = GTestIsInitialized();
        1: 5862-block  0
call    0 returned 1
        -: 5863:
        -: 5864:  // Do not run any test if the --help flag was specified.
       1*: 5865:  if (g_help_flag) return true;
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 5865-block  0
        -: 5866:
        -: 5867:  // Repeats the call to the post-flag parsing initialization in case the
        -: 5868:  // user didn't call InitGoogleTest.
        1: 5869:  PostFlagParsingInit();
        1: 5869-block  0
call    0 returned 1
        -: 5870:
        -: 5871:#if GTEST_HAS_FILE_SYSTEM
        -: 5872:  // Even if sharding is not on, test runners may want to use the
        -: 5873:  // GTEST_SHARD_STATUS_FILE to query whether the test supports the sharding
        -: 5874:  // protocol.
        1: 5875:  internal::WriteToShardStatusFileIfNeeded();
call    0 returned 1
        -: 5876:#endif  // GTEST_HAS_FILE_SYSTEM
        -: 5877:
        -: 5878:  // True if and only if we are in a subprocess for running a thread-safe-style
        -: 5879:  // death test.
        1: 5880:  bool in_subprocess_for_death_test = false;
        -: 5881:
        -: 5882:#ifdef GTEST_HAS_DEATH_TEST
        1: 5883:  in_subprocess_for_death_test = (internal_run_death_test_flag_ != nullptr);
call    0 returned 1
        -: 5884:#if defined(GTEST_EXTRA_DEATH_TEST_CHILD_SETUP_)
        -: 5885:  if (in_subprocess_for_death_test) {
        -: 5886:    GTEST_EXTRA_DEATH_TEST_CHILD_SETUP_();
        -: 5887:  }
        -: 5888:#endif  // defined(GTEST_EXTRA_DEATH_TEST_CHILD_SETUP_)
        -: 5889:#endif  // GTEST_HAS_DEATH_TEST
        -: 5890:
        1: 5891:  const bool should_shard = ShouldShard(kTestTotalShards, kTestShardIndex,
call    0 returned 1
        -: 5892:                                        in_subprocess_for_death_test);
        -: 5893:
        -: 5894:  // Compares the full test names with the filter to decide which
        -: 5895:  // tests to run.
        -: 5896:  const bool has_tests_to_run =
       1*: 5897:      FilterTests(should_shard ? HONOR_SHARDING_PROTOCOL
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 5897-block  0
        1: 5897-block  1
        1: 5897-block  2
call    2 returned 1
        1: 5898:                               : IGNORE_SHARDING_PROTOCOL) > 0;
        -: 5899:
        -: 5900:  // Lists the tests and exits if the --gtest_list_tests flag was specified.
        1: 5901:  if (GTEST_FLAG_GET(list_tests)) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -: 5902:    // This must be called *after* FilterTests() has been called.
    #####: 5903:    ListTestsMatchingFilter();
    %%%%%: 5903-block  0
call    0 never executed
    #####: 5904:    return true;
        -: 5905:  }
        -: 5906:
        1: 5907:  random_seed_ = GetRandomSeedFromFlag(GTEST_FLAG_GET(random_seed));
        1: 5907-block  0
call    0 returned 1
        -: 5908:
        -: 5909:  // True if and only if at least one test has failed.
        1: 5910:  bool failed = false;
        -: 5911:
        1: 5912:  TestEventListener* repeater = listeners()->repeater();
call    0 returned 1
call    1 returned 1
        -: 5913:
        1: 5914:  start_timestamp_ = GetTimeInMillis();
call    0 returned 1
        1: 5915:  repeater->OnTestProgramStart(*parent_);
call    0 returned 1
        -: 5916:
        -: 5917:  // How many times to repeat the tests?  We don't want to repeat them
        -: 5918:  // when we are inside the subprocess of a death test.
       1*: 5919:  const int repeat = in_subprocess_for_death_test ? 1 : GTEST_FLAG_GET(repeat);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 5919-block  0
        1: 5919-block  1
        -: 5920:
        -: 5921:  // Repeats forever if the repeat count is negative.
        1: 5922:  const bool gtest_repeat_forever = repeat < 0;
        -: 5923:
        -: 5924:  // Should test environments be set up and torn down for each repeat, or only
        -: 5925:  // set up on the first and torn down on the last iteration? If there is no
        -: 5926:  // "last" iteration because the tests will repeat forever, always recreate the
        -: 5927:  // environments to avoid leaks in case one of the environments is using
        -: 5928:  // resources that are external to this process. Without this check there would
        -: 5929:  // be no way to clean up those external resources automatically.
        1: 5930:  const bool recreate_environments_when_repeating =
       1*: 5931:      GTEST_FLAG_GET(recreate_environments_when_repeating) ||
        1: 5931-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 5931-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    %%%%%: 5931-block  2
        1: 5931-block  3
        -: 5932:      gtest_repeat_forever;
        -: 5933:
        2: 5934:  for (int i = 0; gtest_repeat_forever || i != repeat; i++) {
        1: 5934-block  0
        1: 5934-block  1
        2: 5934-block  2
branch  0 taken 0
branch  1 taken 2 (fallthrough)
        2: 5934-block  3
branch  2 taken 1
branch  3 taken 1 (fallthrough)
        -: 5935:    // We want to preserve failures generated by ad-hoc test
        -: 5936:    // assertions executed before RUN_ALL_TESTS().
        1: 5937:    ClearNonAdHocTestResult();
        1: 5937-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 5938:
        1: 5939:    Timer timer;
        1: 5939-block  0
call    0 returned 1
        -: 5940:
        -: 5941:    // Shuffles test suites and tests if requested.
       1*: 5942:    if (has_tests_to_run && GTEST_FLAG_GET(shuffle)) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 5942-block  0
branch  2 never executed
branch  3 never executed
    #####: 5943:      random()->Reseed(static_cast<uint32_t>(random_seed_));
    %%%%%: 5943-block  0
call    0 never executed
call    1 never executed
        -: 5944:      // This should be done before calling OnTestIterationStart(),
        -: 5945:      // such that a test event listener can see the actual test order
        -: 5946:      // in the event.
    #####: 5947:      ShuffleTests();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 5948:    }
        -: 5949:
        -: 5950:    // Tells the unit test event listeners that the tests are about to start.
        1: 5951:    repeater->OnTestIterationStart(*parent_, i);
        1: 5951-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 5952:
        -: 5953:    // Runs each test suite if there is at least one test to run.
        1: 5954:    if (has_tests_to_run) {
        1: 5954-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -: 5955:      // Sets up all environments beforehand. If test environments aren't
        -: 5956:      // recreated for each iteration, only do so on the first iteration.
    #####: 5957:      if (i == 0 || recreate_environments_when_repeating) {
    %%%%%: 5957-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 5957-block  1
branch  2 never executed
branch  3 never executed
    #####: 5958:        repeater->OnEnvironmentsSetUpStart(*parent_);
    %%%%%: 5958-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5959:        ForEach(environments_, SetUpEnvironment);
    %%%%%: 5959-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5960:        repeater->OnEnvironmentsSetUpEnd(*parent_);
    %%%%%: 5960-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 5961:      }
        -: 5962:
        -: 5963:      // Runs the tests only if there was no fatal failure or skip triggered
        -: 5964:      // during global set-up.
    #####: 5965:      if (Test::IsSkipped()) {
    %%%%%: 5965-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5965-block  1
branch  3 never executed
branch  4 never executed
        -: 5966:        // Emit diagnostics when global set-up calls skip, as it will not be
        -: 5967:        // emitted by default.
        -: 5968:        TestResult& test_result =
    #####: 5969:            *internal::GetUnitTestImpl()->current_test_result();
    %%%%%: 5969-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5969-block  1
call    3 never executed
    #####: 5970:        for (int j = 0; j < test_result.total_part_count(); ++j) {
    %%%%%: 5970-block  0
    %%%%%: 5970-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 5971:          const TestPartResult& test_part_result =
    #####: 5972:              test_result.GetTestPartResult(j);
    %%%%%: 5972-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5973:          if (test_part_result.type() == TestPartResult::kSkip) {
    %%%%%: 5973-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5974:            const std::string& result = test_part_result.message();
    %%%%%: 5974-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 5974-block  1
call    5 never executed
    $$$$$: 5974-block  2
call    6 never executed
    $$$$$: 5974-block  3
    #####: 5975:            printf("%s\n", result.c_str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5976:          }
    %%%%%: 5976-block  0
call    0 never executed
    $$$$$: 5976-block  1
call    1 never executed
        -: 5977:        }
    #####: 5978:        fflush(stdout);
    %%%%%: 5978-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5979:      } else if (!Test::HasFatalFailure()) {
    %%%%%: 5979-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5979-block  1
branch  3 never executed
branch  4 never executed
    #####: 5980:        for (int test_index = 0; test_index < total_test_suite_count();
    %%%%%: 5980-block  0
    %%%%%: 5980-block  1
    %%%%%: 5980-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 5981:             test_index++) {
    #####: 5982:          GetMutableSuiteCase(test_index)->Run();
    %%%%%: 5982-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5982-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 5983:          if (GTEST_FLAG_GET(fail_fast) &&
    %%%%%: 5983-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 5983-block  1
    %%%%%: 5983-block  2
    %%%%%: 5983-block  3
branch  2 never executed
branch  3 never executed
    #####: 5984:              GetMutableSuiteCase(test_index)->Failed()) {
    %%%%%: 5984-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5984-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5984-block  2
branch  6 never executed
branch  7 never executed
    #####: 5985:            for (int j = test_index + 1; j < total_test_suite_count(); j++) {
    %%%%%: 5985-block  0
    %%%%%: 5985-block  1
    %%%%%: 5985-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5986:              GetMutableSuiteCase(j)->Skip();
    %%%%%: 5986-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5986-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 5987:            }
    #####: 5988:            break;
    %%%%%: 5988-block  0
        -: 5989:          }
        -: 5990:        }
    #####: 5991:      } else if (Test::HasFatalFailure()) {
    %%%%%: 5991-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5991-block  1
branch  3 never executed
branch  4 never executed
        -: 5992:        // If there was a fatal failure during the global setup then we know we
        -: 5993:        // aren't going to run any tests. Explicitly mark all of the tests as
        -: 5994:        // skipped to make this obvious in the output.
    #####: 5995:        for (int test_index = 0; test_index < total_test_suite_count();
    %%%%%: 5995-block  0
    %%%%%: 5995-block  1
    %%%%%: 5995-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 5996:             test_index++) {
    #####: 5997:          GetMutableSuiteCase(test_index)->Skip();
    %%%%%: 5997-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5997-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 5998:        }
        -: 5999:      }
        -: 6000:
        -: 6001:      // Tears down all environments in reverse order afterwards. If test
        -: 6002:      // environments aren't recreated for each iteration, only do so on the
        -: 6003:      // last iteration.
    #####: 6004:      if (i == repeat - 1 || recreate_environments_when_repeating) {
    %%%%%: 6004-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 6004-block  1
branch  2 never executed
branch  3 never executed
    #####: 6005:        repeater->OnEnvironmentsTearDownStart(*parent_);
    %%%%%: 6005-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6006:        std::for_each(environments_.rbegin(), environments_.rend(),
    %%%%%: 6006-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    $$$$$: 6006-block  1
    $$$$$: 6006-block  2
        -: 6007:                      TearDownEnvironment);
    #####: 6008:        repeater->OnEnvironmentsTearDownEnd(*parent_);
    %%%%%: 6008-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 6009:      }
        -: 6010:    }
        -: 6011:
        1: 6012:    elapsed_time_ = timer.Elapsed();
        1: 6012-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 6013:
        -: 6014:    // Tells the unit test event listener that the tests have just finished.
        1: 6015:    repeater->OnTestIterationEnd(*parent_, i);
        1: 6015-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 6016:
        -: 6017:    // Gets the result and clears it.
        1: 6018:    if (!Passed()) {
        1: 6018-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 6018-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    #####: 6019:      failed = true;
    %%%%%: 6019-block  0
        -: 6020:    }
        -: 6021:
        -: 6022:    // Restores the original test order after the iteration.  This
        -: 6023:    // allows the user to quickly repro a failure that happens in the
        -: 6024:    // N-th iteration without repeating the first (N - 1) iterations.
        -: 6025:    // This is not enclosed in "if (GTEST_FLAG(shuffle)) { ... }", in
        -: 6026:    // case the user somehow changes the value of the flag somewhere
        -: 6027:    // (it's always safe to unshuffle the tests).
        1: 6028:    UnshuffleTests();
        1: 6028-block  0
call    0 returned 1
        -: 6029:
        1: 6030:    if (GTEST_FLAG_GET(shuffle)) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -: 6031:      // Picks a new random seed for each iteration.
    #####: 6032:      random_seed_ = GetNextRandomSeed(random_seed_);
    %%%%%: 6032-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6032-block  1
        -: 6033:    }
        -: 6034:  }
        -: 6035:
        1: 6036:  repeater->OnTestProgramEnd(*parent_);
        1: 6036-block  0
call    0 returned 1
        -: 6037:  // Destroy environments in normal code, not in static teardown.
        1: 6038:  bool delete_environment_on_teardown = true;
        1: 6039:  if (delete_environment_on_teardown) {
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 6040:    ForEach(environments_, internal::Delete<Environment>);
        1: 6040-block  0
call    0 returned 1
        1: 6041:    environments_.clear();
call    0 returned 1
        -: 6042:  }
        -: 6043:
        1: 6044:  if (!gtest_is_initialized_before_run_all_tests) {
        1: 6044-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 6045:    ColoredPrintf(
    %%%%%: 6045-block  0
call    0 never executed
        -: 6046:        GTestColor::kRed,
        -: 6047:        "\nIMPORTANT NOTICE - DO NOT IGNORE:\n"
        -: 6048:        "This test program did NOT call " GTEST_INIT_GOOGLE_TEST_NAME_
        -: 6049:        "() before calling RUN_ALL_TESTS(). This is INVALID. Soon " GTEST_NAME_
        -: 6050:        " will start to enforce the valid usage. "
        -: 6051:        "Please fix it ASAP, or IT WILL START TO FAIL.\n");  // NOLINT
        -: 6052:  }
        -: 6053:
        1: 6054:  return !failed;
        1: 6054-block  0
        -: 6055:}
        -: 6056:
        -: 6057:#if GTEST_HAS_FILE_SYSTEM
        -: 6058:// Reads the GTEST_SHARD_STATUS_FILE environment variable, and creates the file
        -: 6059:// if the variable is present. If a file already exists at this location, this
        -: 6060:// function will write over it. If the variable is present, but the file cannot
        -: 6061:// be created, prints an error and exits.
function _ZN7testing8internal30WriteToShardStatusFileIfNeededEv called 1 returned 100% blocks executed 33%
        1: 6062:void WriteToShardStatusFileIfNeeded() {
        1: 6063:  const char* const test_shard_file = posix::GetEnv(kTestShardStatusFile);
        1: 6063-block  0
call    0 returned 1
        1: 6064:  if (test_shard_file != nullptr) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 6065:    FILE* const file = posix::FOpen(test_shard_file, "w");
    %%%%%: 6065-block  0
call    0 never executed
    #####: 6066:    if (file == nullptr) {
branch  0 never executed
branch  1 never executed
    #####: 6067:      ColoredPrintf(GTestColor::kRed,
    %%%%%: 6067-block  0
call    0 never executed
        -: 6068:                    "Could not write to the test shard status file \"%s\" "
        -: 6069:                    "specified by the %s environment variable.\n",
        -: 6070:                    test_shard_file, kTestShardStatusFile);
    #####: 6071:      fflush(stdout);
call    0 never executed
    #####: 6072:      exit(EXIT_FAILURE);
call    0 never executed
        -: 6073:    }
    #####: 6074:    fclose(file);
    %%%%%: 6074-block  0
call    0 never executed
        -: 6075:  }
        1: 6076:}
        -: 6077:#endif  // GTEST_HAS_FILE_SYSTEM
        -: 6078:
        -: 6079:// Checks whether sharding is enabled by examining the relevant
        -: 6080:// environment variable values. If the variables are present,
        -: 6081:// but inconsistent (i.e., shard_index >= total_shards), prints
        -: 6082:// an error and exits. If in_subprocess_for_death_test, sharding is
        -: 6083:// disabled because it must only be applied to the original test
        -: 6084:// process. Otherwise, we could filter out death tests we intended to execute.
function _ZN7testing8internal11ShouldShardEPKcS2_b called 2 returned 100% blocks executed 9%
        2: 6085:bool ShouldShard(const char* total_shards_env, const char* shard_index_env,
        -: 6086:                 bool in_subprocess_for_death_test) {
        2: 6087:  if (in_subprocess_for_death_test) {
        2: 6087-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####: 6088:    return false;
    %%%%%: 6088-block  0
        -: 6089:  }
        -: 6090:
        2: 6091:  const int32_t total_shards = Int32FromEnvOrDie(total_shards_env, -1);
        2: 6091-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2: 6092:  const int32_t shard_index = Int32FromEnvOrDie(shard_index_env, -1);
        2: 6092-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        -: 6093:
        2: 6094:  if (total_shards == -1 && shard_index == -1) {
        2: 6094-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2: 6094-block  1
branch  2 taken 2 (fallthrough)
branch  3 taken 0
        2: 6095:    return false;
        2: 6095-block  0
    #####: 6096:  } else if (total_shards == -1 && shard_index != -1) {
    %%%%%: 6096-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 6096-block  1
branch  2 never executed
branch  3 never executed
    #####: 6097:    const Message msg = Message() << "Invalid environment variables: you have "
    %%%%%: 6097-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6097-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6097-block  2
call    6 never executed
    $$$$$: 6097-block  3
call    7 never executed
    $$$$$: 6097-block  4
    #####: 6098:                                  << kTestShardIndex << " = " << shard_index
    %%%%%: 6098-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6098-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6098-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 6099:                                  << ", but have left " << kTestTotalShards
    %%%%%: 6099-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6099-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 6100:                                  << " unset.\n";
    %%%%%: 6100-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6100-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 6101:    ColoredPrintf(GTestColor::kRed, "%s", msg.GetString().c_str());
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6101-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 6101-block  1
call    7 never executed
    $$$$$: 6101-block  2
call    8 never executed
    $$$$$: 6101-block  3
    #####: 6102:    fflush(stdout);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6103:    exit(EXIT_FAILURE);
    %%%%%: 6103-block  0
call    0 never executed
    #####: 6104:  } else if (total_shards != -1 && shard_index == -1) {
    %%%%%: 6104-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 6104-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 6104-block  2
call    4 never executed
    #####: 6105:    const Message msg = Message()
    %%%%%: 6105-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6105-block  1
call    3 never executed
    $$$$$: 6105-block  2
call    4 never executed
    $$$$$: 6105-block  3
    #####: 6106:                        << "Invalid environment variables: you have "
    %%%%%: 6106-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6107:                        << kTestTotalShards << " = " << total_shards
    %%%%%: 6107-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6107-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6107-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 6108:                        << ", but have left " << kTestShardIndex << " unset.\n";
    %%%%%: 6108-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6108-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6108-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 6108-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 6109:    ColoredPrintf(GTestColor::kRed, "%s", msg.GetString().c_str());
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6109-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 6109-block  1
call    7 never executed
    $$$$$: 6109-block  2
call    8 never executed
    $$$$$: 6109-block  3
    #####: 6110:    fflush(stdout);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6111:    exit(EXIT_FAILURE);
    %%%%%: 6111-block  0
call    0 never executed
    #####: 6112:  } else if (shard_index < 0 || shard_index >= total_shards) {
    %%%%%: 6112-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 6112-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 6112-block  2
call    4 never executed
        -: 6113:    const Message msg =
    #####: 6114:        Message() << "Invalid environment variables: we require 0 <= "
    %%%%%: 6114-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6114-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6114-block  2
call    6 never executed
    $$$$$: 6114-block  3
call    7 never executed
    $$$$$: 6114-block  4
    #####: 6115:                  << kTestShardIndex << " < " << kTestTotalShards
    %%%%%: 6115-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6115-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6115-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 6116:                  << ", but you have " << kTestShardIndex << "=" << shard_index
    %%%%%: 6116-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6116-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6116-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 6116-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 6117:                  << ", " << kTestTotalShards << "=" << total_shards << ".\n";
    %%%%%: 6117-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6117-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6117-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 6117-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 6117-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 6117-block  5
call   15 never executed
branch 16 never executed
branch 17 never executed
    #####: 6118:    ColoredPrintf(GTestColor::kRed, "%s", msg.GetString().c_str());
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6118-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 6118-block  1
call    7 never executed
    $$$$$: 6118-block  2
call    8 never executed
    $$$$$: 6118-block  3
    #####: 6119:    fflush(stdout);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6120:    exit(EXIT_FAILURE);
    %%%%%: 6120-block  0
call    0 never executed
    =====: 6121:  }
    $$$$$: 6121-block  0
call    0 never executed
        -: 6122:
    #####: 6123:  return total_shards > 1;
    %%%%%: 6123-block  0
        -: 6124:}
        -: 6125:
        -: 6126:// Parses the environment variable var as an Int32. If it is unset,
        -: 6127:// returns default_val. If it is not an Int32, prints an error
        -: 6128:// and aborts.
function _ZN7testing8internal17Int32FromEnvOrDieEPKci called 4 returned 100% blocks executed 35%
        4: 6129:int32_t Int32FromEnvOrDie(const char* var, int32_t default_val) {
        4: 6130:  const char* str_val = posix::GetEnv(var);
        4: 6130-block  0
call    0 returned 4
        4: 6131:  if (str_val == nullptr) {
branch  0 taken 4 (fallthrough)
branch  1 taken 0
        4: 6132:    return default_val;
        4: 6132-block  0
        -: 6133:  }
        -: 6134:
        -: 6135:  int32_t result;
    #####: 6136:  if (!ParseInt32(Message() << "The value of environment variable " << var,
    %%%%%: 6136-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6136-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6136-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 6136-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 6136-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    $$$$$: 6136-block  5
call   15 never executed
    $$$$$: 6136-block  6
        -: 6137:                  str_val, &result)) {
    #####: 6138:    exit(EXIT_FAILURE);
    %%%%%: 6138-block  0
call    0 never executed
        -: 6139:  }
    #####: 6140:  return result;
    %%%%%: 6140-block  0
        -: 6141:}
        -: 6142:
        -: 6143:// Given the total number of shards, the shard index, and the test id,
        -: 6144:// returns true if and only if the test should be run on this shard. The test id
        -: 6145:// is some arbitrary but unique non-negative integer assigned to each test
        -: 6146:// method. Assumes that 0 <= shard_index < total_shards.
function _ZN7testing8internal20ShouldRunTestOnShardEiii called 0 returned 0% blocks executed 0%
    #####: 6147:bool ShouldRunTestOnShard(int total_shards, int shard_index, int test_id) {
    #####: 6148:  return (test_id % total_shards) == shard_index;
    %%%%%: 6148-block  0
        -: 6149:}
        -: 6150:
        -: 6151:// Compares the name of each test with the user-specified filter to
        -: 6152:// decide whether the test should be run, then records the result in
        -: 6153:// each TestSuite and TestInfo object.
        -: 6154:// If shard_tests == true, further filters tests based on sharding
        -: 6155:// variables in the environment - see
        -: 6156:// https://github.com/google/googletest/blob/main/docs/advanced.md
        -: 6157:// . Returns the number of tests that should run.
function _ZN7testing8internal12UnitTestImpl11FilterTestsENS1_18ReactionToShardingE called 1 returned 100% blocks executed 67%
        1: 6158:int UnitTestImpl::FilterTests(ReactionToSharding shard_tests) {
        -: 6159:  const int32_t total_shards = shard_tests == HONOR_SHARDING_PROTOCOL
       1*: 6160:                                   ? Int32FromEnvOrDie(kTestTotalShards, -1)
        1: 6160-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 6160-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 6160-block  2
        1: 6160-block  3
        1: 6161:                                   : -1;
        -: 6162:  const int32_t shard_index = shard_tests == HONOR_SHARDING_PROTOCOL
       1*: 6163:                                  ? Int32FromEnvOrDie(kTestShardIndex, -1)
        1: 6163-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 6163-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 6163-block  2
        1: 6163-block  3
        1: 6164:                                  : -1;
        -: 6165:
        -: 6166:  const PositiveAndNegativeUnitTestFilter gtest_flag_filter(
        1: 6167:      GTEST_FLAG_GET(filter));
        1: 6167-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 6168:  const UnitTestFilter disable_test_filter(kDisableTestFilter);
        1: 6168-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 6168-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1: 6168-block  2
call    7 returned 1
call    8 returned 1
    $$$$$: 6168-block  3
call    9 never executed
    $$$$$: 6168-block  4
call   10 never executed
    $$$$$: 6168-block  5
    $$$$$: 6168-block  6
        -: 6169:  // num_runnable_tests are the number of tests that will
        -: 6170:  // run across all shards (i.e., match filter and are not disabled).
        -: 6171:  // num_selected_tests are the number of tests to be run on
        -: 6172:  // this shard.
        1: 6173:  int num_runnable_tests = 0;
        1: 6174:  int num_selected_tests = 0;
        2: 6175:  for (auto* test_suite : test_suites_) {
call    0 returned 1
call    1 returned 1
        1: 6175-block  0
call    2 returned 1
        1: 6175-block  1
call    3 returned 1
        2: 6175-block  2
call    4 returned 2
branch  5 taken 1
branch  6 taken 1 (fallthrough)
        1: 6176:    const std::string& test_suite_name = test_suite->name_;
        1: 6177:    test_suite->set_should_run(false);
call    0 returned 1
        -: 6178:
        2: 6179:    for (TestInfo* test_info : test_suite->test_info_list()) {
call    0 returned 1
call    1 returned 1
call    2 returned 1
        1: 6179-block  0
call    3 returned 1
call    4 returned 1
        2: 6179-block  1
call    5 returned 2
branch  6 taken 1
branch  7 taken 1 (fallthrough)
        1: 6180:      const std::string& test_name = test_info->name_;
        -: 6181:      // A test is disabled if test suite name or test name matches
        -: 6182:      // kDisableTestFilter.
        -: 6183:      const bool is_disabled =
       2*: 6184:          disable_test_filter.MatchesName(test_suite_name) ||
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 6184-block  0
branch  3 taken 1 (fallthrough)
branch  4 taken 0
    %%%%%: 6184-block  1
        1: 6184-block  2
        1: 6185:          disable_test_filter.MatchesName(test_name);
        1: 6185-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 6185-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
        1: 6186:      test_info->is_disabled_ = is_disabled;
        -: 6187:
        -: 6188:      const bool matches_filter =
        1: 6189:          gtest_flag_filter.MatchesTest(test_suite_name, test_name);
        1: 6189-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 6190:      test_info->matches_filter_ = matches_filter;
        -: 6191:
        1: 6192:      const bool is_runnable =
       1*: 6193:          (GTEST_FLAG_GET(also_run_disabled_tests) || !is_disabled) &&
        1: 6193-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 6193-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 0
        1: 6193-block  2
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%: 6193-block  3
        1: 6193-block  4
        -: 6194:          matches_filter;
        -: 6195:
        -: 6196:      const bool is_in_another_shard =
       1*: 6197:          shard_tests != IGNORE_SHARDING_PROTOCOL &&
        1: 6197-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 6197-block  1
        1: 6197-block  2
    #####: 6198:          !ShouldRunTestOnShard(total_shards, shard_index, num_runnable_tests);
    %%%%%: 6198-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        1: 6199:      test_info->is_in_another_shard_ = is_in_another_shard;
       1*: 6200:      const bool is_selected = is_runnable && !is_in_another_shard;
        1: 6200-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 6200-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 6200-block  2
        1: 6200-block  3
        -: 6201:
        1: 6202:      num_runnable_tests += is_runnable;
        1: 6203:      num_selected_tests += is_selected;
        -: 6204:
        1: 6205:      test_info->should_run_ = is_selected;
       1*: 6206:      test_suite->set_should_run(test_suite->should_run() || is_selected);
        1: 6206-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1: 6206-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%: 6206-block  2
        1: 6206-block  3
        1: 6206-block  4
call    5 returned 1
        -: 6207:    }
        -: 6208:  }
        1: 6209:  return num_selected_tests;
        1: 6209-block  0
        1: 6210:}
        1: 6210-block  0
call    0 returned 1
call    1 returned 1
    $$$$$: 6210-block  1
call    2 never executed
    $$$$$: 6210-block  2
call    3 never executed
        -: 6211:
        -: 6212:// Prints the given C-string on a single line by replacing all '\n'
        -: 6213:// characters with string "\\n".  If the output takes more than
        -: 6214:// max_length characters, only prints the first max_length characters
        -: 6215:// and "...".
function _ZN7testing8internalL14PrintOnOneLineEPKci called 0 returned 0% blocks executed 0%
    #####: 6216:static void PrintOnOneLine(const char* str, int max_length) {
    #####: 6217:  if (str != nullptr) {
    %%%%%: 6217-block  0
branch  0 never executed
branch  1 never executed
    #####: 6218:    for (int i = 0; *str != '\0'; ++str) {
    %%%%%: 6218-block  0
    %%%%%: 6218-block  1
    %%%%%: 6218-block  2
branch  0 never executed
branch  1 never executed
    #####: 6219:      if (i >= max_length) {
    %%%%%: 6219-block  0
branch  0 never executed
branch  1 never executed
    #####: 6220:        printf("...");
    %%%%%: 6220-block  0
call    0 never executed
    #####: 6221:        break;
        -: 6222:      }
    #####: 6223:      if (*str == '\n') {
    %%%%%: 6223-block  0
branch  0 never executed
branch  1 never executed
    #####: 6224:        printf("\\n");
    %%%%%: 6224-block  0
call    0 never executed
    #####: 6225:        i += 2;
        -: 6226:      } else {
    #####: 6227:        printf("%c", *str);
    %%%%%: 6227-block  0
call    0 never executed
    #####: 6228:        ++i;
        -: 6229:      }
        -: 6230:    }
        -: 6231:  }
    #####: 6232:}
        -: 6233:
        -: 6234:// Prints the names of the tests matching the user-specified filter flag.
function _ZN7testing8internal12UnitTestImpl23ListTestsMatchingFilterEv called 0 returned 0% blocks executed 0%
    #####: 6235:void UnitTestImpl::ListTestsMatchingFilter() {
        -: 6236:  // Print at most this many characters for each type/value parameter.
    #####: 6237:  const int kMaxParamLength = 250;
        -: 6238:
    #####: 6239:  for (auto* test_suite : test_suites_) {
    %%%%%: 6239-block  0
call    0 never executed
call    1 never executed
    %%%%%: 6239-block  1
call    2 never executed
    %%%%%: 6239-block  2
call    3 never executed
    %%%%%: 6239-block  3
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####: 6240:    bool printed_test_suite_name = false;
        -: 6241:
    #####: 6242:    for (size_t j = 0; j < test_suite->test_info_list().size(); j++) {
    %%%%%: 6242-block  0
    %%%%%: 6242-block  1
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 6243:      const TestInfo* const test_info = test_suite->test_info_list()[j];
    %%%%%: 6243-block  0
call    0 never executed
call    1 never executed
    #####: 6244:      if (test_info->matches_filter_) {
branch  0 never executed
branch  1 never executed
    #####: 6245:        if (!printed_test_suite_name) {
    %%%%%: 6245-block  0
branch  0 never executed
branch  1 never executed
    #####: 6246:          printed_test_suite_name = true;
    #####: 6247:          printf("%s.", test_suite->name());
    %%%%%: 6247-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 6248:          if (test_suite->type_param() != nullptr) {
    %%%%%: 6248-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6249:            printf("  # %s = ", kTypeParamLabel);
    %%%%%: 6249-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 6250:            // We print the type parameter on a single line to make
        -: 6251:            // the output easy to parse by a program.
    #####: 6252:            PrintOnOneLine(test_suite->type_param(), kMaxParamLength);
    %%%%%: 6252-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 6253:          }
    #####: 6254:          printf("\n");
    %%%%%: 6254-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 6255:        }
    #####: 6256:        printf("  %s", test_info->name());
    %%%%%: 6256-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 6257:        if (test_info->value_param() != nullptr) {
    %%%%%: 6257-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6258:          printf("  # %s = ", kValueParamLabel);
    %%%%%: 6258-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 6259:          // We print the value parameter on a single line to make the
        -: 6260:          // output easy to parse by a program.
    #####: 6261:          PrintOnOneLine(test_info->value_param(), kMaxParamLength);
    %%%%%: 6261-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 6262:        }
    #####: 6263:        printf("\n");
    %%%%%: 6263-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 6264:      }
        -: 6265:    }
        -: 6266:  }
    #####: 6267:  fflush(stdout);
    %%%%%: 6267-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 6268:#if GTEST_HAS_FILE_SYSTEM
    #####: 6269:  const std::string& output_format = UnitTestOptions::GetOutputFormat();
    %%%%%: 6269-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6270:  if (output_format == "xml" || output_format == "json") {
    %%%%%: 6270-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6270-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6270-block  2
    %%%%%: 6270-block  3
    %%%%%: 6270-block  4
branch  6 never executed
branch  7 never executed
        -: 6271:    FILE* fileout =
    #####: 6272:        OpenFileForWriting(UnitTestOptions::GetAbsolutePathToOutputFile());
    %%%%%: 6272-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6272-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6272-block  2
call    6 never executed
    $$$$$: 6272-block  3
call    7 never executed
    $$$$$: 6272-block  4
    #####: 6273:    std::stringstream stream;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6274:    if (output_format == "xml") {
    %%%%%: 6274-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6275:      XmlUnitTestResultPrinter(
    %%%%%: 6275-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 6275-block  1
call    4 never executed
    $$$$$: 6275-block  2
call    5 never executed
    $$$$$: 6275-block  3
    #####: 6276:          UnitTestOptions::GetAbsolutePathToOutputFile().c_str())
    %%%%%: 6276-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$: 6276-block  1
call    4 never executed
    $$$$$: 6276-block  2
    #####: 6277:          .PrintXmlTestsList(&stream, test_suites_);
    %%%%%: 6277-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6278:    } else if (output_format == "json") {
    %%%%%: 6278-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6279:      JsonUnitTestResultPrinter(
    %%%%%: 6279-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 6279-block  1
call    4 never executed
    $$$$$: 6279-block  2
call    5 never executed
    $$$$$: 6279-block  3
    #####: 6280:          UnitTestOptions::GetAbsolutePathToOutputFile().c_str())
    %%%%%: 6280-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$: 6280-block  1
call    4 never executed
    $$$$$: 6280-block  2
    #####: 6281:          .PrintJsonTestList(&stream, test_suites_);
    %%%%%: 6281-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 6282:    }
    #####: 6283:    fprintf(fileout, "%s", StringStreamToString(&stream).c_str());
    %%%%%: 6283-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6283-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 6283-block  2
call    7 never executed
    $$$$$: 6283-block  3
call    8 never executed
    $$$$$: 6283-block  4
    #####: 6284:    fclose(fileout);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6285:  }
    %%%%%: 6285-block  0
call    0 never executed
    $$$$$: 6285-block  1
call    1 never executed
        -: 6286:#endif  // GTEST_HAS_FILE_SYSTEM
    #####: 6287:}
    %%%%%: 6287-block  0
call    0 never executed
    $$$$$: 6287-block  1
call    1 never executed
        -: 6288:
        -: 6289:// Sets the OS stack trace getter.
        -: 6290://
        -: 6291:// Does nothing if the input and the current OS stack trace getter are
        -: 6292:// the same; otherwise, deletes the old getter and makes the input the
        -: 6293:// current getter.
function _ZN7testing8internal12UnitTestImpl25set_os_stack_trace_getterEPNS0_27OsStackTraceGetterInterfaceE called 0 returned 0% blocks executed 0%
    #####: 6294:void UnitTestImpl::set_os_stack_trace_getter(
        -: 6295:    OsStackTraceGetterInterface* getter) {
    #####: 6296:  if (os_stack_trace_getter_ != getter) {
    %%%%%: 6296-block  0
branch  0 never executed
branch  1 never executed
    #####: 6297:    delete os_stack_trace_getter_;
    %%%%%: 6297-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 6297-block  1
call    2 never executed
    #####: 6298:    os_stack_trace_getter_ = getter;
    %%%%%: 6298-block  0
        -: 6299:  }
    #####: 6300:}
        -: 6301:
        -: 6302:// Returns the current OS stack trace getter if it is not NULL;
        -: 6303:// otherwise, creates an OsStackTraceGetter, makes it the current
        -: 6304:// getter, and returns it.
function _ZN7testing8internal12UnitTestImpl21os_stack_trace_getterEv called 0 returned 0% blocks executed 0%
    #####: 6305:OsStackTraceGetterInterface* UnitTestImpl::os_stack_trace_getter() {
    #####: 6306:  if (os_stack_trace_getter_ == nullptr) {
    %%%%%: 6306-block  0
branch  0 never executed
branch  1 never executed
        -: 6307:#ifdef GTEST_OS_STACK_TRACE_GETTER_
        -: 6308:    os_stack_trace_getter_ = new GTEST_OS_STACK_TRACE_GETTER_;
        -: 6309:#else
    #####: 6310:    os_stack_trace_getter_ = new OsStackTraceGetter;
    %%%%%: 6310-block  0
call    0 never executed
call    1 never executed
        -: 6311:#endif  // GTEST_OS_STACK_TRACE_GETTER_
        -: 6312:  }
        -: 6313:
    #####: 6314:  return os_stack_trace_getter_;
    %%%%%: 6314-block  0
        -: 6315:}
        -: 6316:
        -: 6317:// Returns the most specific TestResult currently running.
function _ZN7testing8internal12UnitTestImpl19current_test_resultEv called 0 returned 0% blocks executed 0%
    #####: 6318:TestResult* UnitTestImpl::current_test_result() {
    #####: 6319:  if (current_test_info_ != nullptr) {
    %%%%%: 6319-block  0
branch  0 never executed
branch  1 never executed
    #####: 6320:    return &current_test_info_->result_;
    %%%%%: 6320-block  0
        -: 6321:  }
    #####: 6322:  if (current_test_suite_ != nullptr) {
    %%%%%: 6322-block  0
branch  0 never executed
branch  1 never executed
    #####: 6323:    return &current_test_suite_->ad_hoc_test_result_;
    %%%%%: 6323-block  0
        -: 6324:  }
    #####: 6325:  return &ad_hoc_test_result_;
    %%%%%: 6325-block  0
        -: 6326:}
        -: 6327:
        -: 6328:// Shuffles all test suites, and the tests within each test suite,
        -: 6329:// making sure that death tests are still run first.
function _ZN7testing8internal12UnitTestImpl12ShuffleTestsEv called 0 returned 0% blocks executed 0%
    #####: 6330:void UnitTestImpl::ShuffleTests() {
        -: 6331:  // Shuffles the death test suites.
    #####: 6332:  ShuffleRange(random(), 0, last_death_test_suite_ + 1, &test_suite_indices_);
    %%%%%: 6332-block  0
call    0 never executed
call    1 never executed
        -: 6333:
        -: 6334:  // Shuffles the non-death test suites.
    #####: 6335:  ShuffleRange(random(), last_death_test_suite_ + 1,
call    0 never executed
call    1 never executed
    #####: 6336:               static_cast<int>(test_suites_.size()), &test_suite_indices_);
call    0 never executed
        -: 6337:
        -: 6338:  // Shuffles the tests inside each test suite.
    #####: 6339:  for (auto& test_suite : test_suites_) {
call    0 never executed
call    1 never executed
    %%%%%: 6339-block  0
call    2 never executed
    %%%%%: 6339-block  1
call    3 never executed
    %%%%%: 6339-block  2
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####: 6340:    test_suite->ShuffleTests(random());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 6341:  }
    #####: 6342:}
    %%%%%: 6342-block  0
        -: 6343:
        -: 6344:// Restores the test suites and tests to their order before the first shuffle.
function _ZN7testing8internal12UnitTestImpl14UnshuffleTestsEv called 1 returned 100% blocks executed 100%
        1: 6345:void UnitTestImpl::UnshuffleTests() {
        2: 6346:  for (size_t i = 0; i < test_suites_.size(); i++) {
        1: 6346-block  0
        2: 6346-block  1
call    0 returned 2
branch  1 taken 1
branch  2 taken 1 (fallthrough)
        -: 6347:    // Unshuffles the tests in each test suite.
        1: 6348:    test_suites_[i]->UnshuffleTests();
        1: 6348-block  0
call    0 returned 1
call    1 returned 1
        -: 6349:    // Resets the index of each test suite.
        1: 6350:    test_suite_indices_[i] = static_cast<int>(i);
call    0 returned 1
        -: 6351:  }
        1: 6352:}
        -: 6353:
        -: 6354:// Returns the current OS stack trace as an std::string.
        -: 6355://
        -: 6356:// The maximum number of stack frames to be included is specified by
        -: 6357:// the gtest_stack_trace_depth flag.  The skip_count parameter
        -: 6358:// specifies the number of top frames to be skipped, which doesn't
        -: 6359:// count against the number of frames to be included.
        -: 6360://
        -: 6361:// For example, if Foo() calls Bar(), which in turn calls
        -: 6362:// GetCurrentOsStackTraceExceptTop(..., 1), Foo() will be included in
        -: 6363:// the trace but Bar() and GetCurrentOsStackTraceExceptTop() won't.
        -: 6364:GTEST_NO_INLINE_ GTEST_NO_TAIL_CALL_ std::string
function _ZN7testing8internal31GetCurrentOsStackTraceExceptTopB5cxx11Ei called 0 returned 0% blocks executed 0%
    #####: 6365:GetCurrentOsStackTraceExceptTop(int skip_count) {
        -: 6366:  // We pass skip_count + 1 to skip this wrapper function in addition
        -: 6367:  // to what the user really wants to skip.
    #####: 6368:  return GetUnitTestImpl()->CurrentOsStackTraceExceptTop(skip_count + 1);
    %%%%%: 6368-block  0
call    0 never executed
call    1 never executed
        -: 6369:}
        -: 6370:
        -: 6371:// Used by the GTEST_SUPPRESS_UNREACHABLE_CODE_WARNING_BELOW_ macro to
        -: 6372:// suppress unreachable code warnings.
        -: 6373:namespace {
        -: 6374:class ClassUniqueToAlwaysTrue {};
        -: 6375:}  // namespace
        -: 6376:
function _ZN7testing8internal6IsTrueEb called 13 returned 100% blocks executed 100%
       13: 6377:bool IsTrue(bool condition) { return condition; }
       13: 6377-block  0
        -: 6378:
function _ZN7testing8internal10AlwaysTrueEv called 10 returned 100% blocks executed 67%
       10: 6379:bool AlwaysTrue() {
        -: 6380:#if GTEST_HAS_EXCEPTIONS
        -: 6381:  // This condition is always false so AlwaysTrue() never actually throws,
        -: 6382:  // but it makes the compiler think that it may throw.
      10*: 6383:  if (IsTrue(false)) throw ClassUniqueToAlwaysTrue();
       10: 6383-block  0
call    0 returned 10
branch  1 taken 0 (fallthrough)
branch  2 taken 10
    %%%%%: 6383-block  1
call    3 never executed
call    4 never executed
        -: 6384:#endif  // GTEST_HAS_EXCEPTIONS
       10: 6385:  return true;
       10: 6385-block  0
        -: 6386:}
        -: 6387:
        -: 6388:// If *pstr starts with the given prefix, modifies *pstr to be right
        -: 6389:// past the prefix and returns true; otherwise leaves *pstr unchanged
        -: 6390:// and returns false.  None of pstr, *pstr, and prefix can be NULL.
function _ZN7testing8internal10SkipPrefixEPKcPS2_ called 0 returned 0% blocks executed 0%
    #####: 6391:bool SkipPrefix(const char* prefix, const char** pstr) {
    #####: 6392:  const size_t prefix_len = strlen(prefix);
    #####: 6393:  if (strncmp(*pstr, prefix, prefix_len) == 0) {
    %%%%%: 6393-block  0
branch  0 never executed
branch  1 never executed
    #####: 6394:    *pstr += prefix_len;
    #####: 6395:    return true;
    %%%%%: 6395-block  0
        -: 6396:  }
    #####: 6397:  return false;
    %%%%%: 6397-block  0
        -: 6398:}
        -: 6399:
        -: 6400:// Parses a string as a command line flag.  The string should have
        -: 6401:// the format "--flag=value".  When def_optional is true, the "=value"
        -: 6402:// part can be omitted.
        -: 6403://
        -: 6404:// Returns the value of the flag, or NULL if the parsing failed.
function _ZN7testing8internalL14ParseFlagValueEPKcS2_b called 12 returned 100% blocks executed 61%
       12: 6405:static const char* ParseFlagValue(const char* str, const char* flag_name,
        -: 6406:                                  bool def_optional) {
        -: 6407:  // str and flag must not be NULL.
      12*: 6408:  if (str == nullptr || flag_name == nullptr) return nullptr;
       12: 6408-block  0
branch  0 taken 12 (fallthrough)
branch  1 taken 0
       12: 6408-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 12
    %%%%%: 6408-block  2
        -: 6409:
        -: 6410:  // The flag must start with "--" followed by GTEST_FLAG_PREFIX_.
        -: 6411:  const std::string flag_str =
       12: 6412:      std::string("--") + GTEST_FLAG_PREFIX_ + flag_name;
       12: 6412-block  0
call    0 returned 12
call    1 returned 12
branch  2 taken 12 (fallthrough)
branch  3 taken 0 (throw)
       12: 6412-block  1
call    4 returned 12
branch  5 taken 12 (fallthrough)
branch  6 taken 0 (throw)
       12: 6412-block  2
call    7 returned 12
branch  8 taken 12 (fallthrough)
branch  9 taken 0 (throw)
       12: 6412-block  3
call   10 returned 12
call   11 returned 12
call   12 returned 12
    $$$$$: 6412-block  4
call   13 never executed
    $$$$$: 6412-block  5
call   14 never executed
    $$$$$: 6412-block  6
call   15 never executed
    $$$$$: 6412-block  7
    $$$$$: 6412-block  8
    $$$$$: 6412-block  9
       12: 6413:  const size_t flag_len = flag_str.length();
call    0 returned 12
       12: 6414:  if (strncmp(str, flag_str.c_str(), flag_len) != 0) return nullptr;
call    0 returned 12
branch  1 taken 10 (fallthrough)
branch  2 taken 2
       10: 6414-block  0
        -: 6415:
        -: 6416:  // Skips the flag name.
        2: 6417:  const char* flag_end = str + flag_len;
        -: 6418:
        -: 6419:  // When def_optional is true, it's OK to not have a "=value" part.
       2*: 6420:  if (def_optional && (flag_end[0] == '\0')) {
        2: 6420-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    %%%%%: 6420-block  1
branch  2 never executed
branch  3 never executed
    #####: 6421:    return flag_end;
    %%%%%: 6421-block  0
        -: 6422:  }
        -: 6423:
        -: 6424:  // If def_optional is true and there are more characters after the
        -: 6425:  // flag name, or if def_optional is false, there must be a '=' after
        -: 6426:  // the flag name.
       2*: 6427:  if (flag_end[0] != '=') return nullptr;
        2: 6427-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    %%%%%: 6427-block  1
        -: 6428:
        -: 6429:  // Returns the string after "=".
        2: 6430:  return flag_end + 1;
        2: 6430-block  0
       12: 6431:}
       12: 6431-block  0
call    0 returned 12
        -: 6432:
        -: 6433:// Parses a string for a bool flag, in the form of either
        -: 6434:// "--flag=value" or "--flag".
        -: 6435://
        -: 6436:// In the former case, the value is taken as true as long as it does
        -: 6437:// not start with '0', 'f', or 'F'.
        -: 6438://
        -: 6439:// In the latter case, the value is taken as true.
        -: 6440://
        -: 6441:// On success, stores the value of the flag in *value, and returns
        -: 6442:// true.  On failure, returns false without changing *value.
function _ZN7testing8internalL9ParseFlagEPKcS2_Pb called 8 returned 100% blocks executed 40%
        8: 6443:static bool ParseFlag(const char* str, const char* flag_name, bool* value) {
        -: 6444:  // Gets the value of the flag as a string.
        8: 6445:  const char* const value_str = ParseFlagValue(str, flag_name, true);
        8: 6445-block  0
call    0 returned 8
        -: 6446:
        -: 6447:  // Aborts if the parsing failed.
        8: 6448:  if (value_str == nullptr) return false;
branch  0 taken 8 (fallthrough)
branch  1 taken 0
        8: 6448-block  0
        -: 6449:
        -: 6450:  // Converts the string value to a bool.
    #####: 6451:  *value = !(*value_str == '0' || *value_str == 'f' || *value_str == 'F');
    %%%%%: 6451-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 6451-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 6451-block  2
branch  4 never executed
branch  5 never executed
    %%%%%: 6451-block  3
    %%%%%: 6451-block  4
    #####: 6452:  return true;
    %%%%%: 6452-block  0
        -: 6453:}
        -: 6454:
        -: 6455:// Parses a string for an int32_t flag, in the form of "--flag=value".
        -: 6456://
        -: 6457:// On success, stores the value of the flag in *value, and returns
        -: 6458:// true.  On failure, returns false without changing *value.
function _ZN7testing8internal9ParseFlagEPKcS2_Pi called 0 returned 0% blocks executed 0%
    #####: 6459:bool ParseFlag(const char* str, const char* flag_name, int32_t* value) {
        -: 6460:  // Gets the value of the flag as a string.
    #####: 6461:  const char* const value_str = ParseFlagValue(str, flag_name, false);
    %%%%%: 6461-block  0
call    0 never executed
        -: 6462:
        -: 6463:  // Aborts if the parsing failed.
    #####: 6464:  if (value_str == nullptr) return false;
branch  0 never executed
branch  1 never executed
    %%%%%: 6464-block  0
        -: 6465:
        -: 6466:  // Sets *value to the value of the flag.
    #####: 6467:  return ParseInt32(Message() << "The value of flag --" << flag_name, value_str,
    %%%%%: 6467-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6467-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6467-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 6467-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 6467-block  4
call   12 never executed
    $$$$$: 6467-block  5
call   13 never executed
    #####: 6468:                    value);
    %%%%%: 6468-block  0
        -: 6469:}
        -: 6470:
        -: 6471:// Parses a string for a string flag, in the form of "--flag=value".
        -: 6472://
        -: 6473:// On success, stores the value of the flag in *value, and returns
        -: 6474:// true.  On failure, returns false without changing *value.
        -: 6475:template <typename String>
function _ZN7testing8internalL9ParseFlagINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbPKcS9_PT_ called 4 returned 100% blocks executed 100%
        4: 6476:static bool ParseFlag(const char* str, const char* flag_name, String* value) {
        -: 6477:  // Gets the value of the flag as a string.
        4: 6478:  const char* const value_str = ParseFlagValue(str, flag_name, false);
        4: 6478-block  0
call    0 returned 4
        -: 6479:
        -: 6480:  // Aborts if the parsing failed.
        4: 6481:  if (value_str == nullptr) return false;
branch  0 taken 2 (fallthrough)
branch  1 taken 2
        2: 6481-block  0
        -: 6482:
        -: 6483:  // Sets *value to the value of the flag.
        2: 6484:  *value = value_str;
        2: 6484-block  0
call    0 returned 2
        2: 6485:  return true;
        -: 6486:}
        -: 6487:
        -: 6488:// Determines whether a string has a prefix that Google Test uses for its
        -: 6489:// flags, i.e., starts with GTEST_FLAG_PREFIX_ or GTEST_FLAG_PREFIX_DASH_.
        -: 6490:// If Google Test detects that a command line flag has its prefix but is not
        -: 6491:// recognized, it will print its help message. Flags starting with
        -: 6492:// GTEST_INTERNAL_PREFIX_ followed by "internal_" are considered Google Test
        -: 6493:// internal flags and do not trigger the help message.
function _ZN7testing8internalL23HasGoogleTestFlagPrefixEPKc called 0 returned 0% blocks executed 0%
    #####: 6494:static bool HasGoogleTestFlagPrefix(const char* str) {
    #####: 6495:  return (SkipPrefix("--", &str) || SkipPrefix("-", &str) ||
    %%%%%: 6495-block  0
call    0 never executed
    %%%%%: 6495-block  1
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 6496:          SkipPrefix("/", &str)) &&
    %%%%%: 6496-block  0
call    0 never executed
    #####: 6497:         !SkipPrefix(GTEST_FLAG_PREFIX_ "internal_", &str) &&
branch  0 never executed
branch  1 never executed
    %%%%%: 6497-block  0
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 6497-block  1
    %%%%%: 6497-block  2
    #####: 6498:         (SkipPrefix(GTEST_FLAG_PREFIX_, &str) ||
    %%%%%: 6498-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6499:          SkipPrefix(GTEST_FLAG_PREFIX_DASH_, &str));
    %%%%%: 6499-block  0
call    0 never executed
    %%%%%: 6499-block  1
        -: 6500:}
        -: 6501:
        -: 6502:// Prints a string containing code-encoded text.  The following escape
        -: 6503:// sequences can be used in the string to control the text color:
        -: 6504://
        -: 6505://   @@    prints a single '@' character.
        -: 6506://   @R    changes the color to red.
        -: 6507://   @G    changes the color to green.
        -: 6508://   @Y    changes the color to yellow.
        -: 6509://   @D    changes to the default terminal text color.
        -: 6510://
function _ZN7testing8internalL17PrintColorEncodedEPKc called 0 returned 0% blocks executed 0%
    #####: 6511:static void PrintColorEncoded(const char* str) {
    #####: 6512:  GTestColor color = GTestColor::kDefault;  // The current color.
    %%%%%: 6512-block  0
        -: 6513:
        -: 6514:  // Conceptually, we split the string into segments divided by escape
        -: 6515:  // sequences.  Then we print one segment at a time.  At the end of
        -: 6516:  // each iteration, the str pointer advances to the beginning of the
        -: 6517:  // next segment.
        -: 6518:  for (;;) {
    #####: 6519:    const char* p = strchr(str, '@');
    #####: 6520:    if (p == nullptr) {
    %%%%%: 6520-block  0
branch  0 never executed
branch  1 never executed
    #####: 6521:      ColoredPrintf(color, "%s", str);
    %%%%%: 6521-block  0
call    0 never executed
    #####: 6522:      return;
    %%%%%: 6522-block  0
        -: 6523:    }
        -: 6524:
    #####: 6525:    ColoredPrintf(color, "%s", std::string(str, p).c_str());
    %%%%%: 6525-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 6525-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 6525-block  2
call    8 never executed
call    9 never executed
    $$$$$: 6525-block  3
call   10 never executed
    $$$$$: 6525-block  4
call   11 never executed
    $$$$$: 6525-block  5
        -: 6526:
    #####: 6527:    const char ch = p[1];
    #####: 6528:    str = p + 2;
    #####: 6529:    if (ch == '@') {
branch  0 never executed
branch  1 never executed
    #####: 6530:      ColoredPrintf(color, "@");
    %%%%%: 6530-block  0
call    0 never executed
    #####: 6531:    } else if (ch == 'D') {
    %%%%%: 6531-block  0
branch  0 never executed
branch  1 never executed
    #####: 6532:      color = GTestColor::kDefault;
    %%%%%: 6532-block  0
    #####: 6533:    } else if (ch == 'R') {
    %%%%%: 6533-block  0
branch  0 never executed
branch  1 never executed
    #####: 6534:      color = GTestColor::kRed;
    %%%%%: 6534-block  0
    #####: 6535:    } else if (ch == 'G') {
    %%%%%: 6535-block  0
branch  0 never executed
branch  1 never executed
    #####: 6536:      color = GTestColor::kGreen;
    %%%%%: 6536-block  0
    #####: 6537:    } else if (ch == 'Y') {
    %%%%%: 6537-block  0
branch  0 never executed
branch  1 never executed
    #####: 6538:      color = GTestColor::kYellow;
    %%%%%: 6538-block  0
        -: 6539:    } else {
    #####: 6540:      --str;
    %%%%%: 6540-block  0
        -: 6541:    }
    #####: 6542:  }
    %%%%%: 6542-block  0
        -: 6543:}
        -: 6544:
        -: 6545:static const char kColorEncodedHelpMessage[] =
        -: 6546:    "This program contains tests written using " GTEST_NAME_
        -: 6547:    ". You can use the\n"
        -: 6548:    "following command line flags to control its behavior:\n"
        -: 6549:    "\n"
        -: 6550:    "Test Selection:\n"
        -: 6551:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6552:    "list_tests@D\n"
        -: 6553:    "      List the names of all tests instead of running them. The name of\n"
        -: 6554:    "      TEST(Foo, Bar) is \"Foo.Bar\".\n"
        -: 6555:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6556:    "filter=@YPOSITIVE_PATTERNS"
        -: 6557:    "[@G-@YNEGATIVE_PATTERNS]@D\n"
        -: 6558:    "      Run only the tests whose name matches one of the positive patterns "
        -: 6559:    "but\n"
        -: 6560:    "      none of the negative patterns. '?' matches any single character; "
        -: 6561:    "'*'\n"
        -: 6562:    "      matches any substring; ':' separates two patterns.\n"
        -: 6563:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6564:    "also_run_disabled_tests@D\n"
        -: 6565:    "      Run all disabled tests too.\n"
        -: 6566:    "\n"
        -: 6567:    "Test Execution:\n"
        -: 6568:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6569:    "repeat=@Y[COUNT]@D\n"
        -: 6570:    "      Run the tests repeatedly; use a negative count to repeat forever.\n"
        -: 6571:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6572:    "shuffle@D\n"
        -: 6573:    "      Randomize tests' orders on every iteration.\n"
        -: 6574:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6575:    "random_seed=@Y[NUMBER]@D\n"
        -: 6576:    "      Random number seed to use for shuffling test orders (between 1 and\n"
        -: 6577:    "      99999, or 0 to use a seed based on the current time).\n"
        -: 6578:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6579:    "recreate_environments_when_repeating@D\n"
        -: 6580:    "      Sets up and tears down the global test environment on each repeat\n"
        -: 6581:    "      of the test.\n"
        -: 6582:    "\n"
        -: 6583:    "Test Output:\n"
        -: 6584:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6585:    "color=@Y(@Gyes@Y|@Gno@Y|@Gauto@Y)@D\n"
        -: 6586:    "      Enable/disable colored output. The default is @Gauto@D.\n"
        -: 6587:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6588:    "brief=1@D\n"
        -: 6589:    "      Only print test failures.\n"
        -: 6590:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6591:    "print_time=0@D\n"
        -: 6592:    "      Don't print the elapsed time of each test.\n"
        -: 6593:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6594:    "output=@Y(@Gjson@Y|@Gxml@Y)[@G:@YDIRECTORY_PATH@G" GTEST_PATH_SEP_
        -: 6595:    "@Y|@G:@YFILE_PATH]@D\n"
        -: 6596:    "      Generate a JSON or XML report in the given directory or with the "
        -: 6597:    "given\n"
        -: 6598:    "      file name. @YFILE_PATH@D defaults to @Gtest_detail.xml@D.\n"
        -: 6599:#if GTEST_CAN_STREAM_RESULTS_
        -: 6600:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6601:    "stream_result_to=@YHOST@G:@YPORT@D\n"
        -: 6602:    "      Stream test results to the given server.\n"
        -: 6603:#endif  // GTEST_CAN_STREAM_RESULTS_
        -: 6604:    "\n"
        -: 6605:    "Assertion Behavior:\n"
        -: 6606:#if defined(GTEST_HAS_DEATH_TEST) && !defined(GTEST_OS_WINDOWS)
        -: 6607:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6608:    "death_test_style=@Y(@Gfast@Y|@Gthreadsafe@Y)@D\n"
        -: 6609:    "      Set the default death test style.\n"
        -: 6610:#endif  // GTEST_HAS_DEATH_TEST && !GTEST_OS_WINDOWS
        -: 6611:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6612:    "break_on_failure@D\n"
        -: 6613:    "      Turn assertion failures into debugger break-points.\n"
        -: 6614:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6615:    "throw_on_failure@D\n"
        -: 6616:    "      Turn assertion failures into C++ exceptions for use by an external\n"
        -: 6617:    "      test framework.\n"
        -: 6618:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6619:    "catch_exceptions=0@D\n"
        -: 6620:    "      Do not report exceptions as test failures. Instead, allow them\n"
        -: 6621:    "      to crash the program or throw a pop-up (on Windows).\n"
        -: 6622:    "\n"
        -: 6623:    "Except for @G--" GTEST_FLAG_PREFIX_
        -: 6624:    "list_tests@D, you can alternatively set "
        -: 6625:    "the corresponding\n"
        -: 6626:    "environment variable of a flag (all letters in upper-case). For example, "
        -: 6627:    "to\n"
        -: 6628:    "disable colored text output, you can either specify "
        -: 6629:    "@G--" GTEST_FLAG_PREFIX_
        -: 6630:    "color=no@D or set\n"
        -: 6631:    "the @G" GTEST_FLAG_PREFIX_UPPER_
        -: 6632:    "COLOR@D environment variable to @Gno@D.\n"
        -: 6633:    "\n"
        -: 6634:    "For more information, please read the " GTEST_NAME_
        -: 6635:    " documentation at\n"
        -: 6636:    "@G" GTEST_PROJECT_URL_ "@D. If you find a bug in " GTEST_NAME_
        -: 6637:    "\n"
        -: 6638:    "(not one in your own code or tests), please report it to\n"
        -: 6639:    "@G<" GTEST_DEV_EMAIL_ ">@D.\n";
        -: 6640:
function _ZN7testing8internalL19ParseGoogleTestFlagEPKc called 2 returned 100% blocks executed 26%
        2: 6641:static bool ParseGoogleTestFlag(const char* const arg) {
        -: 6642:#define GTEST_INTERNAL_PARSE_FLAG(flag_name)  \
        -: 6643:  do {                                        \
        -: 6644:    auto value = GTEST_FLAG_GET(flag_name);   \
        -: 6645:    if (ParseFlag(arg, #flag_name, &value)) { \
        -: 6646:      GTEST_FLAG_SET(flag_name, value);       \
        -: 6647:      return true;                            \
        -: 6648:    }                                         \
        -: 6649:  } while (false)
        -: 6650:
       2*: 6651:  GTEST_INTERNAL_PARSE_FLAG(also_run_disabled_tests);
        2: 6651-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2: 6651-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 2
    %%%%%: 6651-block  2
       2*: 6652:  GTEST_INTERNAL_PARSE_FLAG(break_on_failure);
        2: 6652-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2: 6652-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 2
    %%%%%: 6652-block  2
       2*: 6653:  GTEST_INTERNAL_PARSE_FLAG(catch_exceptions);
        2: 6653-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2: 6653-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 2
    %%%%%: 6653-block  2
        2: 6654:  GTEST_INTERNAL_PARSE_FLAG(color);
        2: 6654-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2: 6654-block  1
call    3 returned 2
branch  4 taken 2 (fallthrough)
branch  5 taken 0 (throw)
        2: 6654-block  2
branch  6 taken 1 (fallthrough)
branch  7 taken 1
        1: 6654-block  3
call    8 returned 1
branch  9 taken 1 (fallthrough)
branch 10 taken 0 (throw)
        1: 6654-block  4
        1: 6654-block  5
        2: 6654-block  6
call   11 returned 2
branch 12 taken 1 (fallthrough)
branch 13 taken 1
    $$$$$: 6654-block  7
call   14 never executed
       1*: 6655:  GTEST_INTERNAL_PARSE_FLAG(death_test_style);
        1: 6655-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 6655-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 6655-block  2
branch  6 taken 0 (fallthrough)
branch  7 taken 1
    %%%%%: 6655-block  3
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 6655-block  4
        1: 6655-block  5
        1: 6655-block  6
call   11 returned 1
branch 12 taken 1 (fallthrough)
branch 13 taken 0
    $$$$$: 6655-block  7
call   14 never executed
       1*: 6656:  GTEST_INTERNAL_PARSE_FLAG(death_test_use_fork);
        1: 6656-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 6656-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%: 6656-block  2
       1*: 6657:  GTEST_INTERNAL_PARSE_FLAG(fail_fast);
        1: 6657-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 6657-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%: 6657-block  2
       1*: 6658:  GTEST_INTERNAL_PARSE_FLAG(filter);
        1: 6658-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 6658-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 6658-block  2
branch  6 taken 1 (fallthrough)
branch  7 taken 0
        1: 6658-block  3
call    8 returned 1
branch  9 taken 1 (fallthrough)
branch 10 taken 0 (throw)
        1: 6658-block  4
    %%%%%: 6658-block  5
        1: 6658-block  6
call   11 returned 1
branch 12 taken 0 (fallthrough)
branch 13 taken 1
    $$$$$: 6658-block  7
call   14 never executed
    #####: 6659:  GTEST_INTERNAL_PARSE_FLAG(internal_run_death_test);
    %%%%%: 6659-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6659-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6659-block  2
branch  6 never executed
branch  7 never executed
    %%%%%: 6659-block  3
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 6659-block  4
    %%%%%: 6659-block  5
    %%%%%: 6659-block  6
call   11 never executed
branch 12 never executed
branch 13 never executed
    $$$$$: 6659-block  7
call   14 never executed
    #####: 6660:  GTEST_INTERNAL_PARSE_FLAG(list_tests);
    %%%%%: 6660-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6660-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 6660-block  2
    #####: 6661:  GTEST_INTERNAL_PARSE_FLAG(output);
    %%%%%: 6661-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6661-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6661-block  2
branch  6 never executed
branch  7 never executed
    %%%%%: 6661-block  3
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 6661-block  4
    %%%%%: 6661-block  5
    %%%%%: 6661-block  6
call   11 never executed
branch 12 never executed
branch 13 never executed
    $$$$$: 6661-block  7
call   14 never executed
    #####: 6662:  GTEST_INTERNAL_PARSE_FLAG(brief);
    %%%%%: 6662-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6662-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 6662-block  2
    #####: 6663:  GTEST_INTERNAL_PARSE_FLAG(print_time);
    %%%%%: 6663-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6663-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 6663-block  2
    #####: 6664:  GTEST_INTERNAL_PARSE_FLAG(print_utf8);
    %%%%%: 6664-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6664-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 6664-block  2
    #####: 6665:  GTEST_INTERNAL_PARSE_FLAG(random_seed);
    %%%%%: 6665-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6665-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 6665-block  2
    #####: 6666:  GTEST_INTERNAL_PARSE_FLAG(repeat);
    %%%%%: 6666-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6666-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 6666-block  2
    #####: 6667:  GTEST_INTERNAL_PARSE_FLAG(recreate_environments_when_repeating);
    %%%%%: 6667-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6667-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 6667-block  2
    #####: 6668:  GTEST_INTERNAL_PARSE_FLAG(shuffle);
    %%%%%: 6668-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6668-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 6668-block  2
    #####: 6669:  GTEST_INTERNAL_PARSE_FLAG(stack_trace_depth);
    %%%%%: 6669-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6669-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 6669-block  2
    #####: 6670:  GTEST_INTERNAL_PARSE_FLAG(stream_result_to);
    %%%%%: 6670-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6670-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6670-block  2
branch  6 never executed
branch  7 never executed
    %%%%%: 6670-block  3
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 6670-block  4
    %%%%%: 6670-block  5
    %%%%%: 6670-block  6
call   11 never executed
branch 12 never executed
branch 13 never executed
    $$$$$: 6670-block  7
call   14 never executed
    #####: 6671:  GTEST_INTERNAL_PARSE_FLAG(throw_on_failure);
    %%%%%: 6671-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6671-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 6671-block  2
    #####: 6672:  return false;
    %%%%%: 6672-block  0
        -: 6673:}
        -: 6674:
        -: 6675:#if GTEST_USE_OWN_FLAGFILE_FLAG_ && GTEST_HAS_FILE_SYSTEM
function _ZN7testing8internalL17LoadFlagsFromFileERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 6676:static void LoadFlagsFromFile(const std::string& path) {
    #####: 6677:  FILE* flagfile = posix::FOpen(path.c_str(), "r");
    %%%%%: 6677-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 6678:  if (!flagfile) {
    %%%%%: 6678-block  0
branch  0 never executed
branch  1 never executed
    #####: 6679:    GTEST_LOG_(FATAL) << "Unable to open file \"" << GTEST_FLAG_GET(flagfile)
    %%%%%: 6679-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6679-block  1
call    3 never executed
    %%%%%: 6679-block  2
call    4 never executed
    $$$$$: 6679-block  3
call    5 never executed
    $$$$$: 6679-block  4
    #####: 6680:                      << "\"";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6680-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6680-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
        -: 6681:  }
    #####: 6682:  std::string contents(ReadEntireFile(flagfile));
    %%%%%: 6682-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6683:  posix::FClose(flagfile);
    %%%%%: 6683-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6684:  std::vector<std::string> lines;
    #####: 6685:  SplitString(contents, '\n', &lines);
    %%%%%: 6685-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6686:  for (size_t i = 0; i < lines.size(); ++i) {
    %%%%%: 6686-block  0
    %%%%%: 6686-block  1
    %%%%%: 6686-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6687:    if (lines[i].empty()) continue;
    %%%%%: 6687-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 6687-block  1
    #####: 6688:    if (!ParseGoogleTestFlag(lines[i].c_str())) g_help_flag = true;
    %%%%%: 6688-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 6688-block  1
branch  5 never executed
branch  6 never executed
    %%%%%: 6688-block  2
        -: 6689:  }
    #####: 6690:}
    %%%%%: 6690-block  0
call    0 never executed
call    1 never executed
    $$$$$: 6690-block  1
call    2 never executed
    $$$$$: 6690-block  2
call    3 never executed
        -: 6691:#endif  // GTEST_USE_OWN_FLAGFILE_FLAG_ && GTEST_HAS_FILE_SYSTEM
        -: 6692:
        -: 6693:// Parses the command line for Google Test flags, without initializing
        -: 6694:// other parts of Google Test.  The type parameter CharType can be
        -: 6695:// instantiated to either char or wchar_t.
        -: 6696:template <typename CharType>
       1*: 6697:void ParseGoogleTestFlagsOnlyImpl(int* argc, CharType** argv) {
       1*: 6698:  std::string flagfile_value;
       3*: 6699:  for (int i = 1; i < *argc; i++) {
       2*: 6700:    const std::string arg_string = StreamableToString(argv[i]);
       2*: 6701:    const char* const arg = arg_string.c_str();
        -: 6702:
        -: 6703:    using internal::ParseFlag;
        -: 6704:
       2*: 6705:    bool remove_flag = false;
       2*: 6706:    if (ParseGoogleTestFlag(arg)) {
       2*: 6707:      remove_flag = true;
        -: 6708:#if GTEST_USE_OWN_FLAGFILE_FLAG_ && GTEST_HAS_FILE_SYSTEM
    #####: 6709:    } else if (ParseFlag(arg, "flagfile", &flagfile_value)) {
    #####: 6710:      GTEST_FLAG_SET(flagfile, flagfile_value);
    #####: 6711:      LoadFlagsFromFile(flagfile_value);
    #####: 6712:      remove_flag = true;
        -: 6713:#endif  // GTEST_USE_OWN_FLAGFILE_FLAG_ && GTEST_HAS_FILE_SYSTEM
    #####: 6714:    } else if (arg_string == "--help" || HasGoogleTestFlagPrefix(arg)) {
        -: 6715:      // Both help flag and unrecognized Google Test flags (excluding
        -: 6716:      // internal ones) trigger help display.
    #####: 6717:      g_help_flag = true;
        -: 6718:    }
        -: 6719:
       2*: 6720:    if (remove_flag) {
        -: 6721:      // Shift the remainder of the argv list left by one.
       3*: 6722:      for (int j = i + 1; j < *argc; ++j) {
       1*: 6723:        argv[j - 1] = argv[j];
        -: 6724:      }
        -: 6725:
        -: 6726:      // Decrements the argument count.
       2*: 6727:      (*argc)--;
        -: 6728:
        -: 6729:      // Terminate the array with nullptr.
       2*: 6730:      argv[*argc] = nullptr;
        -: 6731:
        -: 6732:      // We also need to decrement the iterator as we just removed
        -: 6733:      // an element.
       2*: 6734:      i--;
        -: 6735:    }
        -: 6736:  }
        -: 6737:
       1*: 6738:  if (g_help_flag) {
        -: 6739:    // We print the help here instead of in RUN_ALL_TESTS(), as the
        -: 6740:    // latter may not be called at all if the user is using Google
        -: 6741:    // Test with another testing framework.
    #####: 6742:    PrintColorEncoded(kColorEncodedHelpMessage);
        -: 6743:  }
       1*: 6744:}
------------------
_ZN7testing8internal28ParseGoogleTestFlagsOnlyImplIwEEvPiPPT_:
function _ZN7testing8internal28ParseGoogleTestFlagsOnlyImplIwEEvPiPPT_ called 0 returned 0% blocks executed 0%
    #####: 6697:void ParseGoogleTestFlagsOnlyImpl(int* argc, CharType** argv) {
    #####: 6698:  std::string flagfile_value;
    %%%%%: 6698-block  0
call    0 never executed
    #####: 6699:  for (int i = 1; i < *argc; i++) {
    %%%%%: 6699-block  0
call    0 never executed
    %%%%%: 6699-block  1
branch  1 never executed
branch  2 never executed
    $$$$$: 6699-block  2
call    3 never executed
    #####: 6700:    const std::string arg_string = StreamableToString(argv[i]);
    %%%%%: 6700-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6701:    const char* const arg = arg_string.c_str();
    %%%%%: 6701-block  0
call    0 never executed
        -: 6702:
        -: 6703:    using internal::ParseFlag;
        -: 6704:
    #####: 6705:    bool remove_flag = false;
    #####: 6706:    if (ParseGoogleTestFlag(arg)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6706-block  0
branch  3 never executed
branch  4 never executed
    #####: 6707:      remove_flag = true;
    %%%%%: 6707-block  0
        -: 6708:#if GTEST_USE_OWN_FLAGFILE_FLAG_ && GTEST_HAS_FILE_SYSTEM
    #####: 6709:    } else if (ParseFlag(arg, "flagfile", &flagfile_value)) {
    %%%%%: 6709-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6709-block  1
branch  3 never executed
branch  4 never executed
    #####: 6710:      GTEST_FLAG_SET(flagfile, flagfile_value);
    %%%%%: 6710-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6711:      LoadFlagsFromFile(flagfile_value);
    %%%%%: 6711-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6712:      remove_flag = true;
    %%%%%: 6712-block  0
        -: 6713:#endif  // GTEST_USE_OWN_FLAGFILE_FLAG_ && GTEST_HAS_FILE_SYSTEM
    #####: 6714:    } else if (arg_string == "--help" || HasGoogleTestFlagPrefix(arg)) {
    %%%%%: 6714-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6714-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6714-block  2
    %%%%%: 6714-block  3
    %%%%%: 6714-block  4
branch  6 never executed
branch  7 never executed
        -: 6715:      // Both help flag and unrecognized Google Test flags (excluding
        -: 6716:      // internal ones) trigger help display.
    #####: 6717:      g_help_flag = true;
    %%%%%: 6717-block  0
        -: 6718:    }
        -: 6719:
    #####: 6720:    if (remove_flag) {
    %%%%%: 6720-block  0
branch  0 never executed
branch  1 never executed
        -: 6721:      // Shift the remainder of the argv list left by one.
    #####: 6722:      for (int j = i + 1; j < *argc; ++j) {
    %%%%%: 6722-block  0
    %%%%%: 6722-block  1
branch  0 never executed
branch  1 never executed
    #####: 6723:        argv[j - 1] = argv[j];
    %%%%%: 6723-block  0
        -: 6724:      }
        -: 6725:
        -: 6726:      // Decrements the argument count.
    #####: 6727:      (*argc)--;
        -: 6728:
        -: 6729:      // Terminate the array with nullptr.
    #####: 6730:      argv[*argc] = nullptr;
        -: 6731:
        -: 6732:      // We also need to decrement the iterator as we just removed
        -: 6733:      // an element.
    #####: 6734:      i--;
    %%%%%: 6734-block  0
        -: 6735:    }
        -: 6736:  }
        -: 6737:
    #####: 6738:  if (g_help_flag) {
    %%%%%: 6738-block  0
branch  0 never executed
branch  1 never executed
        -: 6739:    // We print the help here instead of in RUN_ALL_TESTS(), as the
        -: 6740:    // latter may not be called at all if the user is using Google
        -: 6741:    // Test with another testing framework.
    #####: 6742:    PrintColorEncoded(kColorEncodedHelpMessage);
    %%%%%: 6742-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 6743:  }
    #####: 6744:}
    %%%%%: 6744-block  0
call    0 never executed
    $$$$$: 6744-block  1
call    1 never executed
------------------
_ZN7testing8internal28ParseGoogleTestFlagsOnlyImplIcEEvPiPPT_:
function _ZN7testing8internal28ParseGoogleTestFlagsOnlyImplIcEEvPiPPT_ called 1 returned 100% blocks executed 50%
        1: 6697:void ParseGoogleTestFlagsOnlyImpl(int* argc, CharType** argv) {
        1: 6698:  std::string flagfile_value;
        1: 6698-block  0
call    0 returned 1
        3: 6699:  for (int i = 1; i < *argc; i++) {
        2: 6699-block  0
call    0 returned 2
        3: 6699-block  1
branch  1 taken 2
branch  2 taken 1 (fallthrough)
    $$$$$: 6699-block  2
call    3 never executed
        2: 6700:    const std::string arg_string = StreamableToString(argv[i]);
        2: 6700-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2: 6701:    const char* const arg = arg_string.c_str();
        2: 6701-block  0
call    0 returned 2
        -: 6702:
        -: 6703:    using internal::ParseFlag;
        -: 6704:
        2: 6705:    bool remove_flag = false;
        2: 6706:    if (ParseGoogleTestFlag(arg)) {
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2: 6706-block  0
branch  3 taken 2 (fallthrough)
branch  4 taken 0
        2: 6707:      remove_flag = true;
        2: 6707-block  0
        -: 6708:#if GTEST_USE_OWN_FLAGFILE_FLAG_ && GTEST_HAS_FILE_SYSTEM
    #####: 6709:    } else if (ParseFlag(arg, "flagfile", &flagfile_value)) {
    %%%%%: 6709-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6709-block  1
branch  3 never executed
branch  4 never executed
    #####: 6710:      GTEST_FLAG_SET(flagfile, flagfile_value);
    %%%%%: 6710-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6711:      LoadFlagsFromFile(flagfile_value);
    %%%%%: 6711-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6712:      remove_flag = true;
    %%%%%: 6712-block  0
        -: 6713:#endif  // GTEST_USE_OWN_FLAGFILE_FLAG_ && GTEST_HAS_FILE_SYSTEM
    #####: 6714:    } else if (arg_string == "--help" || HasGoogleTestFlagPrefix(arg)) {
    %%%%%: 6714-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6714-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6714-block  2
    %%%%%: 6714-block  3
    %%%%%: 6714-block  4
branch  6 never executed
branch  7 never executed
        -: 6715:      // Both help flag and unrecognized Google Test flags (excluding
        -: 6716:      // internal ones) trigger help display.
    #####: 6717:      g_help_flag = true;
    %%%%%: 6717-block  0
        -: 6718:    }
        -: 6719:
        2: 6720:    if (remove_flag) {
        2: 6720-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        -: 6721:      // Shift the remainder of the argv list left by one.
        3: 6722:      for (int j = i + 1; j < *argc; ++j) {
        2: 6722-block  0
        3: 6722-block  1
branch  0 taken 1
branch  1 taken 2 (fallthrough)
        1: 6723:        argv[j - 1] = argv[j];
        1: 6723-block  0
        -: 6724:      }
        -: 6725:
        -: 6726:      // Decrements the argument count.
        2: 6727:      (*argc)--;
        -: 6728:
        -: 6729:      // Terminate the array with nullptr.
        2: 6730:      argv[*argc] = nullptr;
        -: 6731:
        -: 6732:      // We also need to decrement the iterator as we just removed
        -: 6733:      // an element.
        2: 6734:      i--;
        2: 6734-block  0
        -: 6735:    }
        -: 6736:  }
        -: 6737:
        1: 6738:  if (g_help_flag) {
        1: 6738-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -: 6739:    // We print the help here instead of in RUN_ALL_TESTS(), as the
        -: 6740:    // latter may not be called at all if the user is using Google
        -: 6741:    // Test with another testing framework.
    #####: 6742:    PrintColorEncoded(kColorEncodedHelpMessage);
    %%%%%: 6742-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 6743:  }
        1: 6744:}
        1: 6744-block  0
call    0 returned 1
    $$$$$: 6744-block  1
call    1 never executed
------------------
        -: 6745:
        -: 6746:// Parses the command line for Google Test flags, without initializing
        -: 6747:// other parts of Google Test. This function updates argc and argv by removing
        -: 6748:// flags that are known to GoogleTest (including other user flags defined using
        -: 6749:// ABSL_FLAG if GoogleTest is built with GTEST_USE_ABSL). Other arguments
        -: 6750:// remain in place. Unrecognized flags are not reported and do not cause the
        -: 6751:// program to exit.
function _ZN7testing8internal24ParseGoogleTestFlagsOnlyEPiPPc called 1 returned 100% blocks executed 100%
        1: 6752:void ParseGoogleTestFlagsOnly(int* argc, char** argv) {
        -: 6753:#ifdef GTEST_HAS_ABSL_FLAGS
        -: 6754:  if (*argc <= 0) return;
        -: 6755:
        -: 6756:  std::vector<char*> positional_args;
        -: 6757:  std::vector<absl::UnrecognizedFlag> unrecognized_flags;
        -: 6758:  absl::ParseAbseilFlagsOnly(*argc, argv, positional_args, unrecognized_flags);
        -: 6759:  absl::flat_hash_set<absl::string_view> unrecognized;
        -: 6760:  for (const auto& flag : unrecognized_flags) {
        -: 6761:    unrecognized.insert(flag.flag_name);
        -: 6762:  }
        -: 6763:  absl::flat_hash_set<char*> positional;
        -: 6764:  for (const auto& arg : positional_args) {
        -: 6765:    positional.insert(arg);
        -: 6766:  }
        -: 6767:
        -: 6768:  int out_pos = 1;
        -: 6769:  int in_pos = 1;
        -: 6770:  for (; in_pos < *argc; ++in_pos) {
        -: 6771:    char* arg = argv[in_pos];
        -: 6772:    absl::string_view arg_str(arg);
        -: 6773:    if (absl::ConsumePrefix(&arg_str, "--")) {
        -: 6774:      // Flag-like argument. If the flag was unrecognized, keep it.
        -: 6775:      // If it was a GoogleTest flag, remove it.
        -: 6776:      if (unrecognized.contains(arg_str)) {
        -: 6777:        argv[out_pos++] = argv[in_pos];
        -: 6778:        continue;
        -: 6779:      }
        -: 6780:    }
        -: 6781:
        -: 6782:    if (arg_str.empty()) {
        -: 6783:      ++in_pos;
        -: 6784:      break;  // '--' indicates that the rest of the arguments are positional
        -: 6785:    }
        -: 6786:
        -: 6787:    // Probably a positional argument. If it is in fact positional, keep it.
        -: 6788:    // If it was a value for the flag argument, remove it.
        -: 6789:    if (positional.contains(arg)) {
        -: 6790:      argv[out_pos++] = arg;
        -: 6791:    }
        -: 6792:  }
        -: 6793:
        -: 6794:  // The rest are positional args for sure.
        -: 6795:  while (in_pos < *argc) {
        -: 6796:    argv[out_pos++] = argv[in_pos++];
        -: 6797:  }
        -: 6798:
        -: 6799:  *argc = out_pos;
        -: 6800:  argv[out_pos] = nullptr;
        -: 6801:#else
        1: 6802:  ParseGoogleTestFlagsOnlyImpl(argc, argv);
        1: 6802-block  0
call    0 returned 1
        -: 6803:#endif
        -: 6804:
        -: 6805:  // Fix the value of *_NSGetArgc() on macOS, but if and only if
        -: 6806:  // *_NSGetArgv() == argv
        -: 6807:  // Only applicable to char** version of argv
        -: 6808:#ifdef GTEST_OS_MAC
        -: 6809:#ifndef GTEST_OS_IOS
        1: 6810:  if (*_NSGetArgv() == argv) {
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1: 6811:    *_NSGetArgc() = *argc;
        1: 6811-block  0
call    0 returned 1
        -: 6812:  }
        -: 6813:#endif
        -: 6814:#endif
        1: 6815:}
function _ZN7testing8internal24ParseGoogleTestFlagsOnlyEPiPPw called 0 returned 0% blocks executed 0%
    #####: 6816:void ParseGoogleTestFlagsOnly(int* argc, wchar_t** argv) {
    #####: 6817:  ParseGoogleTestFlagsOnlyImpl(argc, argv);
    %%%%%: 6817-block  0
call    0 never executed
    #####: 6818:}
        -: 6819:
        -: 6820:// The internal implementation of InitGoogleTest().
        -: 6821://
        -: 6822:// The type parameter CharType can be instantiated to either char or
        -: 6823:// wchar_t.
        -: 6824:template <typename CharType>
       1*: 6825:void InitGoogleTestImpl(int* argc, CharType** argv) {
        -: 6826:  // We don't want to run the initialization code twice.
       1*: 6827:  if (GTestIsInitialized()) return;
        -: 6828:
       1*: 6829:  if (*argc <= 0) return;
        -: 6830:
       1*: 6831:  g_argvs.clear();
       4*: 6832:  for (int i = 0; i != *argc; i++) {
       3*: 6833:    g_argvs.push_back(StreamableToString(argv[i]));
        -: 6834:  }
        -: 6835:
        -: 6836:#ifdef GTEST_HAS_ABSL
        -: 6837:  absl::InitializeSymbolizer(g_argvs[0].c_str());
        -: 6838:
        -: 6839:#ifdef GTEST_HAS_ABSL_FLAGS
        -: 6840:  // When using the Abseil Flags library, set the program usage message to the
        -: 6841:  // help message, but remove the color-encoding from the message first.
        -: 6842:  absl::SetProgramUsageMessage(absl::StrReplaceAll(
        -: 6843:      kColorEncodedHelpMessage,
        -: 6844:      {{"@D", ""}, {"@R", ""}, {"@G", ""}, {"@Y", ""}, {"@@", "@"}}));
        -: 6845:#endif  // GTEST_HAS_ABSL_FLAGS
        -: 6846:#endif  // GTEST_HAS_ABSL
        -: 6847:
       1*: 6848:  ParseGoogleTestFlagsOnly(argc, argv);
       1*: 6849:  GetUnitTestImpl()->PostFlagParsingInit();
        -: 6850:}
------------------
_ZN7testing8internal18InitGoogleTestImplIwEEvPiPPT_:
function _ZN7testing8internal18InitGoogleTestImplIwEEvPiPPT_ called 0 returned 0% blocks executed 0%
    #####: 6825:void InitGoogleTestImpl(int* argc, CharType** argv) {
        -: 6826:  // We don't want to run the initialization code twice.
    #####: 6827:  if (GTestIsInitialized()) return;
    %%%%%: 6827-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6827-block  1
        -: 6828:
    #####: 6829:  if (*argc <= 0) return;
    %%%%%: 6829-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 6829-block  1
        -: 6830:
    #####: 6831:  g_argvs.clear();
    %%%%%: 6831-block  0
call    0 never executed
    #####: 6832:  for (int i = 0; i != *argc; i++) {
    %%%%%: 6832-block  0
branch  0 never executed
branch  1 never executed
    #####: 6833:    g_argvs.push_back(StreamableToString(argv[i]));
    %%%%%: 6833-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6833-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6833-block  2
call    6 never executed
    $$$$$: 6833-block  3
call    7 never executed
        -: 6834:  }
        -: 6835:
        -: 6836:#ifdef GTEST_HAS_ABSL
        -: 6837:  absl::InitializeSymbolizer(g_argvs[0].c_str());
        -: 6838:
        -: 6839:#ifdef GTEST_HAS_ABSL_FLAGS
        -: 6840:  // When using the Abseil Flags library, set the program usage message to the
        -: 6841:  // help message, but remove the color-encoding from the message first.
        -: 6842:  absl::SetProgramUsageMessage(absl::StrReplaceAll(
        -: 6843:      kColorEncodedHelpMessage,
        -: 6844:      {{"@D", ""}, {"@R", ""}, {"@G", ""}, {"@Y", ""}, {"@@", "@"}}));
        -: 6845:#endif  // GTEST_HAS_ABSL_FLAGS
        -: 6846:#endif  // GTEST_HAS_ABSL
        -: 6847:
    #####: 6848:  ParseGoogleTestFlagsOnly(argc, argv);
    %%%%%: 6848-block  0
call    0 never executed
    #####: 6849:  GetUnitTestImpl()->PostFlagParsingInit();
call    0 never executed
call    1 never executed
        -: 6850:}
------------------
_ZN7testing8internal18InitGoogleTestImplIcEEvPiPPT_:
function _ZN7testing8internal18InitGoogleTestImplIcEEvPiPPT_ called 1 returned 100% blocks executed 79%
        1: 6825:void InitGoogleTestImpl(int* argc, CharType** argv) {
        -: 6826:  // We don't want to run the initialization code twice.
       1*: 6827:  if (GTestIsInitialized()) return;
        1: 6827-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%: 6827-block  1
        -: 6828:
       1*: 6829:  if (*argc <= 0) return;
        1: 6829-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 6829-block  1
        -: 6830:
        1: 6831:  g_argvs.clear();
        1: 6831-block  0
call    0 returned 1
        4: 6832:  for (int i = 0; i != *argc; i++) {
        4: 6832-block  0
branch  0 taken 3
branch  1 taken 1 (fallthrough)
        3: 6833:    g_argvs.push_back(StreamableToString(argv[i]));
        3: 6833-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3: 6833-block  1
call    3 returned 3
branch  4 taken 3 (fallthrough)
branch  5 taken 0 (throw)
        3: 6833-block  2
call    6 returned 3
    $$$$$: 6833-block  3
call    7 never executed
        -: 6834:  }
        -: 6835:
        -: 6836:#ifdef GTEST_HAS_ABSL
        -: 6837:  absl::InitializeSymbolizer(g_argvs[0].c_str());
        -: 6838:
        -: 6839:#ifdef GTEST_HAS_ABSL_FLAGS
        -: 6840:  // When using the Abseil Flags library, set the program usage message to the
        -: 6841:  // help message, but remove the color-encoding from the message first.
        -: 6842:  absl::SetProgramUsageMessage(absl::StrReplaceAll(
        -: 6843:      kColorEncodedHelpMessage,
        -: 6844:      {{"@D", ""}, {"@R", ""}, {"@G", ""}, {"@Y", ""}, {"@@", "@"}}));
        -: 6845:#endif  // GTEST_HAS_ABSL_FLAGS
        -: 6846:#endif  // GTEST_HAS_ABSL
        -: 6847:
        1: 6848:  ParseGoogleTestFlagsOnly(argc, argv);
        1: 6848-block  0
call    0 returned 1
        1: 6849:  GetUnitTestImpl()->PostFlagParsingInit();
call    0 returned 1
call    1 returned 1
        -: 6850:}
------------------
        -: 6851:
        -: 6852:}  // namespace internal
        -: 6853:
        -: 6854:// Initializes Google Test.  This must be called before calling
        -: 6855:// RUN_ALL_TESTS().  In particular, it parses a command line for the
        -: 6856:// flags that Google Test recognizes.  Whenever a Google Test flag is
        -: 6857:// seen, it is removed from argv, and *argc is decremented.
        -: 6858://
        -: 6859:// No value is returned.  Instead, the Google Test flag variables are
        -: 6860:// updated.
        -: 6861://
        -: 6862:// Calling the function for the second time has no user-visible effect.
function _ZN7testing14InitGoogleTestEPiPPc called 1 returned 100% blocks executed 100%
        1: 6863:void InitGoogleTest(int* argc, char** argv) {
        -: 6864:#if defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
        -: 6865:  GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_(argc, argv);
        -: 6866:#else   // defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
        1: 6867:  internal::InitGoogleTestImpl(argc, argv);
        1: 6867-block  0
call    0 returned 1
        -: 6868:#endif  // defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
        1: 6869:}
        -: 6870:
        -: 6871:// This overloaded version can be used in Windows programs compiled in
        -: 6872:// UNICODE mode.
function _ZN7testing14InitGoogleTestEPiPPw called 0 returned 0% blocks executed 0%
    #####: 6873:void InitGoogleTest(int* argc, wchar_t** argv) {
        -: 6874:#if defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
        -: 6875:  GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_(argc, argv);
        -: 6876:#else   // defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
    #####: 6877:  internal::InitGoogleTestImpl(argc, argv);
    %%%%%: 6877-block  0
call    0 never executed
        -: 6878:#endif  // defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
    #####: 6879:}
        -: 6880:
        -: 6881:// This overloaded version can be used on Arduino/embedded platforms where
        -: 6882:// there is no argc/argv.
function _ZN7testing14InitGoogleTestEv called 0 returned 0% blocks executed 0%
    #####: 6883:void InitGoogleTest() {
        -: 6884:  // Since Arduino doesn't have a command line, fake out the argc/argv arguments
    #####: 6885:  int argc = 1;
    #####: 6886:  const auto arg0 = "dummy";
    #####: 6887:  char* argv0 = const_cast<char*>(arg0);
    #####: 6888:  char** argv = &argv0;
        -: 6889:
        -: 6890:#if defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
        -: 6891:  GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_(&argc, argv);
        -: 6892:#else   // defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
    #####: 6893:  internal::InitGoogleTestImpl(&argc, argv);
    %%%%%: 6893-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 6894:#endif  // defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
    #####: 6895:}
    %%%%%: 6895-block  0
        -: 6896:
        -: 6897:#if !defined(GTEST_CUSTOM_TEMPDIR_FUNCTION_) || \
        -: 6898:    !defined(GTEST_CUSTOM_SRCDIR_FUNCTION_)
        -: 6899:// Returns the value of the first environment variable that is set and contains
        -: 6900:// a non-empty string. If there are none, returns the "fallback" string. Adds
        -: 6901:// the director-separator character as a suffix if not provided in the
        -: 6902:// environment variable value.
function _ZN7testingL13GetDirFromEnvESt16initializer_listIPKcES2_c called 0 returned 0% blocks executed 0%
    #####: 6903:static std::string GetDirFromEnv(
        -: 6904:    std::initializer_list<const char*> environment_variables,
        -: 6905:    const char* fallback, char separator) {
    #####: 6906:  for (const char* variable_name : environment_variables) {
    %%%%%: 6906-block  0
call    0 never executed
call    1 never executed
    %%%%%: 6906-block  1
    %%%%%: 6906-block  2
branch  2 never executed
branch  3 never executed
    #####: 6907:    const char* value = internal::posix::GetEnv(variable_name);
    %%%%%: 6907-block  0
call    0 never executed
    #####: 6908:    if (value != nullptr && value[0] != '\0') {
branch  0 never executed
branch  1 never executed
    %%%%%: 6908-block  0
branch  2 never executed
branch  3 never executed
    #####: 6909:      if (value[strlen(value) - 1] != separator) {
    %%%%%: 6909-block  0
branch  0 never executed
branch  1 never executed
    #####: 6910:        return std::string(value).append(1, separator);
    %%%%%: 6910-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 6910-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 6910-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 6910-block  3
call   10 never executed
call   11 never executed
    $$$$$: 6910-block  4
call   12 never executed
    $$$$$: 6910-block  5
call   13 never executed
    $$$$$: 6910-block  6
    $$$$$: 6910-block  7
        -: 6911:      }
    #####: 6912:      return value;
    %%%%%: 6912-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 6912-block  1
call    4 never executed
    $$$$$: 6912-block  2
call    5 never executed
    $$$$$: 6912-block  3
        -: 6913:    }
        -: 6914:  }
    #####: 6915:  return fallback;
    %%%%%: 6915-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 6915-block  1
call    4 never executed
    $$$$$: 6915-block  2
call    5 never executed
        -: 6916:}
        -: 6917:#endif
        -: 6918:
function _ZN7testing7TempDirB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####: 6919:std::string TempDir() {
        -: 6920:#if defined(GTEST_CUSTOM_TEMPDIR_FUNCTION_)
        -: 6921:  return GTEST_CUSTOM_TEMPDIR_FUNCTION_();
        -: 6922:#elif defined(GTEST_OS_WINDOWS) || defined(GTEST_OS_WINDOWS_MOBILE)
        -: 6923:  return GetDirFromEnv({"TEST_TMPDIR", "TEMP"}, "\\temp\\", '\\');
        -: 6924:#elif defined(GTEST_OS_LINUX_ANDROID)
        -: 6925:  return GetDirFromEnv({"TEST_TMPDIR", "TMPDIR"}, "/data/local/tmp/", '/');
        -: 6926:#else
    #####: 6927:  return GetDirFromEnv({"TEST_TMPDIR", "TMPDIR"}, "/tmp/", '/');
    %%%%%: 6927-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6927-block  1
    %%%%%: 6927-block  2
        -: 6928:#endif
        -: 6929:}
        -: 6930:
        -: 6931:#if GTEST_HAS_FILE_SYSTEM && !defined(GTEST_CUSTOM_SRCDIR_FUNCTION_)
        -: 6932:// Returns the directory path (including terminating separator) of the current
        -: 6933:// executable as derived from argv[0].
function _ZN7testingL29GetCurrentExecutableDirectoryEv called 0 returned 0% blocks executed 0%
    #####: 6934:static std::string GetCurrentExecutableDirectory() {
    #####: 6935:  internal::FilePath argv_0(internal::GetArgvs()[0]);
    %%%%%: 6935-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6935-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 6935-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 6935-block  3
call   10 never executed
call   11 never executed
    $$$$$: 6935-block  4
call   12 never executed
    $$$$$: 6935-block  5
call   13 never executed
    $$$$$: 6935-block  6
    $$$$$: 6935-block  7
    #####: 6936:  return argv_0.RemoveFileName().string();
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6936-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 6936-block  1
call    7 never executed
    %%%%%: 6936-block  2
    $$$$$: 6936-block  3
call    8 never executed
    $$$$$: 6936-block  4
    #####: 6937:}
call    0 never executed
    $$$$$: 6937-block  0
call    1 never executed
        -: 6938:#endif
        -: 6939:
        -: 6940:#if GTEST_HAS_FILE_SYSTEM
function _ZN7testing6SrcDirB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####: 6941:std::string SrcDir() {
        -: 6942:#if defined(GTEST_CUSTOM_SRCDIR_FUNCTION_)
        -: 6943:  return GTEST_CUSTOM_SRCDIR_FUNCTION_();
        -: 6944:#elif defined(GTEST_OS_WINDOWS) || defined(GTEST_OS_WINDOWS_MOBILE)
        -: 6945:  return GetDirFromEnv({"TEST_SRCDIR"}, GetCurrentExecutableDirectory().c_str(),
        -: 6946:                       '\\');
        -: 6947:#elif defined(GTEST_OS_LINUX_ANDROID)
        -: 6948:  return GetDirFromEnv({"TEST_SRCDIR"}, GetCurrentExecutableDirectory().c_str(),
        -: 6949:                       '/');
        -: 6950:#else
    #####: 6951:  return GetDirFromEnv({"TEST_SRCDIR"}, GetCurrentExecutableDirectory().c_str(),
    %%%%%: 6951-block  0
call    0 never executed
    $$$$$: 6951-block  1
call    1 never executed
    $$$$$: 6951-block  2
    #####: 6952:                       '/');
    %%%%%: 6952-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6952-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 6952-block  2
        -: 6953:#endif
        -: 6954:}
        -: 6955:#endif
        -: 6956:
        -: 6957:// Class ScopedTrace
        -: 6958:
        -: 6959:// Pushes the given source file location and message onto a per-thread
        -: 6960:// trace stack maintained by Google Test.
function _ZN7testing11ScopedTrace9PushTraceEPKciNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 6961:void ScopedTrace::PushTrace(const char* file, int line, std::string message) {
    #####: 6962:  internal::TraceInfo trace;
    %%%%%: 6962-block  0
call    0 never executed
    #####: 6963:  trace.file = file;
    #####: 6964:  trace.line = line;
    #####: 6965:  trace.message.swap(message);
call    0 never executed
        -: 6966:
    #####: 6967:  UnitTest::GetInstance()->PushGTestTrace(trace);
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6967-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 6968:}
    %%%%%: 6968-block  0
call    0 never executed
    $$$$$: 6968-block  1
call    1 never executed
        -: 6969:
        -: 6970:// Pops the info pushed by the c'tor.
    #####: 6971:ScopedTrace::~ScopedTrace() GTEST_LOCK_EXCLUDED_(&UnitTest::mutex_) {
    #####: 6972:  UnitTest::GetInstance()->PopGTestTrace();
    #####: 6973:}
------------------
_ZN7testing11ScopedTraceD1Ev:
function _ZN7testing11ScopedTraceD1Ev called 0 returned 0% blocks executed 0%
    #####: 6971:ScopedTrace::~ScopedTrace() GTEST_LOCK_EXCLUDED_(&UnitTest::mutex_) {
    #####: 6972:  UnitTest::GetInstance()->PopGTestTrace();
    %%%%%: 6972-block  0
call    0 never executed
call    1 never executed
    #####: 6973:}
------------------
_ZN7testing11ScopedTraceD2Ev:
function _ZN7testing11ScopedTraceD2Ev called 0 returned 0% blocks executed 0%
    #####: 6971:ScopedTrace::~ScopedTrace() GTEST_LOCK_EXCLUDED_(&UnitTest::mutex_) {
    #####: 6972:  UnitTest::GetInstance()->PopGTestTrace();
    %%%%%: 6972-block  0
call    0 never executed
call    1 never executed
    #####: 6973:}
------------------
        -: 6974:
        -: 6975:}  // namespace testing
